import { SchedulingApiShiftExchangeCommunicationAction, SchedulingApiShiftExchangeCommunicationState, SchedulingApiShiftExchangeState, SchedulingApiShiftExchangeCommunicationRequesterRole } from '@plano/shared/api';
/**
 * This service defines concept data for shift-exchange.
 * This file is auto generated by de.sage.scheduler.api_generator.ApiGenerator.
 */
export var ShiftExchangeCommunicationExpectedData;
(function (ShiftExchangeCommunicationExpectedData) {
    ShiftExchangeCommunicationExpectedData[ShiftExchangeCommunicationExpectedData["SWAP_OFFERS"] = 0] = "SWAP_OFFERS";
    ShiftExchangeCommunicationExpectedData[ShiftExchangeCommunicationExpectedData["INDISPOSED_MEMBERS_SELECTED_SO"] = 1] = "INDISPOSED_MEMBERS_SELECTED_SO";
})(ShiftExchangeCommunicationExpectedData || (ShiftExchangeCommunicationExpectedData = {}));
export class ActionData {
    constructor(action, prevCommunicationState, nextCommunicationState, prevState, nextState, requesterRole, condIMPrefersSwapping, condIsIllness, expectedCommunicationData, equivalentToRespondedNo) {
        /**
         * This action can be performed when current communication-state is this value.
         */
        this.prevCommunicationState = null;
        /**
         * This action can be performed when current shift-exchange state is this value.
         */
        this.prevState = null;
        /**
         * Shift-exchange state after this action is performed.
         */
        this.nextState = null;
        /**
         * Who can perform this action?
         */
        this.requesterRole = null;
        /**
         * "null" means such a condition does not exist for this action. "true" means this action can only be performed
         * when shiftExchange.indisposedMemberPrefersSwapping is "true". "false" means that value must be "false".
         */
        this.condIMPrefersSwapping = null;
        /**
         * "null" means such a condition does not exist for this action. "true" means this action can only be performed
         * when shiftExchange.isIllness is "true". "false" means that value must be "false".
         */
        this.condIsIllness = null;
        /**
         * When performing this action what data are then expected to be set for the communication? When "null" when no data
         * should be set by this action.
         */
        this.expectedCommunicationData = null;
        /**
         * When all communications' lastAction have here the value "true" then this means that "everyone-responded-no".
         */
        this.equivalentToRespondedNo = false;
        this.action = action;
        this.prevCommunicationState = prevCommunicationState;
        this.nextCommunicationState = nextCommunicationState;
        this.prevState = prevState;
        this.nextState = nextState;
        this.requesterRole = requesterRole;
        this.condIMPrefersSwapping = condIMPrefersSwapping;
        this.condIsIllness = condIsIllness;
        this.expectedCommunicationData = expectedCommunicationData;
        this.equivalentToRespondedNo = equivalentToRespondedNo;
    }
}
export class ShiftExchangeConceptServiceBase {
    constructor() {
        /**
         * Array of action concept data. The values are in the same order as the enum values.
         * So, to get the data for given "action" value you can call "actionData[action]".
         */
        this.actionData = [
            null,
            new ActionData(SchedulingApiShiftExchangeCommunicationAction.IM_REPORTED_ILLNESS, null, SchedulingApiShiftExchangeCommunicationState.ILLNESS_NEEDS_CONFIRMATION, null, SchedulingApiShiftExchangeState.ILLNESS_NEEDS_CONFIRMATION, null, null, true, null, false),
            new ActionData(SchedulingApiShiftExchangeCommunicationAction.A_REPORTED_ILLNESS, null, SchedulingApiShiftExchangeCommunicationState.ILLNESS_CONFIRMED, null, SchedulingApiShiftExchangeState.ACTIVE, null, null, true, null, false),
            new ActionData(SchedulingApiShiftExchangeCommunicationAction.ILLNESS_NEEDS_CONFIRMATION_A_DECLINED, SchedulingApiShiftExchangeCommunicationState.ILLNESS_NEEDS_CONFIRMATION, SchedulingApiShiftExchangeCommunicationState.ILLNESS_DECLINED, SchedulingApiShiftExchangeState.ILLNESS_NEEDS_CONFIRMATION, SchedulingApiShiftExchangeState.ILLNESS_DECLINED, SchedulingApiShiftExchangeCommunicationRequesterRole.A, null, true, null, false),
            new ActionData(SchedulingApiShiftExchangeCommunicationAction.ILLNESS_NEEDS_CONFIRMATION_A_ACCEPT_WITH_SHIFT_EXCHANGE, SchedulingApiShiftExchangeCommunicationState.ILLNESS_NEEDS_CONFIRMATION, SchedulingApiShiftExchangeCommunicationState.ILLNESS_CONFIRMED, SchedulingApiShiftExchangeState.ILLNESS_NEEDS_CONFIRMATION, SchedulingApiShiftExchangeState.ACTIVE, SchedulingApiShiftExchangeCommunicationRequesterRole.A, null, true, null, false),
            new ActionData(SchedulingApiShiftExchangeCommunicationAction.ILLNESS_NEEDS_CONFIRMATION_A_ACCEPT_WITHOUT_SHIFT_EXCHANGE, SchedulingApiShiftExchangeCommunicationState.ILLNESS_NEEDS_CONFIRMATION, SchedulingApiShiftExchangeCommunicationState.ILLNESS_CONFIRMED_WITHOUT_SHIFT_EXCHANGE, SchedulingApiShiftExchangeState.ILLNESS_NEEDS_CONFIRMATION, SchedulingApiShiftExchangeState.ILLNESS_ACCEPT_WITHOUT_SHIFT_EXCHANGE, SchedulingApiShiftExchangeCommunicationRequesterRole.A, null, true, null, false),
            new ActionData(SchedulingApiShiftExchangeCommunicationAction.ILLNESS_DECLINED_A_ACCEPT_WITHOUT_SHIFT_EXCHANGE, SchedulingApiShiftExchangeCommunicationState.ILLNESS_DECLINED, SchedulingApiShiftExchangeCommunicationState.ILLNESS_CONFIRMED_WITHOUT_SHIFT_EXCHANGE, SchedulingApiShiftExchangeState.ILLNESS_DECLINED, SchedulingApiShiftExchangeState.ILLNESS_ACCEPT_WITHOUT_SHIFT_EXCHANGE, SchedulingApiShiftExchangeCommunicationRequesterRole.A, null, true, null, false),
            new ActionData(SchedulingApiShiftExchangeCommunicationAction.ILLNESS_DECLINED_A_ACCEPT_WITH_SHIFT_EXCHANGE, SchedulingApiShiftExchangeCommunicationState.ILLNESS_DECLINED, SchedulingApiShiftExchangeCommunicationState.ILLNESS_CONFIRMED, SchedulingApiShiftExchangeState.ILLNESS_DECLINED, SchedulingApiShiftExchangeState.ACTIVE, SchedulingApiShiftExchangeCommunicationRequesterRole.A, null, true, null, false),
            new ActionData(SchedulingApiShiftExchangeCommunicationAction.ILLNESS_CONFIRMED_WITHOUT_SHIFT_EXCHANGE_A_START_SHIFT_EXCHANGE, SchedulingApiShiftExchangeCommunicationState.ILLNESS_CONFIRMED_WITHOUT_SHIFT_EXCHANGE, SchedulingApiShiftExchangeCommunicationState.ILLNESS_CONFIRMED, SchedulingApiShiftExchangeState.ILLNESS_ACCEPT_WITHOUT_SHIFT_EXCHANGE, SchedulingApiShiftExchangeState.ACTIVE, SchedulingApiShiftExchangeCommunicationRequesterRole.A, null, true, null, false),
            new ActionData(SchedulingApiShiftExchangeCommunicationAction.IM_NEEDS_RESPONSE, null, SchedulingApiShiftExchangeCommunicationState.CP_NOT_RESPONDED, null, null, null, null, null, null, false),
            new ActionData(SchedulingApiShiftExchangeCommunicationAction.CP_ASSIGNED_SAME_TIME, null, SchedulingApiShiftExchangeCommunicationState.CP_NOT_RESPONDED, null, null, null, null, null, null, true),
            new ActionData(SchedulingApiShiftExchangeCommunicationAction.CP_ASSIGNED_SAME_SHIFT, null, SchedulingApiShiftExchangeCommunicationState.CP_CANNOT_SHIFT_EXCHANGE, null, null, null, null, null, null, true),
            new ActionData(SchedulingApiShiftExchangeCommunicationAction.CP_IS_ABSENT, null, SchedulingApiShiftExchangeCommunicationState.CP_NOT_RESPONDED, null, null, null, null, null, null, true),
            new ActionData(SchedulingApiShiftExchangeCommunicationAction.CP_IS_ILL, null, SchedulingApiShiftExchangeCommunicationState.CP_NOT_RESPONDED, null, null, null, null, null, null, true),
            new ActionData(SchedulingApiShiftExchangeCommunicationAction.CP_NOT_RESPONDED_CP_SWAP_SHIFT, SchedulingApiShiftExchangeCommunicationState.CP_NOT_RESPONDED, SchedulingApiShiftExchangeCommunicationState.CP_WANTS_SWAP, SchedulingApiShiftExchangeState.ACTIVE, SchedulingApiShiftExchangeState.ACTIVE, SchedulingApiShiftExchangeCommunicationRequesterRole.CP, null, false, ShiftExchangeCommunicationExpectedData.SWAP_OFFERS, false),
            new ActionData(SchedulingApiShiftExchangeCommunicationAction.CP_NOT_RESPONDED_CP_TAKE_SHIFT_PREF_MISMATCH, SchedulingApiShiftExchangeCommunicationState.CP_NOT_RESPONDED, SchedulingApiShiftExchangeCommunicationState.CP_WANTS_TAKE, SchedulingApiShiftExchangeState.ACTIVE, SchedulingApiShiftExchangeState.ACTIVE, SchedulingApiShiftExchangeCommunicationRequesterRole.CP, true, null, null, false),
            new ActionData(SchedulingApiShiftExchangeCommunicationAction.CP_NOT_RESPONDED_CP_TAKE_SHIFT_PREF_MATCH, SchedulingApiShiftExchangeCommunicationState.CP_NOT_RESPONDED, SchedulingApiShiftExchangeCommunicationState.TAKE_SUCCESSFUL, SchedulingApiShiftExchangeState.ACTIVE, SchedulingApiShiftExchangeState.TAKE_SUCCESSFUL, SchedulingApiShiftExchangeCommunicationRequesterRole.CP, false, null, null, false),
            new ActionData(SchedulingApiShiftExchangeCommunicationAction.CP_NOT_RESPONDED_CP_CANNOT, SchedulingApiShiftExchangeCommunicationState.CP_NOT_RESPONDED, SchedulingApiShiftExchangeCommunicationState.CP_RESPONDED_NO, SchedulingApiShiftExchangeState.ACTIVE, SchedulingApiShiftExchangeState.ACTIVE, SchedulingApiShiftExchangeCommunicationRequesterRole.CP, null, null, null, true),
            new ActionData(SchedulingApiShiftExchangeCommunicationAction.CP_RESPONDED_NO_CP_SWAP_SHIFT, SchedulingApiShiftExchangeCommunicationState.CP_RESPONDED_NO, SchedulingApiShiftExchangeCommunicationState.CP_WANTS_SWAP, SchedulingApiShiftExchangeState.ACTIVE, SchedulingApiShiftExchangeState.ACTIVE, SchedulingApiShiftExchangeCommunicationRequesterRole.CP, null, false, ShiftExchangeCommunicationExpectedData.SWAP_OFFERS, false),
            new ActionData(SchedulingApiShiftExchangeCommunicationAction.CP_RESPONDED_NO_CP_TAKE_SHIFT_PREF_MISMATCH, SchedulingApiShiftExchangeCommunicationState.CP_RESPONDED_NO, SchedulingApiShiftExchangeCommunicationState.CP_WANTS_TAKE, SchedulingApiShiftExchangeState.ACTIVE, SchedulingApiShiftExchangeState.ACTIVE, SchedulingApiShiftExchangeCommunicationRequesterRole.CP, true, null, null, false),
            new ActionData(SchedulingApiShiftExchangeCommunicationAction.CP_RESPONDED_NO_CP_TAKE_SHIFT_PREF_MATCH, SchedulingApiShiftExchangeCommunicationState.CP_RESPONDED_NO, SchedulingApiShiftExchangeCommunicationState.TAKE_SUCCESSFUL, SchedulingApiShiftExchangeState.ACTIVE, SchedulingApiShiftExchangeState.TAKE_SUCCESSFUL, SchedulingApiShiftExchangeCommunicationRequesterRole.CP, false, null, null, false),
            new ActionData(SchedulingApiShiftExchangeCommunicationAction.CP_WANTS_SWAP_CP_CHANGE_OFFERED_SHIFTS, SchedulingApiShiftExchangeCommunicationState.CP_WANTS_SWAP, SchedulingApiShiftExchangeCommunicationState.CP_WANTS_SWAP, SchedulingApiShiftExchangeState.ACTIVE, SchedulingApiShiftExchangeState.ACTIVE, SchedulingApiShiftExchangeCommunicationRequesterRole.CP, null, false, ShiftExchangeCommunicationExpectedData.SWAP_OFFERS, false),
            new ActionData(SchedulingApiShiftExchangeCommunicationAction.CP_WANTS_SWAP_CP_CANNOT, SchedulingApiShiftExchangeCommunicationState.CP_WANTS_SWAP, SchedulingApiShiftExchangeCommunicationState.CP_RESPONDED_NO, SchedulingApiShiftExchangeState.ACTIVE, SchedulingApiShiftExchangeState.ACTIVE, SchedulingApiShiftExchangeCommunicationRequesterRole.CP, null, null, null, false),
            new ActionData(SchedulingApiShiftExchangeCommunicationAction.CP_WANTS_SWAP_IM_DECLINE_SWAP, SchedulingApiShiftExchangeCommunicationState.CP_WANTS_SWAP, SchedulingApiShiftExchangeCommunicationState.IM_DECLINED_SWAP, SchedulingApiShiftExchangeState.ACTIVE, SchedulingApiShiftExchangeState.ACTIVE, SchedulingApiShiftExchangeCommunicationRequesterRole.IM, null, false, null, false),
            new ActionData(SchedulingApiShiftExchangeCommunicationAction.CP_WANTS_SWAP_CP_TAKE_SHIFT_PREF_MISMATCH, SchedulingApiShiftExchangeCommunicationState.CP_WANTS_SWAP, SchedulingApiShiftExchangeCommunicationState.CP_WANTS_TAKE, SchedulingApiShiftExchangeState.ACTIVE, SchedulingApiShiftExchangeState.ACTIVE, SchedulingApiShiftExchangeCommunicationRequesterRole.CP, true, null, null, false),
            new ActionData(SchedulingApiShiftExchangeCommunicationAction.CP_WANTS_SWAP_CP_TAKE_SHIFT_PREF_MATCH, SchedulingApiShiftExchangeCommunicationState.CP_WANTS_SWAP, SchedulingApiShiftExchangeCommunicationState.TAKE_SUCCESSFUL, SchedulingApiShiftExchangeState.ACTIVE, SchedulingApiShiftExchangeState.TAKE_SUCCESSFUL, SchedulingApiShiftExchangeCommunicationRequesterRole.CP, false, null, null, false),
            new ActionData(SchedulingApiShiftExchangeCommunicationAction.CP_WANTS_SWAP_IM_ACCEPT, SchedulingApiShiftExchangeCommunicationState.CP_WANTS_SWAP, SchedulingApiShiftExchangeCommunicationState.SWAP_SUCCESSFUL, SchedulingApiShiftExchangeState.ACTIVE, SchedulingApiShiftExchangeState.SWAP_SUCCESSFUL, SchedulingApiShiftExchangeCommunicationRequesterRole.IM, null, false, ShiftExchangeCommunicationExpectedData.INDISPOSED_MEMBERS_SELECTED_SO, false),
            new ActionData(SchedulingApiShiftExchangeCommunicationAction.IM_DECLINED_SWAP_CP_CHANGE_OFFERED_SHIFTS, SchedulingApiShiftExchangeCommunicationState.IM_DECLINED_SWAP, SchedulingApiShiftExchangeCommunicationState.CP_WANTS_SWAP, SchedulingApiShiftExchangeState.ACTIVE, SchedulingApiShiftExchangeState.ACTIVE, SchedulingApiShiftExchangeCommunicationRequesterRole.CP, null, false, ShiftExchangeCommunicationExpectedData.SWAP_OFFERS, false),
            new ActionData(SchedulingApiShiftExchangeCommunicationAction.IM_DECLINED_SWAP_IM_SWAP_SHIFT, SchedulingApiShiftExchangeCommunicationState.IM_DECLINED_SWAP, SchedulingApiShiftExchangeCommunicationState.IM_CHANGED_MIND_WANTS_SWAP, SchedulingApiShiftExchangeState.ACTIVE, SchedulingApiShiftExchangeState.ACTIVE, SchedulingApiShiftExchangeCommunicationRequesterRole.IM, null, false, ShiftExchangeCommunicationExpectedData.INDISPOSED_MEMBERS_SELECTED_SO, false),
            new ActionData(SchedulingApiShiftExchangeCommunicationAction.IM_DECLINED_SWAP_CP_TAKE_SHIFT_PREF_MISMATCH, SchedulingApiShiftExchangeCommunicationState.IM_DECLINED_SWAP, SchedulingApiShiftExchangeCommunicationState.CP_WANTS_TAKE, SchedulingApiShiftExchangeState.ACTIVE, SchedulingApiShiftExchangeState.ACTIVE, SchedulingApiShiftExchangeCommunicationRequesterRole.CP, true, null, null, false),
            new ActionData(SchedulingApiShiftExchangeCommunicationAction.IM_DECLINED_SWAP_CP_TAKE_SHIFT_PREF_MATCH, SchedulingApiShiftExchangeCommunicationState.IM_DECLINED_SWAP, SchedulingApiShiftExchangeCommunicationState.TAKE_SUCCESSFUL, SchedulingApiShiftExchangeState.ACTIVE, SchedulingApiShiftExchangeState.TAKE_SUCCESSFUL, SchedulingApiShiftExchangeCommunicationRequesterRole.CP, false, null, null, false),
            new ActionData(SchedulingApiShiftExchangeCommunicationAction.CP_WANTS_TAKE_CP_SWAP_SHIFT, SchedulingApiShiftExchangeCommunicationState.CP_WANTS_TAKE, SchedulingApiShiftExchangeCommunicationState.CP_WANTS_SWAP, SchedulingApiShiftExchangeState.ACTIVE, SchedulingApiShiftExchangeState.ACTIVE, SchedulingApiShiftExchangeCommunicationRequesterRole.CP, null, false, ShiftExchangeCommunicationExpectedData.SWAP_OFFERS, false),
            new ActionData(SchedulingApiShiftExchangeCommunicationAction.CP_WANTS_TAKE_CP_CANNOT, SchedulingApiShiftExchangeCommunicationState.CP_WANTS_TAKE, SchedulingApiShiftExchangeCommunicationState.CP_RESPONDED_NO, SchedulingApiShiftExchangeState.ACTIVE, SchedulingApiShiftExchangeState.ACTIVE, SchedulingApiShiftExchangeCommunicationRequesterRole.CP, null, null, null, false),
            new ActionData(SchedulingApiShiftExchangeCommunicationAction.CP_WANTS_TAKE_IM_DECLINE, SchedulingApiShiftExchangeCommunicationState.CP_WANTS_TAKE, SchedulingApiShiftExchangeCommunicationState.IM_DECLINED_TAKE, SchedulingApiShiftExchangeState.ACTIVE, SchedulingApiShiftExchangeState.ACTIVE, SchedulingApiShiftExchangeCommunicationRequesterRole.IM, null, null, null, false),
            new ActionData(SchedulingApiShiftExchangeCommunicationAction.CP_WANTS_TAKE_IM_ACCEPT, SchedulingApiShiftExchangeCommunicationState.CP_WANTS_TAKE, SchedulingApiShiftExchangeCommunicationState.TAKE_SUCCESSFUL, SchedulingApiShiftExchangeState.ACTIVE, SchedulingApiShiftExchangeState.TAKE_SUCCESSFUL, SchedulingApiShiftExchangeCommunicationRequesterRole.IM, null, null, null, false),
            new ActionData(SchedulingApiShiftExchangeCommunicationAction.IM_DECLINED_TAKE_CP_SWAP_SHIFT, SchedulingApiShiftExchangeCommunicationState.IM_DECLINED_TAKE, SchedulingApiShiftExchangeCommunicationState.CP_WANTS_SWAP, SchedulingApiShiftExchangeState.ACTIVE, SchedulingApiShiftExchangeState.ACTIVE, SchedulingApiShiftExchangeCommunicationRequesterRole.CP, null, false, ShiftExchangeCommunicationExpectedData.SWAP_OFFERS, false),
            new ActionData(SchedulingApiShiftExchangeCommunicationAction.IM_DECLINED_TAKE_IM_TAKE_SHIFT, SchedulingApiShiftExchangeCommunicationState.IM_DECLINED_TAKE, SchedulingApiShiftExchangeCommunicationState.IM_CHANGED_MIND_WANTS_TAKE, SchedulingApiShiftExchangeState.ACTIVE, SchedulingApiShiftExchangeState.ACTIVE, SchedulingApiShiftExchangeCommunicationRequesterRole.IM, null, null, null, false),
            new ActionData(SchedulingApiShiftExchangeCommunicationAction.IM_CHANGED_MIND_WANTS_SWAP_IM_CHANGE_SWAPPED_SHIFT, SchedulingApiShiftExchangeCommunicationState.IM_CHANGED_MIND_WANTS_SWAP, SchedulingApiShiftExchangeCommunicationState.IM_CHANGED_MIND_WANTS_SWAP, SchedulingApiShiftExchangeState.ACTIVE, SchedulingApiShiftExchangeState.ACTIVE, SchedulingApiShiftExchangeCommunicationRequesterRole.IM, null, null, ShiftExchangeCommunicationExpectedData.INDISPOSED_MEMBERS_SELECTED_SO, false),
            new ActionData(SchedulingApiShiftExchangeCommunicationAction.IM_CHANGED_MIND_WANTS_SWAP_IM_DECLINE_SWAP, SchedulingApiShiftExchangeCommunicationState.IM_CHANGED_MIND_WANTS_SWAP, SchedulingApiShiftExchangeCommunicationState.IM_DECLINED_SWAP, SchedulingApiShiftExchangeState.ACTIVE, SchedulingApiShiftExchangeState.ACTIVE, SchedulingApiShiftExchangeCommunicationRequesterRole.IM, null, false, null, false),
            new ActionData(SchedulingApiShiftExchangeCommunicationAction.IM_CHANGED_MIND_WANTS_SWAP_CP_CANNOT, SchedulingApiShiftExchangeCommunicationState.IM_CHANGED_MIND_WANTS_SWAP, SchedulingApiShiftExchangeCommunicationState.CP_RESPONDED_NO, SchedulingApiShiftExchangeState.ACTIVE, SchedulingApiShiftExchangeState.ACTIVE, SchedulingApiShiftExchangeCommunicationRequesterRole.CP, null, null, null, false),
            new ActionData(SchedulingApiShiftExchangeCommunicationAction.IM_CHANGED_MIND_WANTS_SWAP_CP_ACCEPT, SchedulingApiShiftExchangeCommunicationState.IM_CHANGED_MIND_WANTS_SWAP, SchedulingApiShiftExchangeCommunicationState.SWAP_SUCCESSFUL, SchedulingApiShiftExchangeState.ACTIVE, SchedulingApiShiftExchangeState.SWAP_SUCCESSFUL, SchedulingApiShiftExchangeCommunicationRequesterRole.CP, null, false, null, false),
            new ActionData(SchedulingApiShiftExchangeCommunicationAction.IM_CHANGED_MIND_WANTS_SWAP_CP_TAKE_SHIFT_PREF_MISMATCH, SchedulingApiShiftExchangeCommunicationState.IM_CHANGED_MIND_WANTS_SWAP, SchedulingApiShiftExchangeCommunicationState.CP_WANTS_TAKE, SchedulingApiShiftExchangeState.ACTIVE, SchedulingApiShiftExchangeState.ACTIVE, SchedulingApiShiftExchangeCommunicationRequesterRole.CP, true, null, null, false),
            new ActionData(SchedulingApiShiftExchangeCommunicationAction.IM_CHANGED_MIND_WANTS_SWAP_CP_TAKE_SHIFT_PREF_MATCH, SchedulingApiShiftExchangeCommunicationState.IM_CHANGED_MIND_WANTS_SWAP, SchedulingApiShiftExchangeCommunicationState.TAKE_SUCCESSFUL, SchedulingApiShiftExchangeState.ACTIVE, SchedulingApiShiftExchangeState.TAKE_SUCCESSFUL, SchedulingApiShiftExchangeCommunicationRequesterRole.CP, false, null, null, false),
            new ActionData(SchedulingApiShiftExchangeCommunicationAction.IM_CHANGED_MIND_WANTS_TAKE_CP_SWAP_SHIFT, SchedulingApiShiftExchangeCommunicationState.IM_CHANGED_MIND_WANTS_TAKE, SchedulingApiShiftExchangeCommunicationState.CP_WANTS_SWAP, SchedulingApiShiftExchangeState.ACTIVE, SchedulingApiShiftExchangeState.ACTIVE, SchedulingApiShiftExchangeCommunicationRequesterRole.CP, null, false, ShiftExchangeCommunicationExpectedData.SWAP_OFFERS, false),
            new ActionData(SchedulingApiShiftExchangeCommunicationAction.IM_CHANGED_MIND_WANTS_TAKE_IM_DECLINE_TAKE, SchedulingApiShiftExchangeCommunicationState.IM_CHANGED_MIND_WANTS_TAKE, SchedulingApiShiftExchangeCommunicationState.IM_DECLINED_TAKE, SchedulingApiShiftExchangeState.ACTIVE, SchedulingApiShiftExchangeState.ACTIVE, SchedulingApiShiftExchangeCommunicationRequesterRole.IM, null, null, null, false),
            new ActionData(SchedulingApiShiftExchangeCommunicationAction.IM_CHANGED_MIND_WANTS_TAKE_CP_CANNOT, SchedulingApiShiftExchangeCommunicationState.IM_CHANGED_MIND_WANTS_TAKE, SchedulingApiShiftExchangeCommunicationState.CP_RESPONDED_NO, SchedulingApiShiftExchangeState.ACTIVE, SchedulingApiShiftExchangeState.ACTIVE, SchedulingApiShiftExchangeCommunicationRequesterRole.CP, null, null, null, false),
            new ActionData(SchedulingApiShiftExchangeCommunicationAction.IM_CHANGED_MIND_WANTS_TAKE_CP_ACCEPT, SchedulingApiShiftExchangeCommunicationState.IM_CHANGED_MIND_WANTS_TAKE, SchedulingApiShiftExchangeCommunicationState.TAKE_SUCCESSFUL, SchedulingApiShiftExchangeState.ACTIVE, SchedulingApiShiftExchangeState.TAKE_SUCCESSFUL, SchedulingApiShiftExchangeCommunicationRequesterRole.CP, null, null, null, false)
        ];
    }
    getActionData(action) {
        return this.actionData[action];
    }
    /**
     * Returns all actions which can now be performed for given "shiftExchange" and "communication" item.
     */
    getAvailableActions(shiftExchange, communication) {
        const result = new Array();
        for (const action of this.actionData) {
            if (action &&
                action.prevState === shiftExchange.state &&
                action.prevCommunicationState === communication.communicationState &&
                communication.requesterRole === action.requesterRole &&
                (action.condIMPrefersSwapping === null || action.condIMPrefersSwapping === shiftExchange.indisposedMemberPrefersSwapping) &&
                (action.condIsIllness === null || action.condIsIllness === shiftExchange.isIllness)) {
                result.push(action);
            }
        }
        return result;
    }
}
//# sourceMappingURL=shift-exchange-concept.service.ag.js.map