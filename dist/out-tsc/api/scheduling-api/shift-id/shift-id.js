import { ShiftSelector } from './shift-selector';
/**
 * This class is id of a single shift.
 */
export class ShiftId extends ShiftSelector {
    /**
     * @param value The raw-data of the shift-id or a negative new-item-id.
     */
    static create(value) {
        return new ShiftId(value);
    }
    /**
     * A shift-selector cannot be instantiated publicly as it always comes from backend.
     */
    constructor(value) {
        super(value);
    }
    get seriesId() {
        return super.seriesId;
    }
    get packetIndex() {
        return super.packetIndex;
    }
    get shiftIndex() {
        return super.shiftIndex;
    }
    get start() {
        return super.start;
    }
    get end() {
        return super.end;
    }
    /**
     * @returns The raw-data of this shift-id as a json string.
     */
    toJsonString() {
        return JSON.stringify(this.rawData);
    }
    /**
     * @param data Api raw-data of the shift-id (Value returned by `toJsonString()`).
     * @returns Parses `data` and creates a `ShiftId` object from it.
     */
    static parseJsonString(jsonString) {
        const dataObj = JSON.parse(jsonString);
        return new ShiftId(dataObj);
    }
    /**
     * @returns Prints this as a string suited for urls only with character which are not changed by url encoding.
     * This is done because we had problems with urls (from bookmarks?) which were url encoded to many times.
     * To prevent this problem, the urls should consist of only characters which are not changed
     * by url encoding.
     */
    toUrl() {
        return `${this.data[1]},${this.data[2]},${this.data[3]},${this.data[4]},${this.data[5]},${this.data[6]},${this.data[7]},${this.data[8]}`;
    }
    /**
     * @returns Parses a shift-id string which was generated by the "toUrl()" method.
     */
    static fromUrl(value) {
        const values = value.split(',');
        const data = [];
        data[0] = [0, null, true, null, 'SHIFT_SELECTOR'];
        data[1] = Number.parseInt(values[0], 10);
        data[2] = Number.parseInt(values[1], 10);
        data[3] = Number.parseInt(values[2], 10);
        data[4] = Number.parseInt(values[3], 10);
        data[5] = Number.parseInt(values[4], 10);
        data[6] = Number.parseInt(values[5], 10);
        data[7] = Number.parseInt(values[6], 10);
        data[8] = values[7];
        return new ShiftId(data);
    }
    /**
     * This makes pretty Url-compatible Urls like 1179-0-0-0-30-1525125600000-1525212000000
     */
    toPrettyString() {
        let result = '';
        for (let i = 0; i < this.data.length; i++) {
            if (i !== 0) {
                if (result !== '') {
                    result += '-';
                }
                result += this.data[i];
            }
        }
        return result;
    }
    /**
     * @param data String created by `toPrettyString()`.
     * @returns Parses the string created by `toPrettyString()` and creates `ShiftId` from it.
     */
    static parsePrettyString(data) {
        const dataObj = JSON.parse(`[${data.split('-').toString()}]`);
        return new ShiftId(dataObj);
    }
}
//# sourceMappingURL=shift-id.js.map