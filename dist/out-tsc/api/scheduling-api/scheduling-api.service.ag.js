var _a, _b, _c, _d;
import { __decorate, __metadata } from "tslib";
import { Injectable, NgZone, Injector } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Router } from '@angular/router';
import { ApiBase, INITIALIZED_IN_BACKEND } from '@plano/shared/api/base/api-base';
import { Id } from '@plano/shared/api/base/id';
import { Meta } from '@plano/shared/api/base/meta';
import { ApiAttributeInfo } from '@plano/shared/api/base/api-attribute-info';
import { PApiPrimitiveTypes } from '@plano/shared/api/base/generated-types.ag';
import { ShiftId, ShiftSelector, ApiListWrapper, ApiObjectWrapper, AuthenticatedApiRole } from '@plano/shared/api';
import { Config } from '@plano/shared/core/config';
import { ApiErrorService } from '@plano/shared/api/api-error.service';
import { SchedulingApiRoot } from '@plano/shared/api';
import { SchedulingApiShifts } from '@plano/shared/api';
import { SchedulingApiShift } from '@plano/shared/api';
import { SchedulingApiShiftAssignableMembers } from '@plano/shared/api';
import { SchedulingApiWorkingTimes } from '@plano/shared/api';
import { SchedulingApiWorkingTime } from '@plano/shared/api';
import { SchedulingApiShiftExchanges } from '@plano/shared/api';
import { SchedulingApiShiftExchange } from '@plano/shared/api';
import { SchedulingApiShiftExchangeShiftRefs } from '@plano/shared/api';
import { SchedulingApiShiftExchangeCommunications } from '@plano/shared/api';
import { SchedulingApiShiftExchangeCommunication } from '@plano/shared/api';
import { SchedulingApiShiftExchangeCommunicationSwapOffers } from '@plano/shared/api';
import { SchedulingApiShiftExchangeCommunicationSwapOfferShiftRefs } from '@plano/shared/api';
import { SchedulingApiAbsences } from '@plano/shared/api';
import { SchedulingApiAbsence } from '@plano/shared/api';
import { SchedulingApiAssignmentProcesses } from '@plano/shared/api';
import { SchedulingApiAssignmentProcess } from '@plano/shared/api';
import { SchedulingApiAssignmentProcessShiftRefs } from '@plano/shared/api';
import { SchedulingApiMembers } from '@plano/shared/api';
import { SchedulingApiMember } from '@plano/shared/api';
import { SchedulingApiAssignableShiftModels } from '@plano/shared/api';
import { SchedulingApiAssignableShiftModel } from '@plano/shared/api';
import { SchedulingApiBookings } from '@plano/shared/api';
import { SchedulingApiBooking } from '@plano/shared/api';
import { SchedulingApiBookingParticipant } from '@plano/shared/api';
import { SchedulingApiShiftModels } from '@plano/shared/api';
import { SchedulingApiShiftModel } from '@plano/shared/api';
import { SchedulingApiShiftModelAssignableMembers } from '@plano/shared/api';
import { SchedulingApiShiftModelAssignableMember } from '@plano/shared/api';
import { SchedulingApiShiftModelCourseTariffs } from '@plano/shared/api';
import { SchedulingApiShiftModelCourseTariff } from '@plano/shared/api';
import { SchedulingApiShiftModelCoursePaymentMethods } from '@plano/shared/api';
import { SchedulingApiShiftModelCancellationPolicyFeePeriods } from '@plano/shared/api';
import { SchedulingApiShiftModelCancellationPolicyFeePeriod } from '@plano/shared/api';
import { SchedulingApiRightGroups } from '@plano/shared/api';
import { SchedulingApiRightGroup } from '@plano/shared/api';
import { SchedulingApiRightGroupShiftModelRights } from '@plano/shared/api';
import { SchedulingApiAccountingPeriods } from '@plano/shared/api';
import { SchedulingApiAccountingPeriod } from '@plano/shared/api';
import { SchedulingApiAccountingPeriodExpectedMemberData } from '@plano/shared/api';
import { SchedulingApiMemos } from '@plano/shared/api';
import { SchedulingApiTodaysShiftDescriptions } from '@plano/shared/api';
import { SchedulingApiTodaysShiftDescription } from '@plano/shared/api';
import { SchedulingApiHolidays } from '@plano/shared/api';
import { SchedulingApiHoliday } from '@plano/shared/api';
import { SchedulingApiCustomBookableMails } from '@plano/shared/api';
import { SchedulingApiVouchers } from '@plano/shared/api';
import { SchedulingApiVoucher } from '@plano/shared/api';
import { SchedulingApiTransactions } from '@plano/shared/api';
import { SchedulingApiTransaction } from '@plano/shared/api';
import { SchedulingApiWarnings } from '@plano/shared/api';
import { SchedulingApiWarning } from '@plano/shared/api';
import { SchedulingApiAdyenAccount } from '@plano/shared/api';
import { SchedulingApiMailSentToBookingPerson } from '@plano/shared/api';
import { SchedulingApiShiftChangeSelector } from '@plano/shared/api';
/**
 * This service enables access to the api "scheduling".
 * This file is auto generated by de.sage.scheduler.api_generator.ApiGenerator.
 */
// constants
class Consts {
    constructor() {
        this.EARLY_BIRD_REACHED_NEEDED_MEMBERS_COUNT = 232;
        this.SHIFTS = 1;
        this.WORKING_TIMES = 2;
        this.SHIFT_EXCHANGES = 3;
        this.ABSENCES = 4;
        this.ASSIGNMENT_PROCESSES = 5;
        this.MEMBERS = 6;
        this.BOOKINGS = 7;
        this.SHIFT_MODELS = 8;
        this.IS_PAYPAL_AVAILABLE = 9;
        this.IS_USING_BETA_7 = 10;
        this.IS_USING_ROUTES_MANAGER = 11;
        this.KLETTERSZENE_ID = 12;
        this.POS_SYSTEM = 13;
        this.NOTIFICATIONS_CONF = 14;
        this.RIGHT_GROUPS = 15;
        this.ACCOUNTING_PERIODS = 16;
        this.MEMOS = 17;
        this.TODAYS_SHIFT_DESCRIPTIONS = 18;
        this.HOLIDAYS = 19;
        this.POSSIBLE_TAXES = 20;
        this.SCHEDULE_PREFERENCES = 21;
        this.CUSTOM_BOOKABLE_MAILS = 22;
        this.NOTIFICATION_SETTINGS = 23;
        this.VOUCHER_SETTINGS = 24;
        this.VOUCHERS = 25;
        this.TRANSACTIONS = 26;
        this.WARNINGS = 27;
        this.EVALUATION = 28;
        this.BOOKING_PAGE_COVER = 29;
        this.COMPANY_LOGO = 30;
        this.ADYEN_ACCOUNT = 31;
        this.IS_ONLINE_PAYMENT_AVAILABLE = 32;
        this.RE_CAPTCHA_WHITE_LISTED_HOST_NAMES = 33;
        this.MAILS_SENT_TO_BOOKING_PERSON = 34;
        this.MESSAGES = 35;
        this.SHIFT_CHANGE_SELECTOR = 36;
        this.AUTOMATIC_BOOKING_CANCELLATION_SETTINGS = 37;
        this.NOTIFICATIONS_CONF_SEND_EMAIL = 1;
        this.SHIFT_MY_PREF = 1;
        this.SHIFT_ASSIGNABLE_MEMBERS = 2;
        this.SHIFT_ASSIGNED_MEMBER_IDS = 3;
        this.SHIFT_START = 4;
        this.SHIFT_END = 5;
        this.SHIFT_NEEDED_MEMBERS_COUNT = 6;
        this.SHIFT_MODEL_ID = 7;
        this.SHIFT_MEMBER_PREFS = 8;
        this.SHIFT_PACKET_SHIFTS = 9;
        this.SHIFT_DESCRIPTION = 10;
        this.SHIFT_IS_REMOVED = 11;
        this.SHIFT_IS_COURSE_CANCELED = 12;
        this.SHIFT_IS_COURSE_ONLINE = 13;
        this.SHIFT_MIN_COURSE_PARTICIPANT_COUNT = 14;
        this.SHIFT_MAX_COURSE_PARTICIPANT_COUNT = 15;
        this.SHIFT_CURRENT_COURSE_PARTICIPANT_COUNT = 16;
        this.SHIFT_EARLY_BIRD_ASSIGN_TO_ME = 17;
        this.SHIFT_NEEDED_MEMBERS_COUNT_CONF = 18;
        this.SHIFT_TIME = 19;
        this.SHIFT_WORKING_TIME_CREATION_METHOD = 20;
        this.SHIFT_REPETITION = 21;
        this.SHIFT_CURRENT_COURSE_ATTENDEE_COUNT = 22;
        this.SHIFT_ASSIGNABLE_MEMBER_EARNINGS = 1;
        this.SHIFT_ASSIGNABLE_MEMBER_ID = 2;
        this.SHIFT_PACKET_SHIFT_START = 1;
        this.SHIFT_PACKET_SHIFT_END = 2;
        this.SHIFT_PACKET_SHIFT_ASSIGNED_MEMBER_IDS = 3;
        this.SHIFT_MEMBER_PREF_MEMBER_ID = 1;
        this.SHIFT_MEMBER_PREF_VALUE = 2;
        this.SHIFT_TIME_START = 1;
        this.SHIFT_TIME_END = 2;
        this.SHIFT_NEEDED_MEMBERS_COUNT_CONF_NEEDED_MEMBERS_COUNT = 1;
        this.SHIFT_NEEDED_MEMBERS_COUNT_CONF_PER_X_PARTICIPANTS = 2;
        this.SHIFT_NEEDED_MEMBERS_COUNT_CONF_IS_ZERO_NOT_REACHED_MIN_PARTICIPANTS_COUNT = 3;
        this.SHIFT_CHANGE_SELECTOR_SHIFT_MODEL_ID = 1;
        this.SHIFT_CHANGE_SELECTOR_SHIFTS_OF_SHIFT_MODEL_ID = 2;
        this.SHIFT_CHANGE_SELECTOR_SHIFTS_OF_SHIFT_MODEL_VERSION = 3;
        this.SHIFT_CHANGE_SELECTOR_SHIFTS_OF_SERIES_ID = 4;
        this.SHIFT_CHANGE_SELECTOR_SHIFTS_OF_PACKET_INDEX = 5;
        this.SHIFT_CHANGE_SELECTOR_START = 6;
        this.SHIFT_CHANGE_SELECTOR_END = 7;
        this.SHIFT_REPETITION_TYPE = 1;
        this.SHIFT_REPETITION_X = 2;
        this.SHIFT_REPETITION_ENDS_AFTER_REPETITION_COUNT = 3;
        this.SHIFT_REPETITION_ENDS_AFTER_DATE = 4;
        this.SHIFT_REPETITION_PACKET = 5;
        this.SHIFT_REPETITION_ON_MONDAY = 6;
        this.SHIFT_REPETITION_ON_TUESDAY = 7;
        this.SHIFT_REPETITION_ON_WEDNESDAY = 8;
        this.SHIFT_REPETITION_ON_THURSDAY = 9;
        this.SHIFT_REPETITION_ON_FRIDAY = 10;
        this.SHIFT_REPETITION_ON_SATURDAY = 11;
        this.SHIFT_REPETITION_ON_SUNDAY = 12;
        this.SHIFT_REPETITION_PACKET_TYPE = 1;
        this.SHIFT_REPETITION_PACKET_X = 2;
        this.SHIFT_REPETITION_PACKET_ENDS_AFTER_REPETITION_COUNT = 3;
        this.SHIFT_REPETITION_PACKET_ON_MONDAY = 4;
        this.SHIFT_REPETITION_PACKET_ON_TUESDAY = 5;
        this.SHIFT_REPETITION_PACKET_ON_WEDNESDAY = 6;
        this.SHIFT_REPETITION_PACKET_ON_THURSDAY = 7;
        this.SHIFT_REPETITION_PACKET_ON_FRIDAY = 8;
        this.SHIFT_REPETITION_PACKET_ON_SATURDAY = 9;
        this.SHIFT_REPETITION_PACKET_ON_SUNDAY = 10;
        this.WORKING_TIME_COMMENT = 1;
        this.WORKING_TIME_TIME = 2;
        this.WORKING_TIME_REGULAR_PAUSE_DURATION = 3;
        this.WORKING_TIME_MEMBER_ID = 4;
        this.WORKING_TIME_AUTOMATIC_PAUSE_DURATION = 5;
        this.WORKING_TIME_PLANNED_START = 6;
        this.WORKING_TIME_PLANNED_END = 7;
        this.WORKING_TIME_WHEN_MEMBER_STAMPED_START = 8;
        this.WORKING_TIME_WHEN_MEMBER_STAMPED_END = 9;
        this.WORKING_TIME_HOURLY_EARNINGS = 10;
        this.WORKING_TIME_WARN_UNPLANNED_WORK = 11;
        this.WORKING_TIME_WARN_STAMPED_NOT_CURRENT_TIME = 12;
        this.WORKING_TIME_WARN_STAMPED_NOT_SHIFT_TIME = 13;
        this.WORKING_TIME_SHIFT_MODEL_ID = 14;
        this.WORKING_TIME_TIME_START = 1;
        this.WORKING_TIME_TIME_END = 2;
        this.ABSENCE_OWNER_COMMENT = 1;
        this.ABSENCE_WORKING_TIME_PER_DAY = 2;
        this.ABSENCE_TIME = 3;
        this.ABSENCE_HOURLY_EARNINGS = 4;
        this.ABSENCE_TYPE = 5;
        this.ABSENCE_MEMBER_ID = 6;
        this.ABSENCE_SHIFT_EXCHANGE_ID = 7;
        this.ABSENCE_VISIBLE_TO_TEAM_MEMBERS = 8;
        this.ABSENCE_TIME_START = 1;
        this.ABSENCE_TIME_END = 2;
        this.ASSIGNMENT_PROCESS_STATE = 1;
        this.ASSIGNMENT_PROCESS_DEADLINE = 2;
        this.ASSIGNMENT_PROCESS_NAME = 3;
        this.ASSIGNMENT_PROCESS_SHIFT_REFS = 4;
        this.ASSIGNMENT_PROCESS_ONLY_ASK_PREFS_FOR_UNASSIGNED_SHIFTS = 5;
        this.ASSIGNMENT_PROCESS_ASSIGN_MEMBERS_WHEN_NO_PREF_AVAILABLE = 6;
        this.ASSIGNMENT_PROCESS_REMOVE_PROCESS_WHEN_EARLY_BIRD_ASSIGNED_ALL_SHIFTS = 7;
        this.ASSIGNMENT_PROCESS_ASSIGNMENT_STATE = 8;
        this.ASSIGNMENT_PROCESS_MISSING_ASSIGNMENTS_COUNT = 9;
        this.ASSIGNMENT_PROCESS_TODO_SHIFTS_COUNT_CURRENT_VIEW = 10;
        this.ASSIGNMENT_PROCESS_TODO_SHIFTS_COUNT_RIGHT_VIEW = 11;
        this.ASSIGNMENT_PROCESS_TODO_SHIFTS_COUNT_LEFT_VIEW = 12;
        this.ASSIGNMENT_PROCESS_TYPE = 13;
        this.ASSIGNMENT_PROCESS_MISSING_PREFS_MEMBER_IDS = 14;
        this.ASSIGNMENT_PROCESS_CAN_EDIT = 15;
        this.ASSIGNMENT_PROCESS_SHIFT_REF_REQUESTER_CAN_SET_PREF = 1;
        this.ASSIGNMENT_PROCESS_SHIFT_REF_REQUESTER_CAN_DO_EARLY_BIRD = 2;
        this.MEMBER_FIRST_NAME = 1;
        this.MEMBER_LAST_NAME = 2;
        this.MEMBER_EMAIL = 3;
        this.MEMBER_TRASHED = 4;
        this.MEMBER_MIN_MONTHLY_EARNINGS = 5;
        this.MEMBER_MAX_MONTHLY_EARNINGS = 6;
        this.MEMBER_DESIRED_MONTHLY_EARNINGS = 7;
        this.MEMBER_RIGHT_GROUP_IDS = 8;
        this.MEMBER_AVG_DAYS_PER_WEEK = 9;
        this.MEMBER_AVG_HOURS_PER_DAY = 10;
        this.MEMBER_ASSIGNABLE_SHIFT_MODELS = 11;
        this.MEMBER_BIRTHDAY = 12;
        this.MEMBER_PHONE = 13;
        this.MEMBER_GENDER = 14;
        this.MEMBER_PASSWORD = 15;
        this.MEMBER_ADDRESS_STREET = 16;
        this.MEMBER_ADDRESS_POSTAL_CODE = 17;
        this.MEMBER_ADDRESS_CITY = 18;
        this.MEMBER_EMPLOYMENT_BEGIN = 19;
        this.MEMBER_EMPLOYMENT_END = 20;
        this.MEMBER_COMMENTS = 21;
        this.MEMBER_PERSONNEL_NUMBERS = 22;
        this.MEMBER_PLACE_OF_BIRTH = 23;
        this.MEMBER_SOCIAL_SECURITY_NUMBER = 24;
        this.MEMBER_TAX_ID = 25;
        this.MEMBER_HEALTH_INSURANCE = 26;
        this.MEMBER_NATIONALITY = 27;
        this.MEMBER_DENOMINATION = 28;
        this.MEMBER_ACCOUNT_IBAN = 29;
        this.MEMBER_ACCOUNT_OWNER = 30;
        this.MEMBER_EMPLOYMENT_CONTRACTS_COMMENT = 31;
        this.MEMBER_MAIN_JOB = 32;
        this.MEMBER_CHANGE_SELECTOR = 33;
        this.MEMBER_ASSIGNABLE_SHIFT_MODEL_EARNINGS = 1;
        this.MEMBER_ASSIGNABLE_SHIFT_MODEL_ID = 2;
        this.MEMBER_CHANGE_SELECTOR_START = 1;
        this.SHIFT_EXCHANGE_TODO_COUNT = 1;
        this.SHIFT_EXCHANGE_STATE = 2;
        this.SHIFT_EXCHANGE_COMMUNICATION_INFO = 3;
        this.SHIFT_EXCHANGE_LAST_UPDATE = 4;
        this.SHIFT_EXCHANGE_REQUESTER_RELATIONSHIP = 5;
        this.SHIFT_EXCHANGE_IS_ILLNESS = 6;
        this.SHIFT_EXCHANGE_SHIFT_REFS = 7;
        this.SHIFT_EXCHANGE_SWAPPED_SHIFT_REFS = 8;
        this.SHIFT_EXCHANGE_INDISPOSED_MEMBER_ID = 9;
        this.SHIFT_EXCHANGE_NEW_ASSIGNED_MEMBER_ID = 10;
        this.SHIFT_EXCHANGE_INDISPOSED_MEMBER_PREFERS_SWAPPING = 11;
        this.SHIFT_EXCHANGE_DEADLINE = 12;
        this.SHIFT_EXCHANGE_MEMBER_ID_ADDRESSED_TO = 13;
        this.SHIFT_EXCHANGE_ILLNESS_RESPONDER_COMMENT_TO_MEMBERS = 14;
        this.SHIFT_EXCHANGE_INDISPOSED_MEMBER_COMMENT = 15;
        this.SHIFT_EXCHANGE_SHOW_ON_DESK = 16;
        this.SHIFT_EXCHANGE_SHOW_IN_LIST = 17;
        this.SHIFT_EXCHANGE_COMMUNICATIONS = 18;
        this.SHIFT_EXCHANGE_CLOSE_SHIFT_EXCHANGE = 19;
        this.SHIFT_EXCHANGE_OPEN_SHIFT_EXCHANGE = 20;
        this.SHIFT_EXCHANGE_COMMUNICATION_SWAP_OFFERS = 1;
        this.SHIFT_EXCHANGE_COMMUNICATION_INDISPOSED_MEMBERS_SELECTED_SO_ID = 2;
        this.SHIFT_EXCHANGE_COMMUNICATION_PERFORM_ACTION = 3;
        this.SHIFT_EXCHANGE_COMMUNICATION_PERFORM_ACTION_COMMENT = 4;
        this.SHIFT_EXCHANGE_COMMUNICATION_COMMUNICATION_STATE = 5;
        this.SHIFT_EXCHANGE_COMMUNICATION_COMMUNICATION_PARTNER_ID = 6;
        this.SHIFT_EXCHANGE_COMMUNICATION_LAST_ACTION = 7;
        this.SHIFT_EXCHANGE_COMMUNICATION_LAST_ACTION_TIME = 8;
        this.SHIFT_EXCHANGE_COMMUNICATION_LAST_ACTION_COMMENT = 9;
        this.SHIFT_EXCHANGE_COMMUNICATION_IS_ILLNESS_REVIEW_COMMUNICATION = 10;
        this.SHIFT_EXCHANGE_COMMUNICATION_REQUESTER_ROLE = 11;
        this.SHIFT_EXCHANGE_COMMUNICATION_HAS_TODO = 12;
        this.SHIFT_EXCHANGE_SHIFT_REF_START = 1;
        this.SHIFT_EXCHANGE_SHIFT_REF_END = 2;
        this.SHIFT_EXCHANGE_COMMUNICATION_SWAP_OFFER_SHIFT_REFS = 1;
        this.SHIFT_MODEL_COLOR = 1;
        this.SHIFT_MODEL_NAME = 2;
        this.SHIFT_MODEL_PARENT_NAME = 3;
        this.SHIFT_MODEL_TRASHED = 4;
        this.SHIFT_MODEL_ASSIGNABLE_MEMBERS = 5;
        this.SHIFT_MODEL_REPETITION = 6;
        this.SHIFT_MODEL_TIME = 7;
        this.SHIFT_MODEL_COST_CENTRE = 8;
        this.SHIFT_MODEL_ARTICLE_GROUP = 9;
        this.SHIFT_MODEL_POS_ACCOUNTS = 10;
        this.SHIFT_MODEL_IS_COURSE = 11;
        this.SHIFT_MODEL_COURSE_TYPE = 12;
        this.SHIFT_MODEL_CHANGE_SELECTOR = 13;
        this.SHIFT_MODEL_AUTOMATIC_BOOKABLE_MAIL_IDS = 14;
        this.SHIFT_MODEL_ONLY_WHOLE_COURSE_BOOKABLE = 15;
        this.SHIFT_MODEL_COURSE_TARIFFS = 16;
        this.SHIFT_MODEL_COURSE_PAYMENT_METHODS = 17;
        this.SHIFT_MODEL_ONLINE_CANCELLATION_FOR_CHARGEABLE_BOOKINGS_ENABLED = 18;
        this.SHIFT_MODEL_CURRENT_CANCELLATION_POLICY_ID = 19;
        this.SHIFT_MODEL_CANCELLATION_POLICIES = 20;
        this.SHIFT_MODEL_IS_COURSE_ONLINE = 21;
        this.SHIFT_MODEL_BOOKING_DESIRED_DATE_SETTING = 22;
        this.SHIFT_MODEL_COURSE_CODE_PREFIX = 23;
        this.SHIFT_MODEL_COURSE_GROUP = 24;
        this.SHIFT_MODEL_FREECLIMBER_ARTICLE_ID = 25;
        this.SHIFT_MODEL_BOOKING_PERSON_MIN_AGE = 26;
        this.SHIFT_MODEL_PARTICIPANT_MIN_AGE = 27;
        this.SHIFT_MODEL_PARTICIPANT_MAX_AGE = 28;
        this.SHIFT_MODEL_NEEDED_MEMBERS_COUNT_CONF = 29;
        this.SHIFT_MODEL_DESCRIPTION = 30;
        this.SHIFT_MODEL_ASSIGNED_MEMBER_IDS = 31;
        this.SHIFT_MODEL_WORKING_TIME_CREATION_METHOD = 32;
        this.SHIFT_MODEL_COURSE_TITLE = 33;
        this.SHIFT_MODEL_COURSE_SUBTITLE = 34;
        this.SHIFT_MODEL_COURSE_DESCRIPTION = 35;
        this.SHIFT_MODEL_COURSE_HIGHLIGHTS = 36;
        this.SHIFT_MODEL_COURSE_EQUIPMENT_REQUIREMENTS = 37;
        this.SHIFT_MODEL_COURSE_SKILL_REQUIREMENTS = 38;
        this.SHIFT_MODEL_COURSE_LOCATION = 39;
        this.SHIFT_MODEL_COURSE_CONTACT_NAME = 40;
        this.SHIFT_MODEL_COURSE_CONTACT_EMAIL = 41;
        this.SHIFT_MODEL_COURSE_CONTACT_PHONE = 42;
        this.SHIFT_MODEL_ARRIVAL_TIME_BEFORE_COURSE = 43;
        this.SHIFT_MODEL_COURSE_BOOKING_DEADLINE_FROM = 44;
        this.SHIFT_MODEL_COURSE_BOOKING_DEADLINE_UNTIL = 45;
        this.SHIFT_MODEL_MIN_COURSE_PARTICIPANT_COUNT = 46;
        this.SHIFT_MODEL_MAX_COURSE_PARTICIPANT_COUNT = 47;
        this.SHIFT_MODEL_IS_CORONA_SLOT_BOOKING = 48;
        this.SHIFT_MODEL_ONLINE_CANCELLATION_FOR_FREE_BOOKINGS_ENABLED = 49;
        this.SHIFT_MODEL_ONLINE_CANCELLATION_FOR_FREE_BOOKINGS_DEADLINE = 50;
        this.SHIFT_MODEL_ONLINE_CANCELLATION_FOR_CHARGEABLE_BOOKINGS_DEADLINE = 51;
        this.SHIFT_MODEL_ONLINE_CANCELLATION_FOR_WITHDRAWABLE_BOOKINGS_ALWAYS_ENABLED = 52;
        this.SHIFT_MODEL_ONLINE_CANCELLATION_AUTOMATIC_ONLINE_REFUND_ENABLED = 53;
        this.SHIFT_MODEL_TIME_START = 1;
        this.SHIFT_MODEL_TIME_END = 2;
        this.SHIFT_MODEL_NEEDED_MEMBERS_COUNT_CONF_NEEDED_MEMBERS_COUNT = 1;
        this.SHIFT_MODEL_NEEDED_MEMBERS_COUNT_CONF_PER_X_PARTICIPANTS = 2;
        this.SHIFT_MODEL_NEEDED_MEMBERS_COUNT_CONF_IS_ZERO_NOT_REACHED_MIN_PARTICIPANTS_COUNT = 3;
        this.SHIFT_MODEL_ASSIGNABLE_MEMBER_EARNINGS = 1;
        this.SHIFT_MODEL_ASSIGNABLE_MEMBER_ID = 2;
        this.SHIFT_MODEL_CHANGE_SELECTOR_START = 1;
        this.SHIFT_MODEL_REPETITION_TYPE = 1;
        this.SHIFT_MODEL_REPETITION_X = 2;
        this.SHIFT_MODEL_REPETITION_ENDS_AFTER_REPETITION_COUNT = 3;
        this.SHIFT_MODEL_REPETITION_ENDS_AFTER_DATE = 4;
        this.SHIFT_MODEL_REPETITION_PACKET = 5;
        this.SHIFT_MODEL_REPETITION_ON_MONDAY = 6;
        this.SHIFT_MODEL_REPETITION_ON_TUESDAY = 7;
        this.SHIFT_MODEL_REPETITION_ON_WEDNESDAY = 8;
        this.SHIFT_MODEL_REPETITION_ON_THURSDAY = 9;
        this.SHIFT_MODEL_REPETITION_ON_FRIDAY = 10;
        this.SHIFT_MODEL_REPETITION_ON_SATURDAY = 11;
        this.SHIFT_MODEL_REPETITION_ON_SUNDAY = 12;
        this.SHIFT_MODEL_REPETITION_PACKET_TYPE = 1;
        this.SHIFT_MODEL_REPETITION_PACKET_X = 2;
        this.SHIFT_MODEL_REPETITION_PACKET_ENDS_AFTER_REPETITION_COUNT = 3;
        this.SHIFT_MODEL_REPETITION_PACKET_ON_MONDAY = 4;
        this.SHIFT_MODEL_REPETITION_PACKET_ON_TUESDAY = 5;
        this.SHIFT_MODEL_REPETITION_PACKET_ON_WEDNESDAY = 6;
        this.SHIFT_MODEL_REPETITION_PACKET_ON_THURSDAY = 7;
        this.SHIFT_MODEL_REPETITION_PACKET_ON_FRIDAY = 8;
        this.SHIFT_MODEL_REPETITION_PACKET_ON_SATURDAY = 9;
        this.SHIFT_MODEL_REPETITION_PACKET_ON_SUNDAY = 10;
        this.SHIFT_MODEL_POS_ACCOUNT_TAX = 1;
        this.SHIFT_MODEL_POS_ACCOUNT_NAME = 2;
        this.SHIFT_MODEL_COURSE_HIGHLIGHT_TEXT = 1;
        this.SHIFT_MODEL_COURSE_TARIFF_NAME = 1;
        this.SHIFT_MODEL_COURSE_TARIFF_DESCRIPTION = 2;
        this.SHIFT_MODEL_COURSE_TARIFF_IS_INTERNAL = 3;
        this.SHIFT_MODEL_COURSE_TARIFF_FEES = 4;
        this.SHIFT_MODEL_COURSE_TARIFF_ADDITIONAL_FIELD_LABEL = 5;
        this.SHIFT_MODEL_COURSE_TARIFF_FOR_COURSE_DATES_FROM = 6;
        this.SHIFT_MODEL_COURSE_TARIFF_FOR_COURSE_DATES_UNTIL = 7;
        this.SHIFT_MODEL_COURSE_TARIFF_NEGATE_FOR_COURSE_DATES_INTERVAL = 8;
        this.SHIFT_MODEL_COURSE_TARIFF_TRASHED = 9;
        this.SHIFT_MODEL_COURSE_TARIFF_APPLY_TO_BOOKING = 10;
        this.SHIFT_MODEL_COURSE_TARIFF_APPLY_TO_PARTICIPANT = 11;
        this.SHIFT_MODEL_COURSE_TARIFF_FEE_NAME = 1;
        this.SHIFT_MODEL_COURSE_TARIFF_FEE_FEE = 2;
        this.SHIFT_MODEL_COURSE_TARIFF_FEE_PER_X_PARTICIPANTS = 3;
        this.SHIFT_MODEL_COURSE_TARIFF_FEE_TAX_PERCENTAGE = 4;
        this.ONLINE_PAYMENT = 1;
        this.PAYPAL = 2;
        this.MISC = 3;
        this.SHIFT_MODEL_COURSE_PAYMENT_METHOD_TYPE = 1;
        this.SHIFT_MODEL_COURSE_PAYMENT_METHOD_NAME = 2;
        this.SHIFT_MODEL_COURSE_PAYMENT_METHOD_DESCRIPTION = 3;
        this.SHIFT_MODEL_COURSE_PAYMENT_METHOD_IS_INTERNAL = 4;
        this.SHIFT_MODEL_COURSE_PAYMENT_METHOD_TRASHED = 5;
        this.SHIFT_MODEL_COURSE_PAYMENT_METHOD_APPLY_TO_BOOKING = 6;
        this.SHIFT_MODEL_CANCELLATION_POLICY_FEE_PERIODS = 1;
        this.SHIFT_MODEL_CANCELLATION_POLICY_WITHDRAWAL_ENABLED = 2;
        this.SHIFT_MODEL_CANCELLATION_POLICY_WITHDRAWAL_PERIOD = 3;
        this.SHIFT_MODEL_CANCELLATION_POLICY_FEE_PERIOD_FEE_FIX = 1;
        this.SHIFT_MODEL_CANCELLATION_POLICY_FEE_PERIOD_FEE_PERCENTAGE = 2;
        this.SHIFT_MODEL_CANCELLATION_POLICY_FEE_PERIOD_START = 3;
        this.SHIFT_MODEL_CANCELLATION_POLICY_FEE_PERIOD_END = 4;
        this.RIGHT_GROUP_NAME = 1;
        this.CLIENT_DEFAULT = 1;
        this.CLIENT_OWNER = 2;
        this.RIGHT_GROUP_ROLE = 2;
        this.RIGHT_GROUP_CAN_READ_AND_WRITE_BOOKING_SYSTEM_SETTINGS = 3;
        this.RIGHT_GROUP_SHIFT_MODEL_RIGHTS = 4;
        this.RIGHT_GROUP_SHIFT_MODEL_RIGHT_CAN_READ = 1;
        this.RIGHT_GROUP_SHIFT_MODEL_RIGHT_CAN_WRITE = 2;
        this.RIGHT_GROUP_SHIFT_MODEL_RIGHT_CAN_WRITE_BOOKINGS = 3;
        this.RIGHT_GROUP_SHIFT_MODEL_RIGHT_CAN_ONLINE_REFUND = 4;
        this.RIGHT_GROUP_SHIFT_MODEL_RIGHT_CAN_GET_MANAGER_NOTIFICATIONS = 5;
        this.RIGHT_GROUP_SHIFT_MODEL_RIGHT_SHIFT_MODEL_ID = 6;
        this.RIGHT_GROUP_SHIFT_MODEL_RIGHT_SHIFT_MODEL_PARENT_NAME = 7;
        this.ACCOUNTING_PERIOD_START = 1;
        this.ACCOUNTING_PERIOD_END = 2;
        this.ACCOUNTING_PERIOD_EXPECTED_MEMBER_DATA = 3;
        this.ACCOUNTING_PERIOD_EXPECTED_MEMBER_DATA_ITEM_EARNINGS = 1;
        this.ACCOUNTING_PERIOD_EXPECTED_MEMBER_DATA_ITEM_WORKING_HOURS = 2;
        this.MEMO_MESSAGE = 1;
        this.MEMO_START = 2;
        this.MEMO_END = 3;
        this.TODAYS_SHIFT_DESCRIPTION_DESCRIPTION = 1;
        this.TODAYS_SHIFT_DESCRIPTION_SHIFT_START = 2;
        this.TODAYS_SHIFT_DESCRIPTION_SHIFT_END = 3;
        this.TODAYS_SHIFT_DESCRIPTION_ASSIGNED_MEMBER_IDS = 4;
        this.HOLIDAY_TIME = 1;
        this.HOLIDAY_TYPE = 2;
        this.HOLIDAY_NAME = 3;
        this.HOLIDAY_FEDERAL_STATE = 4;
        this.HOLIDAY_TIME_START = 1;
        this.HOLIDAY_TIME_END = 2;
        this.SCHEDULE_PREFERENCES_PRIORITIES = 1;
        this.SCHEDULE_PREFERENCES_DESIRED_SHIFT_DIST = 2;
        this.SCHEDULE_PREFERENCES_FATAL_SHIFT_DIST = 3;
        this.SCHEDULE_PREFERENCES_PRIORITIES_SHIFT_PREF = 1;
        this.SCHEDULE_PREFERENCES_PRIORITIES_DESIRED_EARNINGS = 2;
        this.SCHEDULE_PREFERENCES_PRIORITIES_SHIFTS_TOO_CLOSE = 3;
        this.BOOKING_STATE = 1;
        this.BOOKING_OWNER_COMMENT = 2;
        this.BOOKING_BOOKING_NUMBER = 3;
        this.BOOKING_COURSE_SELECTOR = 4;
        this.BOOKING_SHIFT_MODEL_ID = 5;
        this.BOOKING_DATE_OF_BOOKING = 6;
        this.BOOKING_BOOKING_COMMENT = 7;
        this.BOOKING_ALL_SHIFTS_REMOVED = 8;
        this.BOOKING_FIRST_NAME = 9;
        this.BOOKING_LAST_NAME = 10;
        this.BOOKING_FIRST_SHIFT_START = 11;
        this.BOOKING_PARTICIPANT_COUNT = 12;
        this.BOOKING_CURRENTLY_PAID = 13;
        this.BOOKING_CANCELLATION_FEE = 14;
        this.BOOKING_PARTICIPANTS = 15;
        this.BOOKING_OVERALL_TARIFF_ID = 16;
        this.BOOKING_FIRST_SHIFT_END = 17;
        this.BOOKING_FIRST_SHIFT_SELECTOR = 18;
        this.BOOKING_ATTENDED = 19;
        this.BOOKING_CAN_WRITE_ATTENDED = 20;
        this.BOOKING_ATTENDED_SET_BY_POS = 21;
        this.BOOKING_DATE_OF_BIRTH = 22;
        this.BOOKING_STREET_AND_HOUSE_NUMBER = 23;
        this.BOOKING_CITY = 24;
        this.BOOKING_POSTAL_CODE = 25;
        this.BOOKING_EMAIL = 26;
        this.BOOKING_PHONE_MOBILE = 27;
        this.BOOKING_PHONE_LANDLINE = 28;
        this.BOOKING_PAYMENT_METHOD_ID = 29;
        this.BOOKING_DESIRED_DATE = 30;
        this.BOOKING_WANTS_NEWSLETTER = 31;
        this.BOOKING_PAID_BEFORE_TRANSACTION_LIST_INTRODUCTION = 32;
        this.BOOKING_COMPANY = 33;
        this.BOOKING_ADDITIONAL_FIELD_VALUE = 34;
        this.BOOKING_AGE_MIN = 35;
        this.BOOKING_AGE_MAX = 36;
        this.BOOKING_CANCELLATION_POLICY_ID = 37;
        this.BOOKING_HAS_RIGHT_OF_WITHDRAWAL = 38;
        this.BOOKING_APPLICABLE_CANCELLATION_FEE_PERIOD_ID = 39;
        this.BOOKING_ACCOUNT_REFUND_LIMIT_DUE_TO_ONLINE_BALANCE = 40;
        this.BOOKING_IS_ANONYMIZED = 41;
        this.BOOKING_TESTING_DEFERRED_PAYMENT_TOKEN = 42;
        this.BOOKING_PARTICIPANT_ATTENDED = 1;
        this.BOOKING_PARTICIPANT_IS_BOOKING_PERSON = 2;
        this.BOOKING_PARTICIPANT_FIRST_NAME = 3;
        this.BOOKING_PARTICIPANT_LAST_NAME = 4;
        this.BOOKING_PARTICIPANT_EMAIL = 5;
        this.BOOKING_PARTICIPANT_DATE_OF_BIRTH = 6;
        this.BOOKING_PARTICIPANT_TARIFF_ID = 7;
        this.BOOKING_PARTICIPANT_ADDITIONAL_FIELD_VALUE = 8;
        this.CUSTOM_BOOKABLE_MAIL_NAME = 1;
        this.CUSTOM_BOOKABLE_MAIL_EVENT_TYPE = 2;
        this.CUSTOM_BOOKABLE_MAIL_SEND_TO_BOOKING_PERSON = 3;
        this.CUSTOM_BOOKABLE_MAIL_SEND_TO_PARTICIPANTS = 4;
        this.CUSTOM_BOOKABLE_MAIL_SUBJECT_TEMPLATE = 5;
        this.CUSTOM_BOOKABLE_MAIL_TEXT_TEMPLATE = 6;
        this.CUSTOM_BOOKABLE_MAIL_REPLY_TO = 7;
        this.NOTIFICATION_SETTINGS_PUSH_TOKENS = 1;
        this.NOTIFICATION_SETTINGS_SETTINGS_FOR_DEVICE_TYPES = 2;
        this.NOTIFICATION_SETTINGS_PUSH_TOKEN_TOKEN = 1;
        this.NOTIFICATION_SETTINGS_PUSH_TOKEN_TYPE = 2;
        this.NOTIFICATION_SETTINGS_PUSH_TOKEN_ACTION = 3;
        this.NOTIFICATION_SETTINGS_SETTINGS_FOR_DEVICE_TYPE_NOTIFICATION_GROUPS = 1;
        this.NOTIFICATION_SETTINGS_SETTINGS_FOR_DEVICE_TYPE_DEVICE_TYPE = 2;
        this.NOTIFICATION_SETTINGS_SETTINGS_FOR_DEVICE_TYPE_NOTIFICATION_GROUP_ENABLED = 1;
        this.NOTIFICATION_SETTINGS_SETTINGS_FOR_DEVICE_TYPE_NOTIFICATION_GROUP_IS_RECOMMENDED_TO_RECEIVE = 2;
        this.NOTIFICATION_SETTINGS_SETTINGS_FOR_DEVICE_TYPE_NOTIFICATION_GROUP_GROUP = 3;
        this.NOTIFICATION_SETTINGS_SETTINGS_FOR_DEVICE_TYPE_NOTIFICATION_GROUP_TITLE = 4;
        this.VOUCHER_SETTINGS_IS_VOUCHER_SALE_ENABLED = 1;
        this.VOUCHER_SETTINGS_VOUCHER_MIN_PRICE = 2;
        this.VOUCHER_SETTINGS_VOUCHER_MAX_PRICE = 3;
        this.VOUCHER_SETTINGS_VOUCHER_HOMEPAGE_DESCRIPTION_TEXT = 4;
        this.VOUCHER_SETTINGS_VOUCHER_EXPIRATION_DURATION = 5;
        this.VOUCHER_SETTINGS_VOUCHER_MAIL_REPLY_TO = 6;
        this.VOUCHER_SETTINGS_VOUCHER_CODE_PREFIX = 7;
        this.VOUCHER_SETTINGS_VOUCHER_CODE_LENGTH = 8;
        this.VOUCHER_SETTINGS_VOUCHER_CODE_ONLY_CONTAINS_DIGITS = 9;
        this.TRANSACTION_TYPE = 1;
        this.TRANSACTION_DATE_TIME = 2;
        this.TRANSACTION_PAYMENT_METHOD_TYPE = 3;
        this.TRANSACTION_MISC_PAYMENT_METHOD_NAME = 4;
        this.TRANSACTION_DR_PLANO_FEE_NET = 5;
        this.TRANSACTION_BALANCE_CHANGE = 6;
        this.TRANSACTION_OFFER_NAME = 7;
        this.TRANSACTION_BOOKING_NUMBER = 8;
        this.TRANSACTION_REFERENCED_PERSON = 9;
        this.TRANSACTION_BOOKING_ID = 10;
        this.TRANSACTION_VOUCHER_ID = 11;
        this.TRANSACTION_SHIFT_MODEL_ID = 12;
        this.TRANSACTION_FAILED_CHILD_ID = 13;
        this.TRANSACTION_TESTING_PSP_REFERENCE = 14;
        this.TRANSACTION_TESTING_ORIGINAL_PSP_REFERENCE = 15;
        this.TRANSACTION_TESTING_TRANSFER_FUNDS_AMOUNT = 16;
        this.TRANSACTION_TESTING_TRANSFER_FUNDS_PSP = 17;
        this.TRANSACTION_TESTING_TRANSFER_FUNDS_STATE = 18;
        this.TRANSACTION_TESTING_IS_SETTLED = 19;
        this.TRANSACTION_ABS_AMOUNT = 20;
        this.TRANSACTION_CHILD_CHARGEBACK_ID = 21;
        this.TRANSACTION_CHILD_CHARGEBACK_REVERSED_ID = 22;
        this.TRANSACTION_CHILD_SECOND_CHARGEBACK_ID = 23;
        this.TRANSACTION_VAT_PERCENT = 24;
        this.TRANSACTION_INTERNAL_COMMENT = 25;
        this.TRANSACTION_BALANCE = 26;
        this.TRANSACTION_CREATOR_ID = 27;
        this.TRANSACTION_BANK_ACCOUNT_HINT = 28;
        this.TRANSACTION_BANK_DESCRIPTION = 29;
        this.TRANSACTION_PARENT_ID = 30;
        this.TRANSACTION_FAILED_REASON = 31;
        this.TRANSACTION_DR_PLANO_FEE_VAT_DEPRECATED = 32;
        this.VOUCHER_FIRST_NAME = 1;
        this.VOUCHER_LAST_NAME = 2;
        this.VOUCHER_BOOKING_NUMBER = 3;
        this.VOUCHER_CODE = 4;
        this.VOUCHER_CURRENT_VALUE = 5;
        this.VOUCHER_DATE_OF_BOOKING = 6;
        this.VOUCHER_PRICE = 7;
        this.VOUCHER_CURRENTLY_PAID = 8;
        this.VOUCHER_EMAIL = 9;
        this.VOUCHER_EXPIRATION_DATE = 10;
        this.VOUCHER_FOR_DESCRIPTION = 11;
        this.VOUCHER_PAID_BEFORE_TRANSACTION_LIST_INTRODUCTION = 12;
        this.VOUCHER_ACCOUNT_REFUND_LIMIT_DUE_TO_ONLINE_BALANCE = 13;
        this.VOUCHER_IS_ANONYMIZED = 14;
        this.VOUCHER_TESTING_DEFERRED_PAYMENT_TOKEN = 15;
        this.WARNING_TEXT = 1;
        this.WARNING_SEVERITY = 2;
        this.WARNING_CONCERNS_MEMBER_ID = 3;
        this.WARNING_FOR_SWAP_OFFER_ID = 4;
        this.WARNING_FOR_SWAP_OFFER_NEW_ITEM_ID = 5;
        this.EVALUATION_GENERATE = 1;
        this.ADYEN_ACCOUNT_BALANCE = 1;
        this.ADYEN_ACCOUNT_HOLDER_STATE = 2;
        this.ADYEN_ACCOUNT_HOLDER_PAYOUT_STATE = 3;
        this.ADYEN_ACCOUNT_HOLDER_PROCESSING_STATE = 4;
        this.ADYEN_ACCOUNT_ONBOARDING_URL = 5;
        this.ADYEN_ACCOUNT_DEADLINE_DATE = 6;
        this.ADYEN_ACCOUNT_UPCOMING_DEADLINE_STATE = 7;
        this.ADYEN_ACCOUNT_TESTING_DESIRED_DEPOSIT = 8;
        this.ADYEN_ACCOUNT_TESTING_ACCOUNT_HOLDER_CODE = 9;
        this.ADYEN_ACCOUNT_TESTING_ACCOUNT_HOLDER_PAYMENT_ACCOUNT = 10;
        this.ADYEN_ACCOUNT_TESTING_LIABLE_PAYMENT_ACCOUNT = 11;
        this.ADYEN_ACCOUNT_ONBOARDING_ACTION_REQUIRED_OR_PENDING = 12;
        this.ADYEN_ACCOUNT_PAYOUT_SCHEDULE = 13;
        this.ADYEN_ACCOUNT_NEXT_PAYOUT_DATE = 14;
        this.MESSAGES_REMOVED_DUPLICATE_RE_CAPTCHA_WHITE_LISTED_HOST_NAME = 1;
        this.MESSAGES_ONLINE_REFUND_INFO = 2;
        this.MESSAGES_CUSTOM_BOOKABLE_MAILS_INFO = 3;
        this.MESSAGES_CUSTOM_BOOKABLE_MAILS_INFO_AFFECTED_SHIFT_MODEL_ID = 1;
        this.MESSAGES_CUSTOM_BOOKABLE_MAILS_INFO_EVENT_TRIGGERED = 2;
        this.MESSAGES_CUSTOM_BOOKABLE_MAILS_INFO_EMAIL_SEND_TO_BOOKING_PERSON = 3;
        this.MESSAGES_CUSTOM_BOOKABLE_MAILS_INFO_EMAIL_SEND_TO_PARTICIPANTS = 4;
        this.MAIL_SENT_TO_BOOKING_PERSON_DATE_TIME = 1;
        this.MAIL_SENT_TO_BOOKING_PERSON_EVENT_TYPE = 2;
        this.MAIL_SENT_TO_BOOKING_PERSON_RECIPIENT_EMAIL = 3;
        this.MAIL_SENT_TO_BOOKING_PERSON_SUBJECT = 4;
        this.MAIL_SENT_TO_BOOKING_PERSON_TEXT = 5;
        this.MAIL_SENT_TO_BOOKING_PERSON_RESEND_REQUESTER_ID = 6;
        this.MAIL_SENT_TO_BOOKING_PERSON_RESEND = 7;
        this.AUTOMATIC_BOOKING_CANCELLATION_SETTINGS_NO_CANCELLATION_FEES = 1;
        this.AUTOMATIC_BOOKING_CANCELLATION_SETTINGS_AUTOMATIC_ONLINE_REFUND = 2;
        this.AUTOMATIC_BOOKING_CANCELLATION_SETTINGS_TRANSACTION_INTERNAL_COMMENT = 3;
    }
}
let SchedulingApiServiceBase = class SchedulingApiServiceBase extends ApiBase {
    constructor(h, router, apiE, zone, injector) {
        super(h, router, apiE, zone, injector, 'scheduling');
        this.consts = new Consts();
        this.dataWrapper = new SchedulingApiRoot(this);
    }
    version() {
        return 'a8081ceb2838c688a9f28c5564fee2b2,4c90e29b32587ae0860f1b2603fa2af6';
    }
    get data() {
        return this.dataWrapper;
    }
    getRootWrapper() {
        return this.dataWrapper;
    }
    recreateRootWrapper() {
        this.dataWrapper = new SchedulingApiRoot(this);
    }
};
SchedulingApiServiceBase = __decorate([
    Injectable({
        providedIn: 'root',
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof HttpClient !== "undefined" && HttpClient) === "function" ? _a : Object, typeof (_b = typeof Router !== "undefined" && Router) === "function" ? _b : Object, ApiErrorService, typeof (_c = typeof NgZone !== "undefined" && NgZone) === "function" ? _c : Object, typeof (_d = typeof Injector !== "undefined" && Injector) === "function" ? _d : Object])
], SchedulingApiServiceBase);
export { SchedulingApiServiceBase };
export class SchedulingApiRootBase extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiRoot);
        this.api = api;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: '',
            id: 'ROOT',
        });
        this.attributeInfoIsPaypalAvailable = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'isPaypalAvailable',
            id: 'IS_PAYPAL_AVAILABLE',
            primitiveType: PApiPrimitiveTypes.boolean,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoIsUsingBeta7 = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'isUsingBeta7',
            id: 'IS_USING_BETA_7',
            primitiveType: PApiPrimitiveTypes.boolean,
            canEdit: function () {
                if (!(((this.api.rightsService.canReadAndWriteBookingSystemSettings)))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.canReadAndWriteBookingSystemSettings)))) {
                    return true;
                }
                return false;
            },
        });
        this.attributeInfoIsUsingRoutesManager = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'isUsingRoutesManager',
            id: 'IS_USING_ROUTES_MANAGER',
            primitiveType: PApiPrimitiveTypes.boolean,
            canEdit: function () {
                if (!(((this.api.rightsService.canReadAndWriteBookingSystemSettings)))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.canReadAndWriteBookingSystemSettings)))) {
                    return true;
                }
                return false;
            },
        });
        this.attributeInfoKletterszeneId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'kletterszeneId',
            id: 'KLETTERSZENE_ID',
            primitiveType: PApiPrimitiveTypes.string,
            canEdit: function () {
                if (!(((this.api.rightsService.canReadAndWriteBookingSystemSettings)))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.canReadAndWriteBookingSystemSettings)))) {
                    return true;
                }
                return false;
            },
        });
        this.attributeInfoPosSystem = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'posSystem',
            id: 'POS_SYSTEM',
            primitiveType: PApiPrimitiveTypes.Enum,
            canEdit: function () {
                if (!(((this.api.rightsService.canReadAndWriteBookingSystemSettings)))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.canReadAndWriteBookingSystemSettings)))) {
                    return true;
                }
                return false;
            },
        });
        this.attributeInfoBookingPageCover = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'bookingPageCover',
            id: 'BOOKING_PAGE_COVER',
            primitiveType: PApiPrimitiveTypes.Image,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.imageRatio(2.6315789);
                    },
                    () => {
                        return this.api.validators.imageMaxFileSize(10240);
                    },
                    () => {
                        return this.api.validators.imageMinWidth(900);
                    },
                    () => {
                        return this.api.validators.imageMinHeight(342);
                    },
                    () => {
                        return this.api.validators.imageMaxWidth(1800);
                    },
                    () => {
                        return this.api.validators.imageMaxHeight(684);
                    },
                ];
            },
        });
        this.attributeInfoCompanyLogo = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'companyLogo',
            id: 'COMPANY_LOGO',
            primitiveType: PApiPrimitiveTypes.Image,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.imageRatio(1.0);
                    },
                    () => {
                        return this.api.validators.imageMaxFileSize(5120);
                    },
                    () => {
                        return this.api.validators.imageMinWidth(180);
                    },
                    () => {
                        return this.api.validators.imageMinHeight(180);
                    },
                    () => {
                        return this.api.validators.imageMaxWidth(360);
                    },
                    () => {
                        return this.api.validators.imageMaxHeight(360);
                    },
                ];
            },
        });
        this.attributeInfoIsOnlinePaymentAvailable = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'isOnlinePaymentAvailable',
            id: 'IS_ONLINE_PAYMENT_AVAILABLE',
            primitiveType: PApiPrimitiveTypes.boolean,
            canEdit: () => false,
            readMode: () => true,
        });
        this.shiftsWrapper = new SchedulingApiShifts(this.api, false);
        this.workingTimesWrapper = new SchedulingApiWorkingTimes(this.api, false);
        this.shiftExchangesWrapper = new SchedulingApiShiftExchanges(this.api, false);
        this.absencesWrapper = new SchedulingApiAbsences(this.api, false);
        this.assignmentProcessesWrapper = new SchedulingApiAssignmentProcesses(this.api, false);
        this.membersWrapper = new SchedulingApiMembers(this.api, false);
        this.bookingsWrapper = new SchedulingApiBookings(this.api, false);
        this.shiftModelsWrapper = new SchedulingApiShiftModels(this.api, false);
        this.notificationsConfWrapper = new SchedulingApiNotificationsConf(this.api);
        this.rightGroupsWrapper = new SchedulingApiRightGroups(this.api, false);
        this.accountingPeriodsWrapper = new SchedulingApiAccountingPeriods(this.api, false);
        this.memosWrapper = new SchedulingApiMemos(this.api, false);
        this.todaysShiftDescriptionsWrapper = new SchedulingApiTodaysShiftDescriptions(this.api, false);
        this.holidaysWrapper = new SchedulingApiHolidays(this.api, false);
        this.possibleTaxesWrapper = new SchedulingApiPossibleTaxes(this.api, false);
        this.schedulePreferencesWrapper = new SchedulingApiSchedulePreferences(this.api);
        this.customBookableMailsWrapper = new SchedulingApiCustomBookableMails(this.api, false);
        this.notificationSettingsWrapper = new SchedulingApiNotificationSettings(this.api);
        this.voucherSettingsWrapper = new SchedulingApiVoucherSettings(this.api);
        this.vouchersWrapper = new SchedulingApiVouchers(this.api, false);
        this.transactionsWrapper = new SchedulingApiTransactions(this.api, false);
        this.warningsWrapper = new SchedulingApiWarnings(this.api, false);
        this.evaluationWrapper = new SchedulingApiEvaluation(this.api);
        this.adyenAccountWrapper = new SchedulingApiAdyenAccount(this.api);
        this.reCaptchaWhiteListedHostNamesWrapper = new SchedulingApiReCaptchaWhiteListedHostNames(this.api, false);
        this.mailsSentToBookingPersonWrapper = new SchedulingApiMailsSentToBookingPerson(this.api, false);
        this.messagesWrapper = new SchedulingApiMessages(this.api);
        this.shiftChangeSelectorWrapper = new SchedulingApiShiftChangeSelector(this.api);
        this.automaticBookingCancellationSettingsWrapper = new SchedulingApiAutomaticBookingCancellationSettings(this.api);
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
        this.shiftsWrapper.parent = this;
        this.workingTimesWrapper.parent = this;
        this.shiftExchangesWrapper.parent = this;
        this.absencesWrapper.parent = this;
        this.assignmentProcessesWrapper.parent = this;
        this.membersWrapper.parent = this;
        this.bookingsWrapper.parent = this;
        this.shiftModelsWrapper.parent = this;
        this.notificationsConfWrapper.parent = this;
        this.rightGroupsWrapper.parent = this;
        this.accountingPeriodsWrapper.parent = this;
        this.memosWrapper.parent = this;
        this.todaysShiftDescriptionsWrapper.parent = this;
        this.holidaysWrapper.parent = this;
        this.possibleTaxesWrapper.parent = this;
        this.schedulePreferencesWrapper.parent = this;
        this.customBookableMailsWrapper.parent = this;
        this.notificationSettingsWrapper.parent = this;
        this.voucherSettingsWrapper.parent = this;
        this.vouchersWrapper.parent = this;
        this.transactionsWrapper.parent = this;
        this.warningsWrapper.parent = this;
        this.evaluationWrapper.parent = this;
        this.adyenAccountWrapper.parent = this;
        this.reCaptchaWhiteListedHostNamesWrapper.parent = this;
        this.mailsSentToBookingPersonWrapper.parent = this;
        this.messagesWrapper.parent = this;
        this.shiftChangeSelectorWrapper.parent = this;
        this.automaticBookingCancellationSettingsWrapper.parent = this;
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  A list of the shifts in time interval between query parameters "start" and "end". Only send for query parameter "data=calendar".
     */
    get shifts() {
        return this.shiftsWrapper;
    }
    set shiftsTestSetter(v) {
        this.setterImpl(1, v.rawData, 'shifts', () => { this.shiftsWrapper = v; });
    }
    /**
     *  A list of working times. Only send for query parameter "data=reporting".
     */
    get workingTimes() {
        return this.workingTimesWrapper;
    }
    set workingTimesTestSetter(v) {
        this.setterImpl(2, v.rawData, 'workingTimes', () => { this.workingTimesWrapper = v; });
    }
    /**
     *  A list of shift-exchange items. NOTE: Currently it is crucial that shift-exchanges are deserialized before absences because absences can have a reference to shift-exchange items.
     */
    get shiftExchanges() {
        return this.shiftExchangesWrapper;
    }
    set shiftExchangesTestSetter(v) {
        this.setterImpl(3, v.rawData, 'shiftExchanges', () => { this.shiftExchangesWrapper = v; });
    }
    /**
     *  A list of absences. Only send for query parameter data equal "calendar" and "reporting".
     */
    get absences() {
        return this.absencesWrapper;
    }
    set absencesTestSetter(v) {
        this.setterImpl(4, v.rawData, 'absences', () => { this.absencesWrapper = v; });
    }
    /**
     *  A list of assignment processes. Only send for query parameter data equal "calendar", "reporting" or "shiftExchange".
     */
    get assignmentProcesses() {
        return this.assignmentProcessesWrapper;
    }
    set assignmentProcessesTestSetter(v) {
        this.setterImpl(5, v.rawData, 'assignmentProcesses', () => { this.assignmentProcessesWrapper = v; });
    }
    /**
     *  A list of the members.
     */
    get members() {
        return this.membersWrapper;
    }
    set membersTestSetter(v) {
        this.setterImpl(6, v.rawData, 'members', () => { this.membersWrapper = v; });
    }
    /**
     *  A list of course bookings. NOTE: Currently it is crucial that bookings are deserialized before shift-models because shift-model tariff serialization depends on bookings data (see applyTo... values)
     */
    get bookings() {
        return this.bookingsWrapper;
    }
    set bookingsTestSetter(v) {
        this.setterImpl(7, v.rawData, 'bookings', () => { this.bookingsWrapper = v; });
    }
    /**
     *  A list of the shift models.
     */
    get shiftModels() {
        return this.shiftModelsWrapper;
    }
    set shiftModelsTestSetter(v) {
        this.setterImpl(8, v.rawData, 'shiftModels', () => { this.shiftModelsWrapper = v; });
    }
    /**
     *  Has client given us authorization for his paypal account? Read only.
     *
     * @type {boolean}
     */
    get isPaypalAvailable() {
        return this.data[9];
    }
    set isPaypalAvailableTestSetter(v) {
        this.setterImpl(9, v, 'isPaypalAvailable');
    }
    /**
     *  Is this client using the Beta7 api?
     *
     * @type {boolean}
     */
    get isUsingBeta7() {
        return this.data[10];
    }
    set isUsingBeta7(v) {
        this.setterImpl(10, v, 'isUsingBeta7');
    }
    /**
     *  Is this client using the Routes Manager api?
     *
     * @type {boolean}
     */
    get isUsingRoutesManager() {
        return this.data[11];
    }
    set isUsingRoutesManager(v) {
        this.setterImpl(11, v, 'isUsingRoutesManager');
    }
    /**
     *  Is this client using the kletterszene.com api? If yes, then here the kletterszene.com client id is stored.
     *
     * @type {string}
     */
    get kletterszeneId() {
        return this.data[12];
    }
    set kletterszeneId(v) {
        this.setterImpl(12, v, 'kletterszeneId');
    }
    /**
     *  Pos system currently being used by this client. Can be edited with "canReadAndWriteBookingSystemSettings" right.
     *
     * @type {SchedulingApiPosSystem}
     */
    get posSystem() {
        return this.data[13];
    }
    set posSystem(v) {
        this.setterImpl(13, v, 'posSystem');
    }
    /**
     *  Object to configure notifications for current action.
     */
    get notificationsConf() {
        return this.notificationsConfWrapper;
    }
    set notificationsConfTestSetter(v) {
        this.setterImpl(14, v.rawData, 'notificationsConf', () => { this.notificationsConfWrapper = v; });
    }
    /**
     *  A list of the right groups. A default member only gets the right group which is assigned to him.
     */
    get rightGroups() {
        return this.rightGroupsWrapper;
    }
    set rightGroupsTestSetter(v) {
        this.setterImpl(15, v.rawData, 'rightGroups', () => { this.rightGroupsWrapper = v; });
    }
    /**
     *  A list with information about the different accounting-periods intersecting given time interval. Only send for query parameter data equal "calendar", "reporting" and "shiftExchange".
     */
    get accountingPeriods() {
        return this.accountingPeriodsWrapper;
    }
    set accountingPeriodsTestSetter(v) {
        this.setterImpl(16, v.rawData, 'accountingPeriods', () => { this.accountingPeriodsWrapper = v; });
    }
    /**
     *  A list of memos. For query parameter "calendar", "reporting" and "shiftExchange" this list contains todays memos. For query parameter "calendar" additionally it contains all memos in interval "time". For other query parameters no memos are returned.
     */
    get memos() {
        return this.memosWrapper;
    }
    set memosTestSetter(v) {
        this.setterImpl(17, v.rawData, 'memos', () => { this.memosWrapper = v; });
    }
    /**
     *  A list of all todays shift descriptions.
     */
    get todaysShiftDescriptions() {
        return this.todaysShiftDescriptionsWrapper;
    }
    set todaysShiftDescriptionsTestSetter(v) {
        this.setterImpl(18, v.rawData, 'todaysShiftDescriptions', () => { this.todaysShiftDescriptionsWrapper = v; });
    }
    /**
     *  A list of holidays. Only send for query parameter "data=calendar". Read-only.
     */
    get holidays() {
        return this.holidaysWrapper;
    }
    set holidaysTestSetter(v) {
        this.setterImpl(19, v.rawData, 'holidays', () => { this.holidaysWrapper = v; });
    }
    /**
     *  A list of possible tax values for this account.
     */
    get possibleTaxes() {
        return this.possibleTaxesWrapper;
    }
    set possibleTaxesTestSetter(v) {
        this.setterImpl(20, v.rawData, 'possibleTaxes', () => { this.possibleTaxesWrapper = v; });
    }
    /**
     *  An object containing the schedule preferences for the Dr. Plano algorithm (Only send to client owners).
     */
    get schedulePreferences() {
        return this.schedulePreferencesWrapper;
    }
    set schedulePreferencesTestSetter(v) {
        this.setterImpl(21, v.rawData, 'schedulePreferences', () => { this.schedulePreferencesWrapper = v; });
    }
    /**
     *  A list of custom bookable emails which define email templates. Only send for query parameter data equal "calendar" and "bookingSystemSettings". Only editable by client owners.
     */
    get customBookableMails() {
        return this.customBookableMailsWrapper;
    }
    set customBookableMailsTestSetter(v) {
        this.setterImpl(22, v.rawData, 'customBookableMails', () => { this.customBookableMailsWrapper = v; });
    }
    /**
     *  Notification settings of current user.
     */
    get notificationSettings() {
        return this.notificationSettingsWrapper;
    }
    set notificationSettingsTestSetter(v) {
        this.setterImpl(23, v.rawData, 'notificationSettings', () => { this.notificationSettingsWrapper = v; });
    }
    /**
     *  Voucher settings. Send for data equal "bookingSystemSettings".
     */
    get voucherSettings() {
        return this.voucherSettingsWrapper;
    }
    set voucherSettingsTestSetter(v) {
        this.setterImpl(24, v.rawData, 'voucherSettings', () => { this.voucherSettingsWrapper = v; });
    }
    /**
     *  List of available vouchers. Send for data equal "vouchers".
     */
    get vouchers() {
        return this.vouchersWrapper;
    }
    set vouchersTestSetter(v) {
        this.setterImpl(25, v.rawData, 'vouchers', () => { this.vouchersWrapper = v; });
    }
    /**
     *  A list of transactions.
     */
    get transactions() {
        return this.transactionsWrapper;
    }
    set transactionsTestSetter(v) {
        this.setterImpl(26, v.rawData, 'transactions', () => { this.transactionsWrapper = v; });
    }
    /**
     *  Warnings for current request. Read-only.
     */
    get warnings() {
        return this.warningsWrapper;
    }
    set warningsTestSetter(v) {
        this.setterImpl(27, v.rawData, 'warnings', () => { this.warningsWrapper = v; });
    }
    /**
     *  An object containing the schedule evaluation (Only send to client owners).
     */
    get evaluation() {
        return this.evaluationWrapper;
    }
    set evaluationTestSetter(v) {
        this.setterImpl(28, v.rawData, 'evaluation', () => { this.evaluationWrapper = v; });
    }
    /**
     *
     *
     * @type {Image}
     */
    get bookingPageCover() {
        const path = this.data[29];
        return path ? Config.API_IMAGE_BASE_URL + path : path;
    }
    set bookingPageCover(v) {
        this.setterImpl(29, v, 'bookingPageCover');
    }
    /**
     *
     *
     * @type {Image}
     */
    get companyLogo() {
        const path = this.data[30];
        return path ? Config.API_IMAGE_BASE_URL + path : path;
    }
    set companyLogo(v) {
        this.setterImpl(30, v, 'companyLogo');
    }
    /**
     *  Adyen data.
     */
    get adyenAccount() {
        return this.adyenAccountWrapper;
    }
    set adyenAccountTestSetter(v) {
        this.setterImpl(31, v.rawData, 'adyenAccount', () => { this.adyenAccountWrapper = v; });
    }
    /**
     *  Has client onboarded to Adyen? Read only.
     *
     * @type {boolean}
     */
    get isOnlinePaymentAvailable() {
        return this.data[32];
    }
    set isOnlinePaymentAvailableTestSetter(v) {
        this.setterImpl(32, v, 'isOnlinePaymentAvailable');
    }
    /**
     *  Host-names being permitted during Google reCaptcha Token validation. Send for data equal "bookingSystemSettings".
     */
    get reCaptchaWhiteListedHostNames() {
        return this.reCaptchaWhiteListedHostNamesWrapper;
    }
    set reCaptchaWhiteListedHostNamesTestSetter(v) {
        this.setterImpl(33, v.rawData, 'reCaptchaWhiteListedHostNames', () => { this.reCaptchaWhiteListedHostNamesWrapper = v; });
    }
    /**
     *  All mails send to the booking person. Only sent when a booking or voucher is loaded detailed.
     */
    get mailsSentToBookingPerson() {
        return this.mailsSentToBookingPersonWrapper;
    }
    set mailsSentToBookingPersonTestSetter(v) {
        this.setterImpl(34, v.rawData, 'mailsSentToBookingPerson', () => { this.mailsSentToBookingPersonWrapper = v; });
    }
    /**
     *  Messages which backend sends to frontend.
     */
    get messages() {
        return this.messagesWrapper;
    }
    set messagesTestSetter(v) {
        this.setterImpl(35, v.rawData, 'messages', () => { this.messagesWrapper = v; });
    }
    /**
     *  Set by user to define on what the shift changes should be applied.
     */
    get shiftChangeSelector() {
        return this.shiftChangeSelectorWrapper;
    }
    set shiftChangeSelectorTestSetter(v) {
        this.setterImpl(36, v.rawData, 'shiftChangeSelector', () => { this.shiftChangeSelectorWrapper = v; });
    }
    /**
     *  Here you can configure the automatic booking cancellation when a shift is removed or cancelled.
     */
    get automaticBookingCancellationSettings() {
        return this.automaticBookingCancellationSettingsWrapper;
    }
    set automaticBookingCancellationSettingsTestSetter(v) {
        this.setterImpl(37, v.rawData, 'automaticBookingCancellationSettings', () => { this.automaticBookingCancellationSettingsWrapper = v; });
    }
    _fixIds(_idReplacements) {
        this.shiftsWrapper._fixIds(_idReplacements);
        this.workingTimesWrapper._fixIds(_idReplacements);
        this.shiftExchangesWrapper._fixIds(_idReplacements);
        this.absencesWrapper._fixIds(_idReplacements);
        this.assignmentProcessesWrapper._fixIds(_idReplacements);
        this.membersWrapper._fixIds(_idReplacements);
        this.bookingsWrapper._fixIds(_idReplacements);
        this.shiftModelsWrapper._fixIds(_idReplacements);
        this.notificationsConfWrapper._fixIds(_idReplacements);
        this.rightGroupsWrapper._fixIds(_idReplacements);
        this.accountingPeriodsWrapper._fixIds(_idReplacements);
        this.memosWrapper._fixIds(_idReplacements);
        this.todaysShiftDescriptionsWrapper._fixIds(_idReplacements);
        this.holidaysWrapper._fixIds(_idReplacements);
        this.possibleTaxesWrapper._fixIds(_idReplacements);
        this.schedulePreferencesWrapper._fixIds(_idReplacements);
        this.customBookableMailsWrapper._fixIds(_idReplacements);
        this.notificationSettingsWrapper._fixIds(_idReplacements);
        this.voucherSettingsWrapper._fixIds(_idReplacements);
        this.vouchersWrapper._fixIds(_idReplacements);
        this.transactionsWrapper._fixIds(_idReplacements);
        this.warningsWrapper._fixIds(_idReplacements);
        this.evaluationWrapper._fixIds(_idReplacements);
        this.adyenAccountWrapper._fixIds(_idReplacements);
        this.reCaptchaWhiteListedHostNamesWrapper._fixIds(_idReplacements);
        this.mailsSentToBookingPersonWrapper._fixIds(_idReplacements);
        this.messagesWrapper._fixIds(_idReplacements);
        this.shiftChangeSelectorWrapper._fixIds(_idReplacements);
        this.automaticBookingCancellationSettingsWrapper._fixIds(_idReplacements);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 38);
            if (data[1] === null)
                data[1] = Meta.createNewList();
            if (data[2] === null)
                data[2] = Meta.createNewList();
            if (data[3] === null)
                data[3] = Meta.createNewList();
            if (data[4] === null)
                data[4] = Meta.createNewList();
            if (data[5] === null)
                data[5] = Meta.createNewList();
            if (data[6] === null)
                data[6] = Meta.createNewList();
            if (data[7] === null)
                data[7] = Meta.createNewList();
            if (data[8] === null)
                data[8] = Meta.createNewList();
            data[9] = false;
            data[10] = false;
            data[11] = false;
            if (data[14] === null)
                data[14] = Meta.createNewObject(false);
            if (data[15] === null)
                data[15] = Meta.createNewList();
            if (data[16] === null)
                data[16] = Meta.createNewList();
            if (data[17] === null)
                data[17] = Meta.createNewList();
            if (data[18] === null)
                data[18] = Meta.createNewList();
            if (data[19] === null)
                data[19] = Meta.createNewList();
            if (data[20] === null)
                data[20] = Meta.createNewList();
            if (data[21] === null)
                data[21] = Meta.createNewObject(false);
            if (data[22] === null)
                data[22] = Meta.createNewList();
            if (data[23] === null)
                data[23] = Meta.createNewObject(false);
            if (data[24] === null)
                data[24] = Meta.createNewObject(false);
            if (data[25] === null)
                data[25] = Meta.createNewList();
            if (data[26] === null)
                data[26] = Meta.createNewList();
            if (data[27] === null)
                data[27] = Meta.createNewList();
            if (data[28] === null)
                data[28] = Meta.createNewObject(false);
            if (data[31] === null)
                data[31] = Meta.createNewObject(false);
            data[32] = false;
            if (data[33] === null)
                data[33] = Meta.createNewList();
            if (data[34] === null)
                data[34] = Meta.createNewList();
            if (data[35] === null)
                data[35] = Meta.createNewObject(false);
            if (data[36] === null)
                data[36] = Meta.createNewObject(false);
            if (data[37] === null)
                data[37] = Meta.createNewObject(false);
        }
        // propagate new raw data to children
        this.shiftsWrapper._updateRawData(data ? data[1] : null, generateMissingData);
        this.workingTimesWrapper._updateRawData(data ? data[2] : null, generateMissingData);
        this.shiftExchangesWrapper._updateRawData(data ? data[3] : null, generateMissingData);
        this.absencesWrapper._updateRawData(data ? data[4] : null, generateMissingData);
        this.assignmentProcessesWrapper._updateRawData(data ? data[5] : null, generateMissingData);
        this.membersWrapper._updateRawData(data ? data[6] : null, generateMissingData);
        this.bookingsWrapper._updateRawData(data ? data[7] : null, generateMissingData);
        this.shiftModelsWrapper._updateRawData(data ? data[8] : null, generateMissingData);
        this.notificationsConfWrapper._updateRawData(data ? data[14] : null, generateMissingData);
        this.rightGroupsWrapper._updateRawData(data ? data[15] : null, generateMissingData);
        this.accountingPeriodsWrapper._updateRawData(data ? data[16] : null, generateMissingData);
        this.memosWrapper._updateRawData(data ? data[17] : null, generateMissingData);
        this.todaysShiftDescriptionsWrapper._updateRawData(data ? data[18] : null, generateMissingData);
        this.holidaysWrapper._updateRawData(data ? data[19] : null, generateMissingData);
        this.possibleTaxesWrapper._updateRawData(data ? data[20] : null, generateMissingData);
        this.schedulePreferencesWrapper._updateRawData(data ? data[21] : null, generateMissingData);
        this.customBookableMailsWrapper._updateRawData(data ? data[22] : null, generateMissingData);
        this.notificationSettingsWrapper._updateRawData(data ? data[23] : null, generateMissingData);
        this.voucherSettingsWrapper._updateRawData(data ? data[24] : null, generateMissingData);
        this.vouchersWrapper._updateRawData(data ? data[25] : null, generateMissingData);
        this.transactionsWrapper._updateRawData(data ? data[26] : null, generateMissingData);
        this.warningsWrapper._updateRawData(data ? data[27] : null, generateMissingData);
        this.evaluationWrapper._updateRawData(data ? data[28] : null, generateMissingData);
        this.adyenAccountWrapper._updateRawData(data ? data[31] : null, generateMissingData);
        this.reCaptchaWhiteListedHostNamesWrapper._updateRawData(data ? data[33] : null, generateMissingData);
        this.mailsSentToBookingPersonWrapper._updateRawData(data ? data[34] : null, generateMissingData);
        this.messagesWrapper._updateRawData(data ? data[35] : null, generateMissingData);
        this.shiftChangeSelectorWrapper._updateRawData(data ? data[36] : null, generateMissingData);
        this.automaticBookingCancellationSettingsWrapper._updateRawData(data ? data[37] : null, generateMissingData);
    }
    get dni() {
        return '1';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '1', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class SchedulingApiShiftsBase extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'shifts');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'shifts',
            id: 'SHIFTS',
            primitiveType: PApiPrimitiveTypes.ApiList,
        });
    }
    wrapItem(item, _generateMissingData) {
        const newWrapper = new SchedulingApiShift(this.api);
        newWrapper._updateRawData(item, _generateMissingData);
        return newWrapper;
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return false;
    }
    createInstance(removeDestroyedItems) {
        return new SchedulingApiShifts(this.api, removeDestroyedItems);
    }
    get dni() {
        return '2';
    }
    createNewItem(id = null) {
        const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('shifts');
        return newItem;
    }
}
export class SchedulingApiShiftBase extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiShift);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'shift',
            id: 'SHIFT',
        });
        this.attributeInfoMyPref = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'myPref',
            id: 'SHIFT_MY_PREF',
            primitiveType: PApiPrimitiveTypes.Enum,
        });
        this.attributeInfoStart = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'start',
            id: 'SHIFT_START',
            primitiveType: PApiPrimitiveTypes.DateTime,
        });
        this.attributeInfoEnd = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'end',
            id: 'SHIFT_END',
            primitiveType: PApiPrimitiveTypes.DateTime,
        });
        this.attributeInfoNeededMembersCount = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'neededMembersCount',
            id: 'SHIFT_NEEDED_MEMBERS_COUNT',
            primitiveType: PApiPrimitiveTypes.Integer,
        });
        this.attributeInfoShiftModelId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'shiftModelId',
            id: 'SHIFT_MODEL_ID',
            primitiveType: PApiPrimitiveTypes.Id,
        });
        this.attributeInfoDescription = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'description',
            id: 'SHIFT_DESCRIPTION',
            primitiveType: PApiPrimitiveTypes.string,
            canEdit: function () {
                if (!((this.api.rightsService.userCanWrite(this)))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
        });
        this.attributeInfoIsRemoved = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'isRemoved',
            id: 'SHIFT_IS_REMOVED',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoIsCourseCanceled = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'isCourseCanceled',
            id: 'SHIFT_IS_COURSE_CANCELED',
            primitiveType: PApiPrimitiveTypes.boolean,
            canEdit: function () {
                if (!((this.api.rightsService.userCanWrite(this)))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
        });
        this.attributeInfoIsCourseOnline = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'isCourseOnline',
            id: 'SHIFT_IS_COURSE_ONLINE',
            primitiveType: PApiPrimitiveTypes.boolean,
            canEdit: function () {
                if (!((this.api.rightsService.userCanWrite(this)))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
        });
        this.attributeInfoMinCourseParticipantCount = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'minCourseParticipantCount',
            id: 'SHIFT_MIN_COURSE_PARTICIPANT_COUNT',
            primitiveType: PApiPrimitiveTypes.Integer,
            canEdit: function () {
                if (!((this.api.rightsService.userCanWrite(this)))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
        });
        this.attributeInfoMaxCourseParticipantCount = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'maxCourseParticipantCount',
            id: 'SHIFT_MAX_COURSE_PARTICIPANT_COUNT',
            primitiveType: PApiPrimitiveTypes.Integer,
            canEdit: function () {
                if (!((this.api.rightsService.userCanWrite(this)))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
        });
        this.attributeInfoCurrentCourseParticipantCount = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'currentCourseParticipantCount',
            id: 'SHIFT_CURRENT_COURSE_PARTICIPANT_COUNT',
            primitiveType: PApiPrimitiveTypes.Integer,
        });
        this.attributeInfoEarlyBirdAssignToMe = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'earlyBirdAssignToMe',
            id: 'SHIFT_EARLY_BIRD_ASSIGN_TO_ME',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoWorkingTimeCreationMethod = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'workingTimeCreationMethod',
            id: 'SHIFT_WORKING_TIME_CREATION_METHOD',
            primitiveType: PApiPrimitiveTypes.Enum,
            show: function () {
                if (!((this.api.rightsService.userCanWrite(this)))) {
                    return false;
                }
                return true;
            },
            canEdit: function () {
                if (!((this.api.rightsService.userCanWrite(this)))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
        });
        this.attributeInfoCurrentCourseAttendeeCount = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'currentCourseAttendeeCount',
            id: 'SHIFT_CURRENT_COURSE_ATTENDEE_COUNT',
            primitiveType: PApiPrimitiveTypes.Integer,
        });
        this.assignableMembersWrapper = new SchedulingApiShiftAssignableMembers(this.api, false);
        this.assignedMemberIdsWrapper = new SchedulingApiShiftAssignedMemberIds(this.api, false);
        this.shiftModelIdWrapper = null;
        this.memberPrefsWrapper = new SchedulingApiShiftMemberPrefs(this.api, false);
        this.packetShiftsWrapper = new SchedulingApiShiftPacketShifts(this.api, false);
        this.neededMembersCountConfWrapper = new SchedulingApiShiftNeededMembersCountConf(this.api);
        this.timeWrapper = new SchedulingApiShiftTime(this.api);
        this.repetitionWrapper = new SchedulingApiShiftRepetition(this.api);
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
        this.assignableMembersWrapper.parent = this;
        this.assignedMemberIdsWrapper.parent = this;
        this.memberPrefsWrapper.parent = this;
        this.packetShiftsWrapper.parent = this;
        this.neededMembersCountConfWrapper.parent = this;
        this.timeWrapper.parent = this;
        this.repetitionWrapper.parent = this;
    }
    get id() {
        return this._id !== null ? this._id : ShiftId.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  Shift preference of logged in user.
     *
     * @type {SchedulingApiShiftMemberPrefValue}
     */
    get myPref() {
        return this.data[1];
    }
    set myPref(v) {
        this.setterImpl(1, v, 'myPref');
    }
    /**
     *  Only editable by client owners. Which members are assignable to this shift. Make sure this is deserialized before assignedMemberIds because this is a prerequisite. Can be used with "shiftChangeSelector".
     */
    get assignableMembers() {
        return this.assignableMembersWrapper;
    }
    set assignableMembersTestSetter(v) {
        this.setterImpl(2, v.rawData, 'assignableMembers', () => { this.assignableMembersWrapper = v; });
    }
    /**
     *  A list of the assigned members' ids. Can be used with "shiftChangeSelector".
     */
    get assignedMemberIds() {
        return this.assignedMemberIdsWrapper;
    }
    set assignedMemberIdsTestSetter(v) {
        this.setterImpl(3, v.rawData, 'assignedMemberIds', () => { this.assignedMemberIdsWrapper = v; });
    }
    /**
     *  Start of shift (inclusive). This value is not editable. You can instead edit "time.start".
     *
     * @type {DateTime}
     */
    get start() {
        return this.data[4];
    }
    set start(v) {
        this.setterImpl(4, v, 'start');
    }
    /**
     *  End of shift (exclusive). This value is not editable. You can instead edit "time.end".
     *
     * @type {DateTime}
     */
    get end() {
        return this.data[5];
    }
    set end(v) {
        this.setterImpl(5, v, 'end');
    }
    /**
     *  How many members should be assigned to this shift? Read only. Modify "neededMembersCountConf" instead.
     *
     * @type {Integer}
     */
    get neededMembersCount() {
        return this.data[6];
    }
    set neededMembersCount(v) {
        this.setterImpl(6, v, 'neededMembersCount');
    }
    /**
     *  Id of the shift model to which this shift belongs.
     *
     * @type {Id}
     */
    get shiftModelId() {
        return this.shiftModelIdWrapper;
    }
    set shiftModelId(v) {
        this.setterImpl(7, v, 'shiftModelId', () => { this.shiftModelIdWrapper = v; });
    }
    /**
     *  Only send to client owners. A list of the member preferences for this shift.
     */
    get memberPrefs() {
        return this.memberPrefsWrapper;
    }
    set memberPrefsTestSetter(v) {
        this.setterImpl(8, v.rawData, 'memberPrefs', () => { this.memberPrefsWrapper = v; });
    }
    /**
     *  A list of all packet shifts belonging to this shift. Note that this list is empty if this shift does not belong to a packet.
     */
    get packetShifts() {
        return this.packetShiftsWrapper;
    }
    set packetShiftsTestSetter(v) {
        this.setterImpl(9, v.rawData, 'packetShifts', () => { this.packetShiftsWrapper = v; });
    }
    /**
     *  Description of the shift. Can be used with "shiftChangeSelector".
     *
     * @type {string}
     */
    get description() {
        return this.data[10];
    }
    set description(v) {
        this.setterImpl(10, v, 'description');
    }
    /**
     *  Is this shift removed?
     *
     * @type {boolean}
     */
    get isRemoved() {
        return this.data[11];
    }
    set isRemoved(v) {
        this.setterImpl(11, v, 'isRemoved');
    }
    /**
     *  Is the course canceled?
     *
     * @type {boolean}
     */
    get isCourseCanceled() {
        return this.data[12];
    }
    set isCourseCanceled(v) {
        this.setterImpl(12, v, 'isCourseCanceled');
    }
    /**
     *  Is the course online? Can be used with "shiftChangeSelector".
     *
     * @type {boolean}
     */
    get isCourseOnline() {
        return this.data[13];
    }
    set isCourseOnline(v) {
        this.setterImpl(13, v, 'isCourseOnline');
    }
    /**
     *  Minimal course participant count. Can be used with "shiftChangeSelector".
     *
     * @type {Integer}
     */
    get minCourseParticipantCount() {
        return this.data[14];
    }
    set minCourseParticipantCount(v) {
        this.setterImpl(14, v, 'minCourseParticipantCount');
    }
    /**
     *  Maximal course participant count. Can be used with "shiftChangeSelector".
     *
     * @type {Integer}
     */
    get maxCourseParticipantCount() {
        return this.data[15];
    }
    set maxCourseParticipantCount(v) {
        this.setterImpl(15, v, 'maxCourseParticipantCount');
    }
    /**
     *  Current course participant count? Read only. Being determined by bookings.
     *
     * @type {Integer}
     */
    get currentCourseParticipantCount() {
        return this.data[16];
    }
    set currentCourseParticipantCount(v) {
        this.setterImpl(16, v, 'currentCourseParticipantCount');
    }
    /**
     *  Assign this shift by early bird assignment process to me.
     *
     * @type {boolean}
     */
    get earlyBirdAssignToMe() {
        return this.data[17];
    }
    set earlyBirdAssignToMe(v) {
        this.setterImpl(17, v, 'earlyBirdAssignToMe');
    }
    /**
     * (Detail)  Configuration values from which "neededMembersCount" is calculated. Can be used with "changeSelector".
     */
    get neededMembersCountConf() {
        return this.neededMembersCountConfWrapper;
    }
    set neededMembersCountConfTestSetter(v) {
        this.setterImpl(18, v.rawData, 'neededMembersCountConf', () => { this.neededMembersCountConfWrapper = v; });
    }
    /**
     * (Detail)  The time when this shift will start (relative to current day). Can be used with "shiftChangeSelector".
     */
    get time() {
        return this.timeWrapper;
    }
    set timeTestSetter(v) {
        this.setterImpl(19, v.rawData, 'time', () => { this.timeWrapper = v; });
    }
    /**
     * (Detail)  How is the corresponding working-time to this shift going to be created? Only send to client owners. Can be used with "shiftChangeSelector".
     *
     * @type {SchedulingApiWorkingTimeCreationMethod}
     */
    get workingTimeCreationMethod() {
        return this.data[20];
    }
    set workingTimeCreationMethod(v) {
        this.setterImpl(20, v, 'workingTimeCreationMethod');
    }
    /**
     * (Detail)  Repetition pattern of this shift.
     */
    get repetition() {
        return this.repetitionWrapper;
    }
    set repetitionTestSetter(v) {
        this.setterImpl(21, v.rawData, 'repetition', () => { this.repetitionWrapper = v; });
    }
    /**
     * (Detail)  Current course attendee count? Read only. Being determined by bookings.
     *
     * @type {Integer}
     */
    get currentCourseAttendeeCount() {
        return this.data[22];
    }
    set currentCourseAttendeeCount(v) {
        this.setterImpl(22, v, 'currentCourseAttendeeCount');
    }
    _fixIds(_idReplacements) {
        this.assignableMembersWrapper._fixIds(_idReplacements);
        this.assignedMemberIdsWrapper._fixIds(_idReplacements);
        this.data[7] = Meta.getReplacedId(this.data[7], _idReplacements);
        this.shiftModelIdWrapper = Id.create(this.data[7]);
        this.memberPrefsWrapper._fixIds(_idReplacements);
        this.packetShiftsWrapper._fixIds(_idReplacements);
        this.neededMembersCountConfWrapper._fixIds(_idReplacements);
        this.timeWrapper._fixIds(_idReplacements);
        this.repetitionWrapper._fixIds(_idReplacements);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : ShiftId.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 23);
            if (data[2] === null)
                data[2] = Meta.createNewList();
            if (data[3] === null)
                data[3] = Meta.createNewList();
            if (data[8] === null)
                data[8] = Meta.createNewList();
            if (data[9] === null)
                data[9] = Meta.createNewList();
            data[11] = false;
            data[12] = false;
            data[13] = false;
            data[17] = false;
            if (data[18] === null)
                data[18] = Meta.createNewObject(true);
            if (data[19] === null)
                data[19] = Meta.createNewObject(true);
            if (data[21] === null)
                data[21] = Meta.createNewObject(true);
        }
        // propagate new raw data to children
        this.assignableMembersWrapper._updateRawData(data ? data[2] : null, generateMissingData);
        this.assignedMemberIdsWrapper._updateRawData(data ? data[3] : null, generateMissingData);
        if (!Meta.isSameId(data ? data[7] : null, this.shiftModelIdWrapper))
            this.shiftModelIdWrapper = data && data[7] ? Id.create(data[7]) : null;
        this.memberPrefsWrapper._updateRawData(data ? data[8] : null, generateMissingData);
        this.packetShiftsWrapper._updateRawData(data ? data[9] : null, generateMissingData);
        this.neededMembersCountConfWrapper._updateRawData(data ? data[18] : null, generateMissingData);
        this.timeWrapper._updateRawData(data ? data[19] : null, generateMissingData);
        this.repetitionWrapper._updateRawData(data ? data[21] : null, generateMissingData);
    }
    get dni() {
        return '40';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '40', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export var SchedulingApiShiftMemberPrefValue;
(function (SchedulingApiShiftMemberPrefValue) {
    SchedulingApiShiftMemberPrefValue[SchedulingApiShiftMemberPrefValue["CANNOT"] = 1] = "CANNOT";
    SchedulingApiShiftMemberPrefValue[SchedulingApiShiftMemberPrefValue["CAN"] = 2] = "CAN";
    SchedulingApiShiftMemberPrefValue[SchedulingApiShiftMemberPrefValue["WANT"] = 3] = "WANT";
})(SchedulingApiShiftMemberPrefValue || (SchedulingApiShiftMemberPrefValue = {}));
export class SchedulingApiShiftAssignableMembersBase extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'assignableMembers');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'assignableMembers',
            id: 'SHIFT_ASSIGNABLE_MEMBERS',
            primitiveType: PApiPrimitiveTypes.ApiList,
            canEdit: function () {
                if (!((this.api.rightsService.userCanWrite(this.parent)))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
        });
    }
    wrapItem(item, _generateMissingData) {
        const newWrapper = new SchedulingApiShiftAssignableMember(this.api);
        newWrapper._updateRawData(item, _generateMissingData);
        return newWrapper;
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return false;
    }
    createInstance(removeDestroyedItems) {
        return new SchedulingApiShiftAssignableMembers(this.api, removeDestroyedItems);
    }
    get dni() {
        return '42';
    }
    createNewItem(id = null) {
        const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('assignableMembers');
        return newItem;
    }
}
export class SchedulingApiShiftAssignableMember extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiShiftAssignableMember);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'shiftAssignableMember',
            id: 'SHIFT_ASSIGNABLE_MEMBER',
        });
        this.attributeInfoHourlyEarnings = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'hourlyEarnings',
            id: 'SHIFT_ASSIGNABLE_MEMBER_EARNINGS',
            primitiveType: PApiPrimitiveTypes.Currency,
        });
        this.attributeInfoMemberId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'memberId',
            id: 'SHIFT_ASSIGNABLE_MEMBER_ID',
            primitiveType: PApiPrimitiveTypes.Id,
        });
        this.memberIdWrapper = null;
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  Members hourly earnings for this shift model
     *
     * @type {Currency}
     */
    get hourlyEarnings() {
        return this.data[1];
    }
    set hourlyEarnings(v) {
        this.setterImpl(1, v, 'hourlyEarnings');
    }
    /**
     *  Id of assignable member
     *
     * @type {Id}
     */
    get memberId() {
        return this.memberIdWrapper;
    }
    set memberId(v) {
        this.setterImpl(2, v, 'memberId', () => { this.memberIdWrapper = v; });
    }
    _fixIds(_idReplacements) {
        this.data[2] = Meta.getReplacedId(this.data[2], _idReplacements);
        this.memberIdWrapper = Id.create(this.data[2]);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 3);
        }
        // propagate new raw data to children
        if (!Meta.isSameId(data ? data[2] : null, this.memberIdWrapper))
            this.memberIdWrapper = data && data[2] ? Id.create(data[2]) : null;
    }
    get dni() {
        return '63';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '63', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class SchedulingApiShiftAssignedMemberIds extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'assignedMemberIds');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'assignedMemberIds',
            id: 'SHIFT_ASSIGNED_MEMBER_IDS',
            primitiveType: PApiPrimitiveTypes.ApiList,
            show: function () {
                console.error('AttributeInfo for /scheduling -> SHIFT_ASSIGNED_MEMBER_IDS is not implemented yet. Please create a Jira issue in the current Sprint: https://drplano.atlassian.net/secure/CreateIssueDetails!init.jspa?pid=10003&issuetype=10101&summary=' + encodeURI('AttributeInfo for /scheduling -> SHIFT_ASSIGNED_MEMBER_IDS is not implemented yet') + '&assignee=557058%3Ae58fd015-3e1d-44b8-9131-aef274b1c571');
                return true;
            },
        });
        this.attributeInfoShiftAssignedMemberId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'shiftAssignedMemberId',
            id: 'SHIFT_ASSIGNED_MEMBER_ID',
            primitiveType: PApiPrimitiveTypes.Id,
        });
    }
    wrapItem(item, _generateMissingData) {
        return Id.create(item);
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return true;
    }
    createInstance(removeDestroyedItems) {
        return new SchedulingApiShiftAssignedMemberIds(this.api, removeDestroyedItems);
    }
    get dni() {
        return '43';
    }
    createNewItem() {
        const newItemRaw = null;
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('assignedMemberIds');
        return newItem;
    }
}
export class SchedulingApiShiftMemberPrefs extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'memberPrefs');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'memberPrefs',
            id: 'SHIFT_MEMBER_PREFS',
            primitiveType: PApiPrimitiveTypes.ApiList,
            show: function () {
                if (!((this.api.rightsService.userCanWrite(this.parent)))) {
                    return false;
                }
                return true;
            },
        });
    }
    wrapItem(item, _generateMissingData) {
        const newWrapper = new SchedulingApiShiftMemberPref(this.api);
        newWrapper._updateRawData(item, _generateMissingData);
        return newWrapper;
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return false;
    }
    createInstance(removeDestroyedItems) {
        return new SchedulingApiShiftMemberPrefs(this.api, removeDestroyedItems);
    }
    get dni() {
        return '48';
    }
    createNewItem(id = null) {
        const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('memberPrefs');
        return newItem;
    }
}
export class SchedulingApiShiftMemberPref extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiShiftMemberPref);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'shiftMemberPref',
            id: 'SHIFT_MEMBER_PREF',
        });
        this.attributeInfoMemberId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'memberId',
            id: 'SHIFT_MEMBER_PREF_MEMBER_ID',
            primitiveType: PApiPrimitiveTypes.Id,
        });
        this.attributeInfoPref = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'pref',
            id: 'SHIFT_MEMBER_PREF_VALUE',
            primitiveType: PApiPrimitiveTypes.Enum,
        });
        this.memberIdWrapper = null;
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  Id of the member
     *
     * @type {Id}
     */
    get memberId() {
        return this.memberIdWrapper;
    }
    set memberId(v) {
        this.setterImpl(1, v, 'memberId', () => { this.memberIdWrapper = v; });
    }
    /**
     *  Preference of the member
     *
     * @type {SchedulingApiShiftMemberPrefValue}
     */
    get pref() {
        return this.data[2];
    }
    set pref(v) {
        this.setterImpl(2, v, 'pref');
    }
    _fixIds(_idReplacements) {
        this.data[1] = Meta.getReplacedId(this.data[1], _idReplacements);
        this.memberIdWrapper = Id.create(this.data[1]);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 3);
        }
        // propagate new raw data to children
        if (!Meta.isSameId(data ? data[1] : null, this.memberIdWrapper))
            this.memberIdWrapper = data && data[1] ? Id.create(data[1]) : null;
    }
    get dni() {
        return '72';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '72', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class SchedulingApiShiftPacketShifts extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'packetShifts');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'packetShifts',
            id: 'SHIFT_PACKET_SHIFTS',
            primitiveType: PApiPrimitiveTypes.ApiList,
        });
    }
    wrapItem(item, _generateMissingData) {
        const newWrapper = new SchedulingApiShiftPacketShift(this.api);
        newWrapper._updateRawData(item, _generateMissingData);
        return newWrapper;
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return false;
    }
    createInstance(removeDestroyedItems) {
        return new SchedulingApiShiftPacketShifts(this.api, removeDestroyedItems);
    }
    get dni() {
        return '49';
    }
    createNewItem(id = null) {
        const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('packetShifts');
        return newItem;
    }
}
export class SchedulingApiShiftPacketShift extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiShiftPacketShift);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'shiftPacketShift',
            id: 'SHIFT_PACKET_SHIFT',
        });
        this.attributeInfoStart = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'start',
            id: 'SHIFT_PACKET_SHIFT_START',
            primitiveType: PApiPrimitiveTypes.DateTime,
        });
        this.attributeInfoEnd = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'end',
            id: 'SHIFT_PACKET_SHIFT_END',
            primitiveType: PApiPrimitiveTypes.DateTime,
        });
        this.assignedMemberIdsWrapper = new SchedulingApiShiftPacketShiftAssignedMemberIds(this.api, false);
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
        this.assignedMemberIdsWrapper.parent = this;
    }
    get id() {
        return this._id !== null ? this._id : ShiftId.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  Start of the packet shift (inclusive). This value is not editable.
     *
     * @type {DateTime}
     */
    get start() {
        return this.data[1];
    }
    set start(v) {
        this.setterImpl(1, v, 'start');
    }
    /**
     *  End of the packet shift (exclusive). This value is not editable.
     *
     * @type {DateTime}
     */
    get end() {
        return this.data[2];
    }
    set end(v) {
        this.setterImpl(2, v, 'end');
    }
    /**
     * (Detail)  List of member ids being assigned to this shift.
     */
    get assignedMemberIds() {
        return this.assignedMemberIdsWrapper;
    }
    set assignedMemberIdsTestSetter(v) {
        this.setterImpl(3, v.rawData, 'assignedMemberIds', () => { this.assignedMemberIdsWrapper = v; });
    }
    _fixIds(_idReplacements) {
        this.assignedMemberIdsWrapper._fixIds(_idReplacements);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : ShiftId.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 4);
            if (data[3] === null)
                data[3] = Meta.createNewList();
        }
        // propagate new raw data to children
        this.assignedMemberIdsWrapper._updateRawData(data ? data[3] : null, generateMissingData);
    }
    get dni() {
        return '66';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '66', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class SchedulingApiShiftPacketShiftAssignedMemberIds extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'assignedMemberIds');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'assignedMemberIds',
            id: 'SHIFT_PACKET_SHIFT_ASSIGNED_MEMBER_IDS',
            primitiveType: PApiPrimitiveTypes.ApiList,
        });
        this.attributeInfoShiftPacketShiftAssignedMemberId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'shiftPacketShiftAssignedMemberId',
            id: 'SHIFT_PACKET_SHIFT_ASSIGNED_MEMBER_ID',
            primitiveType: PApiPrimitiveTypes.Id,
        });
    }
    wrapItem(item, _generateMissingData) {
        return Id.create(item);
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return true;
    }
    createInstance(removeDestroyedItems) {
        return new SchedulingApiShiftPacketShiftAssignedMemberIds(this.api, removeDestroyedItems);
    }
    get dni() {
        return '69';
    }
    createNewItem() {
        const newItemRaw = null;
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('assignedMemberIds');
        return newItem;
    }
}
export class SchedulingApiShiftNeededMembersCountConf extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiShiftNeededMembersCountConf);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'neededMembersCountConf',
            id: 'SHIFT_NEEDED_MEMBERS_COUNT_CONF',
            canEdit: function () {
                if (!((this.api.rightsService.userCanWrite(this.parent)))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
        });
        this.attributeInfoNeededMembersCount = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'neededMembersCount',
            id: 'SHIFT_NEEDED_MEMBERS_COUNT_CONF_NEEDED_MEMBERS_COUNT',
            primitiveType: PApiPrimitiveTypes.Integer,
        });
        this.attributeInfoPerXParticipants = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'perXParticipants',
            id: 'SHIFT_NEEDED_MEMBERS_COUNT_CONF_PER_X_PARTICIPANTS',
            primitiveType: PApiPrimitiveTypes.Integer,
        });
        this.attributeInfoIsZeroNotReachedMinParticipantsCount = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'isZeroNotReachedMinParticipantsCount',
            id: 'SHIFT_NEEDED_MEMBERS_COUNT_CONF_IS_ZERO_NOT_REACHED_MIN_PARTICIPANTS_COUNT',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this._updateRawData(Meta.createNewObject(true, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  See perXParticipants for documentation.
     *
     * @type {Integer}
     */
    get neededMembersCount() {
        return this.data[1];
    }
    set neededMembersCount(v) {
        this.setterImpl(1, v, 'neededMembersCount');
    }
    /**
     *  If this value is "null" then the final needed-members-count will be just "neededMembersCount". Otherwise it will be "neededMembersCount * ceil(participant-count / perXParticipants)". The calculated needed-members-count can be retrieved in shift.neededMembersCount.
     *
     * @type {Integer}
     */
    get perXParticipants() {
        return this.data[2];
    }
    set perXParticipants(v) {
        this.setterImpl(2, v, 'perXParticipants');
    }
    /**
     *  If "true" then needed-members-count will be zero when participants count has not reached min-participants-count.
     *
     * @type {boolean}
     */
    get isZeroNotReachedMinParticipantsCount() {
        return this.data[3];
    }
    set isZeroNotReachedMinParticipantsCount(v) {
        this.setterImpl(3, v, 'isZeroNotReachedMinParticipantsCount');
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 4);
            data[3] = false;
        }
        // propagate new raw data to children
    }
    get dni() {
        return '58';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '58', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class SchedulingApiShiftTime extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiShiftTime);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'time',
            id: 'SHIFT_TIME',
            canEdit: function () {
                if (!((this.api.rightsService.userCanWrite(this.parent)))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
        });
        this.attributeInfoStart = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'start',
            id: 'SHIFT_TIME_START',
            primitiveType: PApiPrimitiveTypes.LocalTime,
        });
        this.attributeInfoEnd = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'end',
            id: 'SHIFT_TIME_END',
            primitiveType: PApiPrimitiveTypes.LocalTime,
        });
        this._updateRawData(Meta.createNewObject(true, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  The time when this shift will start. Note that you can edit this value but not "shift.start".
     *
     * @type {LocalTime}
     */
    get start() {
        return this.data[1];
    }
    set start(v) {
        this.setterImpl(1, v, 'start');
    }
    /**
     *  The time when this shift will end. Note that you can edit this value but not "shift.end".
     *
     * @type {LocalTime}
     */
    get end() {
        return this.data[2];
    }
    set end(v) {
        this.setterImpl(2, v, 'end');
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 3);
        }
        // propagate new raw data to children
    }
    get dni() {
        return '59';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '59', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export var SchedulingApiWorkingTimeCreationMethod;
(function (SchedulingApiWorkingTimeCreationMethod) {
    SchedulingApiWorkingTimeCreationMethod[SchedulingApiWorkingTimeCreationMethod["TIME_STAMP"] = 1] = "TIME_STAMP";
    SchedulingApiWorkingTimeCreationMethod[SchedulingApiWorkingTimeCreationMethod["AUTOMATIC"] = 2] = "AUTOMATIC";
})(SchedulingApiWorkingTimeCreationMethod || (SchedulingApiWorkingTimeCreationMethod = {}));
export class SchedulingApiShiftRepetition extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiShiftRepetition);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'repetition',
            id: 'SHIFT_REPETITION',
        });
        this.attributeInfoType = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'type',
            id: 'SHIFT_REPETITION_TYPE',
            primitiveType: PApiPrimitiveTypes.Enum,
        });
        this.attributeInfoX = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'x',
            id: 'SHIFT_REPETITION_X',
            primitiveType: PApiPrimitiveTypes.Integer,
        });
        this.attributeInfoEndsAfterRepetitionCount = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'endsAfterRepetitionCount',
            id: 'SHIFT_REPETITION_ENDS_AFTER_REPETITION_COUNT',
            primitiveType: PApiPrimitiveTypes.Integer,
        });
        this.attributeInfoEndsAfterDate = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'endsAfterDate',
            id: 'SHIFT_REPETITION_ENDS_AFTER_DATE',
            primitiveType: PApiPrimitiveTypes.DateExclusiveEnd,
        });
        this.attributeInfoIsRepeatingOnMonday = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'isRepeatingOnMonday',
            id: 'SHIFT_REPETITION_ON_MONDAY',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoIsRepeatingOnTuesday = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'isRepeatingOnTuesday',
            id: 'SHIFT_REPETITION_ON_TUESDAY',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoIsRepeatingOnWednesday = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'isRepeatingOnWednesday',
            id: 'SHIFT_REPETITION_ON_WEDNESDAY',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoIsRepeatingOnThursday = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'isRepeatingOnThursday',
            id: 'SHIFT_REPETITION_ON_THURSDAY',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoIsRepeatingOnFriday = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'isRepeatingOnFriday',
            id: 'SHIFT_REPETITION_ON_FRIDAY',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoIsRepeatingOnSaturday = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'isRepeatingOnSaturday',
            id: 'SHIFT_REPETITION_ON_SATURDAY',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoIsRepeatingOnSunday = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'isRepeatingOnSunday',
            id: 'SHIFT_REPETITION_ON_SUNDAY',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.packetRepetitionWrapper = new SchedulingApiShiftRepetitionPacket(this.api);
        this._updateRawData(Meta.createNewObject(true, idRaw), true);
        // set parent attribute
        this.packetRepetitionWrapper.parent = this;
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  repetition type. "NONE" means no repetition
     *
     * @type {SchedulingApiShiftRepetitionType}
     */
    get type() {
        return this.data[1];
    }
    set type(v) {
        this.setterImpl(1, v, 'type');
    }
    /**
     *  This is the "x" value defined by the type property (e.g. EVERY_X_DAYS or EVERY_X_WEEKS).
     *
     * @type {Integer}
     */
    get x() {
        return this.data[2];
    }
    set x(v) {
        this.setterImpl(2, v, 'x');
    }
    /**
     *  Should the repetition end after a given count? If not, set to "0".
     *
     * @type {Integer}
     */
    get endsAfterRepetitionCount() {
        return this.data[3];
    }
    set endsAfterRepetitionCount(v) {
        this.setterImpl(3, v, 'endsAfterRepetitionCount');
    }
    /**
     *  Should the repetition end after a given date?
     *
     * @type {DateExclusiveEnd}
     */
    get endsAfterDate() {
        return this.data[4];
    }
    set endsAfterDate(v) {
        this.setterImpl(4, v, 'endsAfterDate');
    }
    /**
     *  The packet repetition pattern.
     */
    get packetRepetition() {
        return this.packetRepetitionWrapper;
    }
    set packetRepetitionTestSetter(v) {
        this.setterImpl(5, v.rawData, 'packetRepetition', () => { this.packetRepetitionWrapper = v; });
    }
    /**
     *  Is there a repetition on Monday? Only valid when type is "EVERY_X_WEEKS".
     *
     * @type {boolean}
     */
    get isRepeatingOnMonday() {
        return this.data[6];
    }
    set isRepeatingOnMonday(v) {
        this.setterImpl(6, v, 'isRepeatingOnMonday');
    }
    /**
     *  Is there a repetition on Tuesday? Only valid when type is "EVERY_X_WEEKS".
     *
     * @type {boolean}
     */
    get isRepeatingOnTuesday() {
        return this.data[7];
    }
    set isRepeatingOnTuesday(v) {
        this.setterImpl(7, v, 'isRepeatingOnTuesday');
    }
    /**
     *  Is there a repetition on Wednesday? Only valid when type is "EVERY_X_WEEKS".
     *
     * @type {boolean}
     */
    get isRepeatingOnWednesday() {
        return this.data[8];
    }
    set isRepeatingOnWednesday(v) {
        this.setterImpl(8, v, 'isRepeatingOnWednesday');
    }
    /**
     *  Is there a repetition on Thursday? Only valid when type is "EVERY_X_WEEKS".
     *
     * @type {boolean}
     */
    get isRepeatingOnThursday() {
        return this.data[9];
    }
    set isRepeatingOnThursday(v) {
        this.setterImpl(9, v, 'isRepeatingOnThursday');
    }
    /**
     *  Is there a repetition on Friday? Only valid when type is "EVERY_X_WEEKS".
     *
     * @type {boolean}
     */
    get isRepeatingOnFriday() {
        return this.data[10];
    }
    set isRepeatingOnFriday(v) {
        this.setterImpl(10, v, 'isRepeatingOnFriday');
    }
    /**
     *  Is there a repetition on Saturday? Only valid when type is "EVERY_X_WEEKS".
     *
     * @type {boolean}
     */
    get isRepeatingOnSaturday() {
        return this.data[11];
    }
    set isRepeatingOnSaturday(v) {
        this.setterImpl(11, v, 'isRepeatingOnSaturday');
    }
    /**
     *  Is there a repetition on Sunday? Only valid when type is "EVERY_X_WEEKS".
     *
     * @type {boolean}
     */
    get isRepeatingOnSunday() {
        return this.data[12];
    }
    set isRepeatingOnSunday(v) {
        this.setterImpl(12, v, 'isRepeatingOnSunday');
    }
    _fixIds(_idReplacements) {
        this.packetRepetitionWrapper._fixIds(_idReplacements);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 13);
            if (data[5] === null)
                data[5] = Meta.createNewObject(true);
            data[6] = false;
            data[7] = false;
            data[8] = false;
            data[9] = false;
            data[10] = false;
            data[11] = false;
            data[12] = false;
        }
        // propagate new raw data to children
        this.packetRepetitionWrapper._updateRawData(data ? data[5] : null, generateMissingData);
    }
    get dni() {
        return '61';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '61', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export var SchedulingApiShiftRepetitionType;
(function (SchedulingApiShiftRepetitionType) {
    SchedulingApiShiftRepetitionType[SchedulingApiShiftRepetitionType["NONE"] = 1] = "NONE";
    SchedulingApiShiftRepetitionType[SchedulingApiShiftRepetitionType["EVERY_X_DAYS"] = 2] = "EVERY_X_DAYS";
    SchedulingApiShiftRepetitionType[SchedulingApiShiftRepetitionType["EVERY_X_WEEKS"] = 3] = "EVERY_X_WEEKS";
    SchedulingApiShiftRepetitionType[SchedulingApiShiftRepetitionType["EVERY_X_MONTHS"] = 4] = "EVERY_X_MONTHS";
    SchedulingApiShiftRepetitionType[SchedulingApiShiftRepetitionType["EVERY_X_YEARS"] = 5] = "EVERY_X_YEARS";
})(SchedulingApiShiftRepetitionType || (SchedulingApiShiftRepetitionType = {}));
export class SchedulingApiShiftRepetitionPacket extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiShiftRepetitionPacket);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'packetRepetition',
            id: 'SHIFT_REPETITION_PACKET',
        });
        this.attributeInfoType = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'type',
            id: 'SHIFT_REPETITION_PACKET_TYPE',
            primitiveType: PApiPrimitiveTypes.Enum,
        });
        this.attributeInfoX = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'x',
            id: 'SHIFT_REPETITION_PACKET_X',
            primitiveType: PApiPrimitiveTypes.Integer,
        });
        this.attributeInfoEndsAfterRepetitionCount = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'endsAfterRepetitionCount',
            id: 'SHIFT_REPETITION_PACKET_ENDS_AFTER_REPETITION_COUNT',
            primitiveType: PApiPrimitiveTypes.Integer,
        });
        this.attributeInfoIsRepeatingOnMonday = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'isRepeatingOnMonday',
            id: 'SHIFT_REPETITION_PACKET_ON_MONDAY',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoIsRepeatingOnTuesday = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'isRepeatingOnTuesday',
            id: 'SHIFT_REPETITION_PACKET_ON_TUESDAY',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoIsRepeatingOnWednesday = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'isRepeatingOnWednesday',
            id: 'SHIFT_REPETITION_PACKET_ON_WEDNESDAY',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoIsRepeatingOnThursday = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'isRepeatingOnThursday',
            id: 'SHIFT_REPETITION_PACKET_ON_THURSDAY',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoIsRepeatingOnFriday = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'isRepeatingOnFriday',
            id: 'SHIFT_REPETITION_PACKET_ON_FRIDAY',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoIsRepeatingOnSaturday = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'isRepeatingOnSaturday',
            id: 'SHIFT_REPETITION_PACKET_ON_SATURDAY',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoIsRepeatingOnSunday = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'isRepeatingOnSunday',
            id: 'SHIFT_REPETITION_PACKET_ON_SUNDAY',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this._updateRawData(Meta.createNewObject(true, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  repetition type. "NONE" means no repetition
     *
     * @type {SchedulingApiShiftRepetitionType}
     */
    get type() {
        return this.data[1];
    }
    set type(v) {
        this.setterImpl(1, v, 'type');
    }
    /**
     *  This is the "x" value defined by the type property (e.g. EVERY_X_DAYS or EVERY_X_WEEKS).
     *
     * @type {Integer}
     */
    get x() {
        return this.data[2];
    }
    set x(v) {
        this.setterImpl(2, v, 'x');
    }
    /**
     *  Should the repetition end after a given count? If not, set to "0".
     *
     * @type {Integer}
     */
    get endsAfterRepetitionCount() {
        return this.data[3];
    }
    set endsAfterRepetitionCount(v) {
        this.setterImpl(3, v, 'endsAfterRepetitionCount');
    }
    /**
     *  Is there a repetition on Monday? Only valid when type is "EVERY_X_WEEKS".
     *
     * @type {boolean}
     */
    get isRepeatingOnMonday() {
        return this.data[4];
    }
    set isRepeatingOnMonday(v) {
        this.setterImpl(4, v, 'isRepeatingOnMonday');
    }
    /**
     *  Is there a repetition on Tuesday? Only valid when type is "EVERY_X_WEEKS".
     *
     * @type {boolean}
     */
    get isRepeatingOnTuesday() {
        return this.data[5];
    }
    set isRepeatingOnTuesday(v) {
        this.setterImpl(5, v, 'isRepeatingOnTuesday');
    }
    /**
     *  Is there a repetition on Wednesday? Only valid when type is "EVERY_X_WEEKS".
     *
     * @type {boolean}
     */
    get isRepeatingOnWednesday() {
        return this.data[6];
    }
    set isRepeatingOnWednesday(v) {
        this.setterImpl(6, v, 'isRepeatingOnWednesday');
    }
    /**
     *  Is there a repetition on Thursday? Only valid when type is "EVERY_X_WEEKS".
     *
     * @type {boolean}
     */
    get isRepeatingOnThursday() {
        return this.data[7];
    }
    set isRepeatingOnThursday(v) {
        this.setterImpl(7, v, 'isRepeatingOnThursday');
    }
    /**
     *  Is there a repetition on Friday? Only valid when type is "EVERY_X_WEEKS".
     *
     * @type {boolean}
     */
    get isRepeatingOnFriday() {
        return this.data[8];
    }
    set isRepeatingOnFriday(v) {
        this.setterImpl(8, v, 'isRepeatingOnFriday');
    }
    /**
     *  Is there a repetition on Saturday? Only valid when type is "EVERY_X_WEEKS".
     *
     * @type {boolean}
     */
    get isRepeatingOnSaturday() {
        return this.data[9];
    }
    set isRepeatingOnSaturday(v) {
        this.setterImpl(9, v, 'isRepeatingOnSaturday');
    }
    /**
     *  Is there a repetition on Sunday? Only valid when type is "EVERY_X_WEEKS".
     *
     * @type {boolean}
     */
    get isRepeatingOnSunday() {
        return this.data[10];
    }
    set isRepeatingOnSunday(v) {
        this.setterImpl(10, v, 'isRepeatingOnSunday');
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 11);
            data[4] = false;
            data[5] = false;
            data[6] = false;
            data[7] = false;
            data[8] = false;
            data[9] = false;
            data[10] = false;
        }
        // propagate new raw data to children
    }
    get dni() {
        return '91';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '91', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class SchedulingApiWorkingTimesBase extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'workingTimes');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'workingTimes',
            id: 'WORKING_TIMES',
            primitiveType: PApiPrimitiveTypes.ApiList,
            canEdit: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return true;
                }
                return false;
            },
        });
    }
    wrapItem(item, _generateMissingData) {
        const newWrapper = new SchedulingApiWorkingTime(this.api);
        newWrapper._updateRawData(item, _generateMissingData);
        return newWrapper;
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return false;
    }
    createInstance(removeDestroyedItems) {
        return new SchedulingApiWorkingTimes(this.api, removeDestroyedItems);
    }
    get dni() {
        return '3';
    }
    createNewItem(id = null) {
        const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('workingTimes');
        return newItem;
    }
}
export class SchedulingApiWorkingTimeBase extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiWorkingTime);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'workingTime',
            id: 'WORKING_TIME',
        });
        this.attributeInfoComment = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'comment',
            id: 'WORKING_TIME_COMMENT',
            primitiveType: PApiPrimitiveTypes.string,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoRegularPauseDuration = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'regularPauseDuration',
            id: 'WORKING_TIME_REGULAR_PAUSE_DURATION',
            primitiveType: PApiPrimitiveTypes.Duration,
        });
        this.attributeInfoMemberId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'memberId',
            id: 'WORKING_TIME_MEMBER_ID',
            primitiveType: PApiPrimitiveTypes.Id,
        });
        this.attributeInfoAutomaticPauseDuration = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'automaticPauseDuration',
            id: 'WORKING_TIME_AUTOMATIC_PAUSE_DURATION',
            primitiveType: PApiPrimitiveTypes.Duration,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoPlannedStart = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'plannedStart',
            id: 'WORKING_TIME_PLANNED_START',
            primitiveType: PApiPrimitiveTypes.DateTime,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoPlannedEnd = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'plannedEnd',
            id: 'WORKING_TIME_PLANNED_END',
            primitiveType: PApiPrimitiveTypes.DateTime,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoWhenMemberStampedStart = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'whenMemberStampedStart',
            id: 'WORKING_TIME_WHEN_MEMBER_STAMPED_START',
            primitiveType: PApiPrimitiveTypes.DateTime,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoWhenMemberStampedEnd = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'whenMemberStampedEnd',
            id: 'WORKING_TIME_WHEN_MEMBER_STAMPED_END',
            primitiveType: PApiPrimitiveTypes.DateTime,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoHourlyEarnings = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'hourlyEarnings',
            id: 'WORKING_TIME_HOURLY_EARNINGS',
            primitiveType: PApiPrimitiveTypes.Currency,
        });
        this.attributeInfoWarnUnplannedWork = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'warnUnplannedWork',
            id: 'WORKING_TIME_WARN_UNPLANNED_WORK',
            primitiveType: PApiPrimitiveTypes.boolean,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoWarnStampedNotCurrentTime = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'warnStampedNotCurrentTime',
            id: 'WORKING_TIME_WARN_STAMPED_NOT_CURRENT_TIME',
            primitiveType: PApiPrimitiveTypes.boolean,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoWarnStampedNotShiftTime = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'warnStampedNotShiftTime',
            id: 'WORKING_TIME_WARN_STAMPED_NOT_SHIFT_TIME',
            primitiveType: PApiPrimitiveTypes.boolean,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoShiftModelId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'shiftModelId',
            id: 'WORKING_TIME_SHIFT_MODEL_ID',
            primitiveType: PApiPrimitiveTypes.Id,
        });
        this.timeWrapper = new SchedulingApiWorkingTimeTime(this.api);
        this.memberIdWrapper = null;
        this.shiftModelIdWrapper = null;
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
        this.timeWrapper.parent = this;
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  Comment of member. Editable only by member.
     *
     * @type {string}
     */
    get comment() {
        return this.data[1];
    }
    set commentTestSetter(v) {
        this.setterImpl(1, v, 'comment');
    }
    /**
     *  Time of working time.
     */
    get time() {
        return this.timeWrapper;
    }
    set timeTestSetter(v) {
        this.setterImpl(2, v.rawData, 'time', () => { this.timeWrapper = v; });
    }
    /**
     *  Regular pause duration (done by member).
     *
     * @type {Duration}
     */
    get regularPauseDuration() {
        return this.data[3];
    }
    set regularPauseDuration(v) {
        this.setterImpl(3, v, 'regularPauseDuration');
    }
    /**
     *  The member id to which this working time belongs.
     *
     * @type {Id}
     */
    get memberId() {
        return this.memberIdWrapper;
    }
    set memberId(v) {
        this.setterImpl(4, v, 'memberId', () => { this.memberIdWrapper = v; });
    }
    /**
     *  Automatic pause duration (added by Dr. Plano).
     *
     * @type {Duration}
     */
    get automaticPauseDuration() {
        return this.data[5];
    }
    set automaticPauseDurationTestSetter(v) {
        this.setterImpl(5, v, 'automaticPauseDuration');
    }
    /**
     *  Start time of shift (inclusive). Is "null" if no shift is associated with this working-time. Read only.
     *
     * @type {DateTime}
     */
    get plannedStart() {
        return this.data[6];
    }
    set plannedStartTestSetter(v) {
        this.setterImpl(6, v, 'plannedStart');
    }
    /**
     *  End time of shift (exclusive). Is "null" if no shift is associated with this working-time. Read only.
     *
     * @type {DateTime}
     */
    get plannedEnd() {
        return this.data[7];
    }
    set plannedEndTestSetter(v) {
        this.setterImpl(7, v, 'plannedEnd');
    }
    /**
     *  When was the start-time stamped (using time-stamp). This value can be for any case "null" (considering legacy data for which we have not stored this value).
     *
     * @type {DateTime}
     */
    get whenMemberStampedStart() {
        return this.data[8];
    }
    set whenMemberStampedStartTestSetter(v) {
        this.setterImpl(8, v, 'whenMemberStampedStart');
    }
    /**
     *  When was the end-time stamped (using time-stamp). This value can be for any case "null" (considering legacy data for which we have not stored this value).
     *
     * @type {DateTime}
     */
    get whenMemberStampedEnd() {
        return this.data[9];
    }
    set whenMemberStampedEndTestSetter(v) {
        this.setterImpl(9, v, 'whenMemberStampedEnd');
    }
    /**
     *  Hourly earnings.
     *
     * @type {Currency}
     */
    get hourlyEarnings() {
        return this.data[10];
    }
    set hourlyEarnings(v) {
        this.setterImpl(10, v, 'hourlyEarnings');
    }
    /**
     *  Unplanned work warning? Read only.
     *
     * @type {boolean}
     */
    get warnUnplannedWork() {
        return this.data[11];
    }
    set warnUnplannedWorkTestSetter(v) {
        this.setterImpl(11, v, 'warnUnplannedWork');
    }
    /**
     *  Stamped not current time warning? Read only.
     *
     * @type {boolean}
     */
    get warnStampedNotCurrentTime() {
        return this.data[12];
    }
    set warnStampedNotCurrentTimeTestSetter(v) {
        this.setterImpl(12, v, 'warnStampedNotCurrentTime');
    }
    /**
     *  Stamped not shift time warning? Read only.
     *
     * @type {boolean}
     */
    get warnStampedNotShiftTime() {
        return this.data[13];
    }
    set warnStampedNotShiftTimeTestSetter(v) {
        this.setterImpl(13, v, 'warnStampedNotShiftTime');
    }
    /**
     *  The shift model id to which this working time belongs. Read only.
     *
     * @type {Id}
     */
    get shiftModelId() {
        return this.shiftModelIdWrapper;
    }
    set shiftModelId(v) {
        this.setterImpl(14, v, 'shiftModelId', () => { this.shiftModelIdWrapper = v; });
    }
    _fixIds(_idReplacements) {
        this.timeWrapper._fixIds(_idReplacements);
        this.data[4] = Meta.getReplacedId(this.data[4], _idReplacements);
        this.memberIdWrapper = Id.create(this.data[4]);
        this.data[14] = Meta.getReplacedId(this.data[14], _idReplacements);
        this.shiftModelIdWrapper = Id.create(this.data[14]);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 15);
            if (data[2] === null)
                data[2] = Meta.createNewObject(true);
            data[11] = false;
            data[12] = false;
            data[13] = false;
        }
        // propagate new raw data to children
        this.timeWrapper._updateRawData(data ? data[2] : null, generateMissingData);
        if (!Meta.isSameId(data ? data[4] : null, this.memberIdWrapper))
            this.memberIdWrapper = data && data[4] ? Id.create(data[4]) : null;
        if (!Meta.isSameId(data ? data[14] : null, this.shiftModelIdWrapper))
            this.shiftModelIdWrapper = data && data[14] ? Id.create(data[14]) : null;
    }
    get dni() {
        return '109';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '109', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class SchedulingApiWorkingTimeTime extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiWorkingTimeTime);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'time',
            id: 'WORKING_TIME_TIME',
        });
        this.attributeInfoStart = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'start',
            id: 'WORKING_TIME_TIME_START',
            primitiveType: PApiPrimitiveTypes.DateTime,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(() => this.end, false, PApiPrimitiveTypes.DateTime, 'WORKING_TIME_TIME_END', undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoEnd = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'end',
            id: 'WORKING_TIME_TIME_END',
            primitiveType: PApiPrimitiveTypes.DateTime,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(() => this.start, false, PApiPrimitiveTypes.DateTime, 'WORKING_TIME_TIME_START', undefined);
                        return null;
                    },
                ];
            },
        });
        this._updateRawData(Meta.createNewObject(true, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  Start time of working-time (inclusive).
     *
     * @type {DateTime}
     */
    get start() {
        return this.data[1];
    }
    set start(v) {
        this.setterImpl(1, v, 'start');
    }
    /**
     *  End time of working-time (exclusive).
     *
     * @type {DateTime}
     */
    get end() {
        return this.data[2];
    }
    set end(v) {
        this.setterImpl(2, v, 'end');
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 3);
        }
        // propagate new raw data to children
    }
    get dni() {
        return '111';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '111', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class SchedulingApiShiftExchangesBase extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'shiftExchanges');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'shiftExchanges',
            id: 'SHIFT_EXCHANGES',
            primitiveType: PApiPrimitiveTypes.ApiList,
        });
    }
    wrapItem(item, _generateMissingData) {
        const newWrapper = new SchedulingApiShiftExchange(this.api);
        newWrapper._updateRawData(item, _generateMissingData);
        return newWrapper;
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return false;
    }
    createInstance(removeDestroyedItems) {
        return new SchedulingApiShiftExchanges(this.api, removeDestroyedItems);
    }
    get dni() {
        return '4';
    }
    createNewItem(id = null) {
        const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('shiftExchanges');
        return newItem;
    }
}
export class SchedulingApiShiftExchangeBase extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiShiftExchange);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'shiftExchange',
            id: 'SHIFT_EXCHANGE',
        });
        this.attributeInfoTodoCount = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'todoCount',
            id: 'SHIFT_EXCHANGE_TODO_COUNT',
            primitiveType: PApiPrimitiveTypes.Integer,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoState = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'state',
            id: 'SHIFT_EXCHANGE_STATE',
            primitiveType: PApiPrimitiveTypes.Enum,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoCommunicationInfo = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'communicationInfo',
            id: 'SHIFT_EXCHANGE_COMMUNICATION_INFO',
            primitiveType: PApiPrimitiveTypes.Enum,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoLastUpdate = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'lastUpdate',
            id: 'SHIFT_EXCHANGE_LAST_UPDATE',
            primitiveType: PApiPrimitiveTypes.DateTime,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoRequesterRelationship = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'requesterRelationship',
            id: 'SHIFT_EXCHANGE_REQUESTER_RELATIONSHIP',
            primitiveType: PApiPrimitiveTypes.Enum,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoIsIllness = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'isIllness',
            id: 'SHIFT_EXCHANGE_IS_ILLNESS',
            primitiveType: PApiPrimitiveTypes.boolean,
            canEdit: function () {
                console.error('AttributeInfo for /scheduling -> SHIFT_EXCHANGE_IS_ILLNESS is not implemented yet. Please create a Jira issue in the current Sprint: https://drplano.atlassian.net/secure/CreateIssueDetails!init.jspa?pid=10003&issuetype=10101&summary=' + encodeURI('AttributeInfo for /scheduling -> SHIFT_EXCHANGE_IS_ILLNESS is not implemented yet') + '&assignee=557058%3Ae58fd015-3e1d-44b8-9131-aef274b1c571');
                return true;
            },
            readMode: function () {
                return false;
            },
        });
        this.attributeInfoIndisposedMemberId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'indisposedMemberId',
            id: 'SHIFT_EXCHANGE_INDISPOSED_MEMBER_ID',
            primitiveType: PApiPrimitiveTypes.Id,
        });
        this.attributeInfoNewAssignedMemberId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'newAssignedMemberId',
            id: 'SHIFT_EXCHANGE_NEW_ASSIGNED_MEMBER_ID',
            primitiveType: PApiPrimitiveTypes.Id,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoIndisposedMemberPrefersSwapping = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'indisposedMemberPrefersSwapping',
            id: 'SHIFT_EXCHANGE_INDISPOSED_MEMBER_PREFERS_SWAPPING',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoDeadline = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'deadline',
            id: 'SHIFT_EXCHANGE_DEADLINE',
            primitiveType: PApiPrimitiveTypes.DateTime,
            canEdit: function () {
                console.error('AttributeInfo for /scheduling -> SHIFT_EXCHANGE_DEADLINE is not implemented yet. Please create a Jira issue in the current Sprint: https://drplano.atlassian.net/secure/CreateIssueDetails!init.jspa?pid=10003&issuetype=10101&summary=' + encodeURI('AttributeInfo for /scheduling -> SHIFT_EXCHANGE_DEADLINE is not implemented yet') + '&assignee=557058%3Ae58fd015-3e1d-44b8-9131-aef274b1c571');
                return true;
            },
            readMode: function () {
                return false;
            },
        });
        this.attributeInfoMemberIdAddressedTo = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'memberIdAddressedTo',
            id: 'SHIFT_EXCHANGE_MEMBER_ID_ADDRESSED_TO',
            primitiveType: PApiPrimitiveTypes.Id,
            canEdit: function () {
                console.error('AttributeInfo for /scheduling -> SHIFT_EXCHANGE_MEMBER_ID_ADDRESSED_TO is not implemented yet. Please create a Jira issue in the current Sprint: https://drplano.atlassian.net/secure/CreateIssueDetails!init.jspa?pid=10003&issuetype=10101&summary=' + encodeURI('AttributeInfo for /scheduling -> SHIFT_EXCHANGE_MEMBER_ID_ADDRESSED_TO is not implemented yet') + '&assignee=557058%3Ae58fd015-3e1d-44b8-9131-aef274b1c571');
                return true;
            },
            readMode: function () {
                return false;
            },
        });
        this.attributeInfoIllnessResponderCommentToMembers = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'illnessResponderCommentToMembers',
            id: 'SHIFT_EXCHANGE_ILLNESS_RESPONDER_COMMENT_TO_MEMBERS',
            primitiveType: PApiPrimitiveTypes.string,
            canEdit: function () {
                console.error('AttributeInfo for /scheduling -> SHIFT_EXCHANGE_ILLNESS_RESPONDER_COMMENT_TO_MEMBERS is not implemented yet. Please create a Jira issue in the current Sprint: https://drplano.atlassian.net/secure/CreateIssueDetails!init.jspa?pid=10003&issuetype=10101&summary=' + encodeURI('AttributeInfo for /scheduling -> SHIFT_EXCHANGE_ILLNESS_RESPONDER_COMMENT_TO_MEMBERS is not implemented yet') + '&assignee=557058%3Ae58fd015-3e1d-44b8-9131-aef274b1c571');
                return true;
            },
            readMode: function () {
                return false;
            },
        });
        this.attributeInfoIndisposedMemberComment = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'indisposedMemberComment',
            id: 'SHIFT_EXCHANGE_INDISPOSED_MEMBER_COMMENT',
            primitiveType: PApiPrimitiveTypes.string,
            show: function () {
                console.error('AttributeInfo for /scheduling -> SHIFT_EXCHANGE_INDISPOSED_MEMBER_COMMENT is not implemented yet. Please create a Jira issue in the current Sprint: https://drplano.atlassian.net/secure/CreateIssueDetails!init.jspa?pid=10003&issuetype=10101&summary=' + encodeURI('AttributeInfo for /scheduling -> SHIFT_EXCHANGE_INDISPOSED_MEMBER_COMMENT is not implemented yet') + '&assignee=557058%3Ae58fd015-3e1d-44b8-9131-aef274b1c571');
                return true;
            },
            canEdit: function () {
                console.error('AttributeInfo for /scheduling -> SHIFT_EXCHANGE_INDISPOSED_MEMBER_COMMENT is not implemented yet. Please create a Jira issue in the current Sprint: https://drplano.atlassian.net/secure/CreateIssueDetails!init.jspa?pid=10003&issuetype=10101&summary=' + encodeURI('AttributeInfo for /scheduling -> SHIFT_EXCHANGE_INDISPOSED_MEMBER_COMMENT is not implemented yet') + '&assignee=557058%3Ae58fd015-3e1d-44b8-9131-aef274b1c571');
                return true;
            },
            readMode: function () {
                return false;
            },
        });
        this.attributeInfoShowOnDesk = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'showOnDesk',
            id: 'SHIFT_EXCHANGE_SHOW_ON_DESK',
            primitiveType: PApiPrimitiveTypes.boolean,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoShowInList = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'showInList',
            id: 'SHIFT_EXCHANGE_SHOW_IN_LIST',
            primitiveType: PApiPrimitiveTypes.boolean,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoCloseShiftExchange = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'closeShiftExchange',
            id: 'SHIFT_EXCHANGE_CLOSE_SHIFT_EXCHANGE',
            primitiveType: PApiPrimitiveTypes.boolean,
            show: function () {
                console.error('AttributeInfo for /scheduling -> SHIFT_EXCHANGE_CLOSE_SHIFT_EXCHANGE is not implemented yet. Please create a Jira issue in the current Sprint: https://drplano.atlassian.net/secure/CreateIssueDetails!init.jspa?pid=10003&issuetype=10101&summary=' + encodeURI('AttributeInfo for /scheduling -> SHIFT_EXCHANGE_CLOSE_SHIFT_EXCHANGE is not implemented yet') + '&assignee=557058%3Ae58fd015-3e1d-44b8-9131-aef274b1c571');
                return true;
            },
            canEdit: function () {
                console.error('AttributeInfo for /scheduling -> SHIFT_EXCHANGE_CLOSE_SHIFT_EXCHANGE is not implemented yet. Please create a Jira issue in the current Sprint: https://drplano.atlassian.net/secure/CreateIssueDetails!init.jspa?pid=10003&issuetype=10101&summary=' + encodeURI('AttributeInfo for /scheduling -> SHIFT_EXCHANGE_CLOSE_SHIFT_EXCHANGE is not implemented yet') + '&assignee=557058%3Ae58fd015-3e1d-44b8-9131-aef274b1c571');
                return true;
            },
            readMode: function () {
                return false;
            },
        });
        this.attributeInfoOpenShiftExchange = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'openShiftExchange',
            id: 'SHIFT_EXCHANGE_OPEN_SHIFT_EXCHANGE',
            primitiveType: PApiPrimitiveTypes.boolean,
            show: function () {
                console.error('AttributeInfo for /scheduling -> SHIFT_EXCHANGE_OPEN_SHIFT_EXCHANGE is not implemented yet. Please create a Jira issue in the current Sprint: https://drplano.atlassian.net/secure/CreateIssueDetails!init.jspa?pid=10003&issuetype=10101&summary=' + encodeURI('AttributeInfo for /scheduling -> SHIFT_EXCHANGE_OPEN_SHIFT_EXCHANGE is not implemented yet') + '&assignee=557058%3Ae58fd015-3e1d-44b8-9131-aef274b1c571');
                return true;
            },
            canEdit: function () {
                console.error('AttributeInfo for /scheduling -> SHIFT_EXCHANGE_OPEN_SHIFT_EXCHANGE is not implemented yet. Please create a Jira issue in the current Sprint: https://drplano.atlassian.net/secure/CreateIssueDetails!init.jspa?pid=10003&issuetype=10101&summary=' + encodeURI('AttributeInfo for /scheduling -> SHIFT_EXCHANGE_OPEN_SHIFT_EXCHANGE is not implemented yet') + '&assignee=557058%3Ae58fd015-3e1d-44b8-9131-aef274b1c571');
                return true;
            },
            readMode: function () {
                return false;
            },
        });
        this.shiftRefsWrapper = new SchedulingApiShiftExchangeShiftRefs(this.api, false);
        this.swappedShiftRefsWrapper = new SchedulingApiShiftExchangeSwappedShiftRefs(this.api, false);
        this.indisposedMemberIdWrapper = null;
        this.newAssignedMemberIdWrapper = null;
        this.memberIdAddressedToWrapper = null;
        this.communicationsWrapper = new SchedulingApiShiftExchangeCommunications(this.api, false);
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
        this.shiftRefsWrapper.parent = this;
        this.swappedShiftRefsWrapper.parent = this;
        this.communicationsWrapper.parent = this;
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  Todo count to be shown as badge on the shift-exchange item. Read-only.
     *
     * @type {Integer}
     */
    get todoCount() {
        return this.data[1];
    }
    set todoCountTestSetter(v) {
        this.setterImpl(1, v, 'todoCount');
    }
    /**
     *  Global state of this shift-exchange. This value is the same independent of the requester. See in contrast "communicationInfo". This value is read-only and is automatically updated by backend.
     *
     * @type {SchedulingApiShiftExchangeState}
     */
    get state() {
        return this.data[2];
    }
    set stateTestSetter(v) {
        this.setterImpl(2, v, 'state');
    }
    /**
     *  Info about current communication state from the perspective of current requester. Read-only.
     *
     * @type {SchedulingApiShiftExchangeCommunicationInfo}
     */
    get communicationInfo() {
        return this.data[3];
    }
    set communicationInfoTestSetter(v) {
        this.setterImpl(3, v, 'communicationInfo');
    }
    /**
     *  When was this item last updated? Note that this is from perspective of current requester. A member who only sees one communication will not be notified of any updated concerning other communications. Read-only.
     *
     * @type {DateTime}
     */
    get lastUpdate() {
        return this.data[4];
    }
    set lastUpdateTestSetter(v) {
        this.setterImpl(4, v, 'lastUpdate');
    }
    /**
     *  What's the requester's relationship to this shift-exchange? Read-only.
     *
     * @type {SchedulingApiShiftExchangeRequesterRelationship}
     */
    get requesterRelationship() {
        return this.data[5];
    }
    set requesterRelationshipTestSetter(v) {
        this.setterImpl(5, v, 'requesterRelationship');
    }
    /**
     *  Is the cause of this shift-exchange an illness?
     *
     * @type {boolean}
     */
    get isIllness() {
        return this.data[6];
    }
    set isIllness(v) {
        this.setterImpl(6, v, 'isIllness');
    }
    /**
     *  References to shift(s) for which this shift-exchange was created.
     */
    get shiftRefs() {
        return this.shiftRefsWrapper;
    }
    set shiftRefsTestSetter(v) {
        this.setterImpl(7, v.rawData, 'shiftRefs', () => { this.shiftRefsWrapper = v; });
    }
    /**
     *  Reference to shift(s) being swapped.
     */
    get swappedShiftRefs() {
        return this.swappedShiftRefsWrapper;
    }
    set swappedShiftRefsTestSetter(v) {
        this.setterImpl(8, v.rawData, 'swappedShiftRefs', () => { this.swappedShiftRefsWrapper = v; });
    }
    /**
     *  The id of the member who was originally assigned and who can do this shift and needs a replacement. Can only be set during item creation. A requester with assignment-process rights may set here the id of another member. Otherwise this has to be the id of the requester.
     *
     * @type {Id}
     */
    get indisposedMemberId() {
        return this.indisposedMemberIdWrapper;
    }
    set indisposedMemberId(v) {
        this.setterImpl(9, v, 'indisposedMemberId', () => { this.indisposedMemberIdWrapper = v; });
    }
    /**
     *  After a successful shift-exchange this property contains the id of the member who is now assigned to the shift.
     *
     * @type {Id}
     */
    get newAssignedMemberId() {
        return this.newAssignedMemberIdWrapper;
    }
    set newAssignedMemberIdTestSetter(v) {
        this.setterImpl(10, v, 'newAssignedMemberId', () => { this.newAssignedMemberIdWrapper = v; });
    }
    /**
     *  Does the indisposed member prefers swapping? If no then he prefers that the shift is just taken.
     *
     * @type {boolean}
     */
    get indisposedMemberPrefersSwapping() {
        return this.data[11];
    }
    set indisposedMemberPrefersSwapping(v) {
        this.setterImpl(11, v, 'indisposedMemberPrefersSwapping');
    }
    /**
     *  The deadline for this shift-exchange until when the shift-exchange should be successful.
     *
     * @type {DateTime}
     */
    get deadline() {
        return this.data[12];
    }
    set deadline(v) {
        this.setterImpl(12, v, 'deadline');
    }
    /**
     *  Id of the member to whom this shift-exchange is addressed. If not set it is offered to everyone who could take this shift.
     *
     * @type {Id}
     */
    get memberIdAddressedTo() {
        return this.memberIdAddressedToWrapper;
    }
    set memberIdAddressedTo(v) {
        this.setterImpl(13, v, 'memberIdAddressedTo', () => { this.memberIdAddressedToWrapper = v; });
    }
    /**
     *  Comment to members by the admin who responded this illness inquiry.
     *
     * @type {string}
     */
    get illnessResponderCommentToMembers() {
        return this.data[14];
    }
    set illnessResponderCommentToMembers(v) {
        this.setterImpl(14, v, 'illnessResponderCommentToMembers');
    }
    /**
     *  Comment of the indisposed member.
     *
     * @type {string}
     */
    get indisposedMemberComment() {
        return this.data[15];
    }
    set indisposedMemberComment(v) {
        this.setterImpl(15, v, 'indisposedMemberComment');
    }
    /**
     *  Should this shift-exchange been shown on requester's desk? Read-only.
     *
     * @type {boolean}
     */
    get showOnDesk() {
        return this.data[16];
    }
    set showOnDeskTestSetter(v) {
        this.setterImpl(16, v, 'showOnDesk');
    }
    /**
     *  Should this shift-exchange been shown in the shift-exchange list? Read-only.
     *
     * @type {boolean}
     */
    get showInList() {
        return this.data[17];
    }
    set showInListTestSetter(v) {
        this.setterImpl(17, v, 'showInList');
    }
    /**
     * (Detail)  List of communications with other members about this shift-exchange. Only send when data="shiftExchange" or when detailed view of this item was requested.
     */
    get communications() {
        return this.communicationsWrapper;
    }
    set communicationsTestSetter(v) {
        this.setterImpl(18, v.rawData, 'communications', () => { this.communicationsWrapper = v; });
    }
    /**
     * (Detail)  When this shift-exchange can be close this has the value "false". Set it to "true" to close this shift-exchange.
     *
     * @type {boolean}
     */
    get closeShiftExchange() {
        return this.data[19];
    }
    set closeShiftExchange(v) {
        this.setterImpl(19, v, 'closeShiftExchange');
    }
    /**
     * (Detail)  When this shift-exchange can be opened this has the value "false". Set it to "true" to open this shift-exchange.
     *
     * @type {boolean}
     */
    get openShiftExchange() {
        return this.data[20];
    }
    set openShiftExchange(v) {
        this.setterImpl(20, v, 'openShiftExchange');
    }
    _fixIds(_idReplacements) {
        this.shiftRefsWrapper._fixIds(_idReplacements);
        this.swappedShiftRefsWrapper._fixIds(_idReplacements);
        this.data[9] = Meta.getReplacedId(this.data[9], _idReplacements);
        this.indisposedMemberIdWrapper = Id.create(this.data[9]);
        this.data[10] = Meta.getReplacedId(this.data[10], _idReplacements);
        this.newAssignedMemberIdWrapper = Id.create(this.data[10]);
        this.data[13] = Meta.getReplacedId(this.data[13], _idReplacements);
        this.memberIdAddressedToWrapper = Id.create(this.data[13]);
        this.communicationsWrapper._fixIds(_idReplacements);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 21);
            data[6] = false;
            if (data[7] === null)
                data[7] = Meta.createNewList();
            if (data[8] === null)
                data[8] = Meta.createNewList();
            data[11] = false;
            data[16] = false;
            data[17] = false;
            if (data[18] === null)
                data[18] = Meta.createNewList();
            data[19] = false;
            data[20] = false;
        }
        // propagate new raw data to children
        this.shiftRefsWrapper._updateRawData(data ? data[7] : null, generateMissingData);
        this.swappedShiftRefsWrapper._updateRawData(data ? data[8] : null, generateMissingData);
        if (!Meta.isSameId(data ? data[9] : null, this.indisposedMemberIdWrapper))
            this.indisposedMemberIdWrapper = data && data[9] ? Id.create(data[9]) : null;
        if (!Meta.isSameId(data ? data[10] : null, this.newAssignedMemberIdWrapper))
            this.newAssignedMemberIdWrapper = data && data[10] ? Id.create(data[10]) : null;
        if (!Meta.isSameId(data ? data[13] : null, this.memberIdAddressedToWrapper))
            this.memberIdAddressedToWrapper = data && data[13] ? Id.create(data[13]) : null;
        this.communicationsWrapper._updateRawData(data ? data[18] : null, generateMissingData);
    }
    get dni() {
        return '196';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '196', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export var SchedulingApiShiftExchangeState;
(function (SchedulingApiShiftExchangeState) {
    SchedulingApiShiftExchangeState[SchedulingApiShiftExchangeState["SWAP_SUCCESSFUL"] = 1] = "SWAP_SUCCESSFUL";
    SchedulingApiShiftExchangeState[SchedulingApiShiftExchangeState["TAKE_SUCCESSFUL"] = 2] = "TAKE_SUCCESSFUL";
    SchedulingApiShiftExchangeState[SchedulingApiShiftExchangeState["ILLNESS_NEEDS_CONFIRMATION"] = 3] = "ILLNESS_NEEDS_CONFIRMATION";
    SchedulingApiShiftExchangeState[SchedulingApiShiftExchangeState["ILLNESS_DECLINED"] = 4] = "ILLNESS_DECLINED";
    SchedulingApiShiftExchangeState[SchedulingApiShiftExchangeState["ILLNESS_ACCEPT_WITHOUT_SHIFT_EXCHANGE"] = 5] = "ILLNESS_ACCEPT_WITHOUT_SHIFT_EXCHANGE";
    SchedulingApiShiftExchangeState[SchedulingApiShiftExchangeState["ACTIVE"] = 6] = "ACTIVE";
    SchedulingApiShiftExchangeState[SchedulingApiShiftExchangeState["FAILED_DEADLINE_PASSED"] = 7] = "FAILED_DEADLINE_PASSED";
    SchedulingApiShiftExchangeState[SchedulingApiShiftExchangeState["FAILED_SHIFTS_STARTED"] = 8] = "FAILED_SHIFTS_STARTED";
    SchedulingApiShiftExchangeState[SchedulingApiShiftExchangeState["FAILED_EVERYONE_DECLINED"] = 9] = "FAILED_EVERYONE_DECLINED";
    SchedulingApiShiftExchangeState[SchedulingApiShiftExchangeState["REMOVED_FROM_SHIFT"] = 10] = "REMOVED_FROM_SHIFT";
    SchedulingApiShiftExchangeState[SchedulingApiShiftExchangeState["SHIFTS_REMOVED"] = 11] = "SHIFTS_REMOVED";
    SchedulingApiShiftExchangeState[SchedulingApiShiftExchangeState["CLOSED_MANUALLY"] = 12] = "CLOSED_MANUALLY";
})(SchedulingApiShiftExchangeState || (SchedulingApiShiftExchangeState = {}));
export var SchedulingApiShiftExchangeCommunicationInfo;
(function (SchedulingApiShiftExchangeCommunicationInfo) {
    SchedulingApiShiftExchangeCommunicationInfo[SchedulingApiShiftExchangeCommunicationInfo["NOT_ACTIVE"] = 1] = "NOT_ACTIVE";
    SchedulingApiShiftExchangeCommunicationInfo[SchedulingApiShiftExchangeCommunicationInfo["IM_MUST_ACCEPT"] = 2] = "IM_MUST_ACCEPT";
    SchedulingApiShiftExchangeCommunicationInfo[SchedulingApiShiftExchangeCommunicationInfo["CP_MUST_ACCEPT"] = 3] = "CP_MUST_ACCEPT";
    SchedulingApiShiftExchangeCommunicationInfo[SchedulingApiShiftExchangeCommunicationInfo["NO_OFFER_YET"] = 4] = "NO_OFFER_YET";
    SchedulingApiShiftExchangeCommunicationInfo[SchedulingApiShiftExchangeCommunicationInfo["NO_OFFER_YET_CP_CANNOT"] = 5] = "NO_OFFER_YET_CP_CANNOT";
    SchedulingApiShiftExchangeCommunicationInfo[SchedulingApiShiftExchangeCommunicationInfo["NO_OFFER_YET_IM_RESPONDED_NO"] = 6] = "NO_OFFER_YET_IM_RESPONDED_NO";
    SchedulingApiShiftExchangeCommunicationInfo[SchedulingApiShiftExchangeCommunicationInfo["NO_OFFER_YET_CP_RESPONDED_NO"] = 7] = "NO_OFFER_YET_CP_RESPONDED_NO";
})(SchedulingApiShiftExchangeCommunicationInfo || (SchedulingApiShiftExchangeCommunicationInfo = {}));
export var SchedulingApiShiftExchangeRequesterRelationship;
(function (SchedulingApiShiftExchangeRequesterRelationship) {
    SchedulingApiShiftExchangeRequesterRelationship[SchedulingApiShiftExchangeRequesterRelationship["A"] = 1] = "A";
    SchedulingApiShiftExchangeRequesterRelationship[SchedulingApiShiftExchangeRequesterRelationship["IM"] = 2] = "IM";
    SchedulingApiShiftExchangeRequesterRelationship[SchedulingApiShiftExchangeRequesterRelationship["CP"] = 3] = "CP";
    SchedulingApiShiftExchangeRequesterRelationship[SchedulingApiShiftExchangeRequesterRelationship["A_IN_COMMUNICATION"] = 4] = "A_IN_COMMUNICATION";
    SchedulingApiShiftExchangeRequesterRelationship[SchedulingApiShiftExchangeRequesterRelationship["MEMBER_NOT_ASSIGNABLE"] = 5] = "MEMBER_NOT_ASSIGNABLE";
})(SchedulingApiShiftExchangeRequesterRelationship || (SchedulingApiShiftExchangeRequesterRelationship = {}));
export class SchedulingApiShiftExchangeShiftRefsBase extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'shiftRefs');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'shiftRefs',
            id: 'SHIFT_EXCHANGE_SHIFT_REFS',
            primitiveType: PApiPrimitiveTypes.ApiList,
        });
    }
    wrapItem(item, _generateMissingData) {
        const newWrapper = new SchedulingApiShiftExchangeShiftRef(this.api);
        newWrapper._updateRawData(item, _generateMissingData);
        return newWrapper;
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return false;
    }
    createInstance(removeDestroyedItems) {
        return new SchedulingApiShiftExchangeShiftRefs(this.api, removeDestroyedItems);
    }
    get dni() {
        return '203';
    }
    createNewItem(id = null) {
        const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('shiftRefs');
        return newItem;
    }
}
export class SchedulingApiShiftExchangeShiftRef extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiShiftExchangeShiftRef);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'shiftExchangeShiftRef',
            id: 'SHIFT_EXCHANGE_SHIFT_REF',
        });
        this.attributeInfoStart = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'start',
            id: 'SHIFT_EXCHANGE_SHIFT_REF_START',
            primitiveType: PApiPrimitiveTypes.DateTime,
        });
        this.attributeInfoEnd = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'end',
            id: 'SHIFT_EXCHANGE_SHIFT_REF_END',
            primitiveType: PApiPrimitiveTypes.DateTime,
        });
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : ShiftId.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  Start of the shift
     *
     * @type {DateTime}
     */
    get start() {
        return this.data[1];
    }
    set start(v) {
        this.setterImpl(1, v, 'start');
    }
    /**
     *  Start of the shift
     *
     * @type {DateTime}
     */
    get end() {
        return this.data[2];
    }
    set end(v) {
        this.setterImpl(2, v, 'end');
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : ShiftId.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 3);
        }
        // propagate new raw data to children
    }
    get dni() {
        return '230';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '230', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class SchedulingApiShiftExchangeSwappedShiftRefs extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'swappedShiftRefs');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'swappedShiftRefs',
            id: 'SHIFT_EXCHANGE_SWAPPED_SHIFT_REFS',
            primitiveType: PApiPrimitiveTypes.ApiList,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoShiftExchangeSwappedShiftRef = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'shiftExchangeSwappedShiftRef',
            id: 'SHIFT_EXCHANGE_SWAPPED_SHIFT_REF',
            canEdit: () => false,
            readMode: () => true,
        });
    }
    wrapItem(item, _generateMissingData) {
        const newWrapper = new SchedulingApiShiftExchangeSwappedShiftRef(this.api);
        newWrapper._updateRawData(item, _generateMissingData);
        return newWrapper;
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return false;
    }
    createInstance(removeDestroyedItems) {
        return new SchedulingApiShiftExchangeSwappedShiftRefs(this.api, removeDestroyedItems);
    }
    get dni() {
        return '204';
    }
    createNewItem(id = null) {
        const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('swappedShiftRefs');
        return newItem;
    }
}
export class SchedulingApiShiftExchangeSwappedShiftRef extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiShiftExchangeSwappedShiftRef);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'shiftExchangeSwappedShiftRef',
            id: 'SHIFT_EXCHANGE_SWAPPED_SHIFT_REF',
            canEdit: () => false,
            readMode: () => true,
        });
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : ShiftId.create(Meta.getNewItemId(this.rawData));
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : ShiftId.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 1);
        }
        // propagate new raw data to children
    }
    get dni() {
        return '233';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '233', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class SchedulingApiShiftExchangeCommunicationsBase extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'communications');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'communications',
            id: 'SHIFT_EXCHANGE_COMMUNICATIONS',
            primitiveType: PApiPrimitiveTypes.ApiList,
        });
    }
    wrapItem(item, _generateMissingData) {
        const newWrapper = new SchedulingApiShiftExchangeCommunication(this.api);
        newWrapper._updateRawData(item, _generateMissingData);
        return newWrapper;
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return false;
    }
    createInstance(removeDestroyedItems) {
        return new SchedulingApiShiftExchangeCommunications(this.api, removeDestroyedItems);
    }
    get dni() {
        return '214';
    }
    createNewItem(id = null) {
        const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('communications');
        return newItem;
    }
}
export class SchedulingApiShiftExchangeCommunicationBase extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiShiftExchangeCommunication);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'shiftExchangeCommunication',
            id: 'SHIFT_EXCHANGE_COMMUNICATION',
            canEdit: function () {
                console.error('AttributeInfo for /scheduling -> SHIFT_EXCHANGE_COMMUNICATION is not implemented yet. Please create a Jira issue in the current Sprint: https://drplano.atlassian.net/secure/CreateIssueDetails!init.jspa?pid=10003&issuetype=10101&summary=' + encodeURI('AttributeInfo for /scheduling -> SHIFT_EXCHANGE_COMMUNICATION is not implemented yet') + '&assignee=557058%3Ae58fd015-3e1d-44b8-9131-aef274b1c571');
                return true;
            },
            readMode: function () {
                return false;
            },
        });
        this.attributeInfoIndisposedMembersSelectedSOId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'indisposedMembersSelectedSOId',
            id: 'SHIFT_EXCHANGE_COMMUNICATION_INDISPOSED_MEMBERS_SELECTED_SO_ID',
            primitiveType: PApiPrimitiveTypes.Id,
        });
        this.attributeInfoPerformAction = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'performAction',
            id: 'SHIFT_EXCHANGE_COMMUNICATION_PERFORM_ACTION',
            primitiveType: PApiPrimitiveTypes.Enum,
        });
        this.attributeInfoPerformActionComment = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'performActionComment',
            id: 'SHIFT_EXCHANGE_COMMUNICATION_PERFORM_ACTION_COMMENT',
            primitiveType: PApiPrimitiveTypes.string,
        });
        this.attributeInfoCommunicationState = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'communicationState',
            id: 'SHIFT_EXCHANGE_COMMUNICATION_COMMUNICATION_STATE',
            primitiveType: PApiPrimitiveTypes.Enum,
        });
        this.attributeInfoCommunicationPartnerId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'communicationPartnerId',
            id: 'SHIFT_EXCHANGE_COMMUNICATION_COMMUNICATION_PARTNER_ID',
            primitiveType: PApiPrimitiveTypes.Id,
        });
        this.attributeInfoLastAction = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'lastAction',
            id: 'SHIFT_EXCHANGE_COMMUNICATION_LAST_ACTION',
            primitiveType: PApiPrimitiveTypes.Enum,
        });
        this.attributeInfoLastActionTime = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'lastActionTime',
            id: 'SHIFT_EXCHANGE_COMMUNICATION_LAST_ACTION_TIME',
            primitiveType: PApiPrimitiveTypes.DateTime,
        });
        this.attributeInfoLastActionComment = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'lastActionComment',
            id: 'SHIFT_EXCHANGE_COMMUNICATION_LAST_ACTION_COMMENT',
            primitiveType: PApiPrimitiveTypes.string,
            show: function () {
                console.error('AttributeInfo for /scheduling -> SHIFT_EXCHANGE_COMMUNICATION_LAST_ACTION_COMMENT is not implemented yet. Please create a Jira issue in the current Sprint: https://drplano.atlassian.net/secure/CreateIssueDetails!init.jspa?pid=10003&issuetype=10101&summary=' + encodeURI('AttributeInfo for /scheduling -> SHIFT_EXCHANGE_COMMUNICATION_LAST_ACTION_COMMENT is not implemented yet') + '&assignee=557058%3Ae58fd015-3e1d-44b8-9131-aef274b1c571');
                return true;
            },
            canEdit: function () {
                console.error('AttributeInfo for /scheduling -> SHIFT_EXCHANGE_COMMUNICATION_LAST_ACTION_COMMENT is not implemented yet. Please create a Jira issue in the current Sprint: https://drplano.atlassian.net/secure/CreateIssueDetails!init.jspa?pid=10003&issuetype=10101&summary=' + encodeURI('AttributeInfo for /scheduling -> SHIFT_EXCHANGE_COMMUNICATION_LAST_ACTION_COMMENT is not implemented yet') + '&assignee=557058%3Ae58fd015-3e1d-44b8-9131-aef274b1c571');
                return true;
            },
            readMode: function () {
                return false;
            },
        });
        this.attributeInfoIsIllnessReviewCommunication = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'isIllnessReviewCommunication',
            id: 'SHIFT_EXCHANGE_COMMUNICATION_IS_ILLNESS_REVIEW_COMMUNICATION',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoRequesterRole = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'requesterRole',
            id: 'SHIFT_EXCHANGE_COMMUNICATION_REQUESTER_ROLE',
            primitiveType: PApiPrimitiveTypes.Enum,
        });
        this.attributeInfoHasTodo = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'hasTodo',
            id: 'SHIFT_EXCHANGE_COMMUNICATION_HAS_TODO',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.swapOffersWrapper = new SchedulingApiShiftExchangeCommunicationSwapOffers(this.api, false);
        this.indisposedMembersSelectedSOIdWrapper = null;
        this.communicationPartnerIdWrapper = null;
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
        this.swapOffersWrapper.parent = this;
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  List of swap offers. Each offer consist of a list of shifts which CP has offered for swap.
     */
    get swapOffers() {
        return this.swapOffersWrapper;
    }
    set swapOffersTestSetter(v) {
        this.setterImpl(1, v.rawData, 'swapOffers', () => { this.swapOffersWrapper = v; });
    }
    /**
     *  Id of the swap offer which was selected by the indisposed member.
     *
     * @type {Id}
     */
    get indisposedMembersSelectedSOId() {
        return this.indisposedMembersSelectedSOIdWrapper;
    }
    set indisposedMembersSelectedSOId(v) {
        this.setterImpl(2, v, 'indisposedMembersSelectedSOId', () => { this.indisposedMembersSelectedSOIdWrapper = v; });
    }
    /**
     *  Set here the action which to perform next. Backend always send "null" back.
     *
     * @type {SchedulingApiShiftExchangeCommunicationAction}
     */
    get performAction() {
        return this.data[3];
    }
    set performAction(v) {
        this.setterImpl(3, v, 'performAction');
    }
    /**
     *  Optionally set here a comment for the action to be performed. Backend always send empty string back.
     *
     * @type {string}
     */
    get performActionComment() {
        return this.data[4];
    }
    set performActionComment(v) {
        this.setterImpl(4, v, 'performActionComment');
    }
    /**
     *  Current state of this communication. Read-only.
     *
     * @type {SchedulingApiShiftExchangeCommunicationState}
     */
    get communicationState() {
        return this.data[5];
    }
    set communicationState(v) {
        this.setterImpl(5, v, 'communicationState');
    }
    /**
     *  Member id with whom the indisposed member is communicating.
     *
     * @type {Id}
     */
    get communicationPartnerId() {
        return this.communicationPartnerIdWrapper;
    }
    set communicationPartnerId(v) {
        this.setterImpl(6, v, 'communicationPartnerId', () => { this.communicationPartnerIdWrapper = v; });
    }
    /**
     *  What was the last action? Read-only.
     *
     * @type {SchedulingApiShiftExchangeCommunicationAction}
     */
    get lastAction() {
        return this.data[7];
    }
    set lastAction(v) {
        this.setterImpl(7, v, 'lastAction');
    }
    /**
     *  Time of the last action. Read-only.
     *
     * @type {DateTime}
     */
    get lastActionTime() {
        return this.data[8];
    }
    set lastActionTime(v) {
        this.setterImpl(8, v, 'lastActionTime');
    }
    /**
     *  Comment for the last action. Read-only.
     *
     * @type {string}
     */
    get lastActionComment() {
        return this.data[9];
    }
    set lastActionComment(v) {
        this.setterImpl(9, v, 'lastActionComment');
    }
    /**
     *  Is this a communication of an admin concerned about reviewing (accepting/declining) this illness? Read-only.
     *
     * @type {boolean}
     */
    get isIllnessReviewCommunication() {
        return this.data[10];
    }
    set isIllnessReviewCommunication(v) {
        this.setterImpl(10, v, 'isIllnessReviewCommunication');
    }
    /**
     *  Role of requester related to this communication. Read-only. Can be "null". This role is specific to this communication as an admin can have several communications with different roles (once as admin and once as CP). In contrast shiftExchange.requesterRelationship defines a general role relative to whole shiftExchange.
     *
     * @type {SchedulingApiShiftExchangeCommunicationRequesterRole}
     */
    get requesterRole() {
        return this.data[11];
    }
    set requesterRole(v) {
        this.setterImpl(11, v, 'requesterRole');
    }
    /**
     *  Has the requester a todo for this communication?
     *
     * @type {boolean}
     */
    get hasTodo() {
        return this.data[12];
    }
    set hasTodo(v) {
        this.setterImpl(12, v, 'hasTodo');
    }
    _fixIds(_idReplacements) {
        this.swapOffersWrapper._fixIds(_idReplacements);
        this.data[2] = Meta.getReplacedId(this.data[2], _idReplacements);
        this.indisposedMembersSelectedSOIdWrapper = Id.create(this.data[2]);
        this.data[6] = Meta.getReplacedId(this.data[6], _idReplacements);
        this.communicationPartnerIdWrapper = Id.create(this.data[6]);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 13);
            if (data[1] === null)
                data[1] = Meta.createNewList();
            data[10] = false;
            data[12] = false;
        }
        // propagate new raw data to children
        this.swapOffersWrapper._updateRawData(data ? data[1] : null, generateMissingData);
        if (!Meta.isSameId(data ? data[2] : null, this.indisposedMembersSelectedSOIdWrapper))
            this.indisposedMembersSelectedSOIdWrapper = data && data[2] ? Id.create(data[2]) : null;
        if (!Meta.isSameId(data ? data[6] : null, this.communicationPartnerIdWrapper))
            this.communicationPartnerIdWrapper = data && data[6] ? Id.create(data[6]) : null;
    }
    get dni() {
        return '217';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '217', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class SchedulingApiShiftExchangeCommunicationSwapOffersBase extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'swapOffers');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'swapOffers',
            id: 'SHIFT_EXCHANGE_COMMUNICATION_SWAP_OFFERS',
            primitiveType: PApiPrimitiveTypes.ApiList,
        });
    }
    wrapItem(item, _generateMissingData) {
        const newWrapper = new SchedulingApiShiftExchangeCommunicationSwapOffer(this.api);
        newWrapper._updateRawData(item, _generateMissingData);
        return newWrapper;
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return false;
    }
    createInstance(removeDestroyedItems) {
        return new SchedulingApiShiftExchangeCommunicationSwapOffers(this.api, removeDestroyedItems);
    }
    get dni() {
        return '218';
    }
    createNewItem(id = null) {
        const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('swapOffers');
        return newItem;
    }
}
export class SchedulingApiShiftExchangeCommunicationSwapOffer extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiShiftExchangeCommunicationSwapOffer);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'shiftExchangeCommunicationSwapOffer',
            id: 'SHIFT_EXCHANGE_COMMUNICATION_SWAP_OFFER',
        });
        this.shiftRefsWrapper = new SchedulingApiShiftExchangeCommunicationSwapOfferShiftRefs(this.api, false);
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
        this.shiftRefsWrapper.parent = this;
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  References to shift(s) which belong to this offer.
     */
    get shiftRefs() {
        return this.shiftRefsWrapper;
    }
    set shiftRefsTestSetter(v) {
        this.setterImpl(1, v.rawData, 'shiftRefs', () => { this.shiftRefsWrapper = v; });
    }
    _fixIds(_idReplacements) {
        this.shiftRefsWrapper._fixIds(_idReplacements);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 2);
            if (data[1] === null)
                data[1] = Meta.createNewList();
        }
        // propagate new raw data to children
        this.shiftRefsWrapper._updateRawData(data ? data[1] : null, generateMissingData);
    }
    get dni() {
        return '234';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '234', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class SchedulingApiShiftExchangeCommunicationSwapOfferShiftRefsBase extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'shiftRefs');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'shiftRefs',
            id: 'SHIFT_EXCHANGE_COMMUNICATION_SWAP_OFFER_SHIFT_REFS',
            primitiveType: PApiPrimitiveTypes.ApiList,
        });
        this.attributeInfoShiftExchangeCommunicationSwapOfferShiftRef = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'shiftExchangeCommunicationSwapOfferShiftRef',
            id: 'SHIFT_EXCHANGE_COMMUNICATION_SWAP_OFFER_SHIFT_REF',
        });
    }
    wrapItem(item, _generateMissingData) {
        const newWrapper = new SchedulingApiShiftExchangeCommunicationSwapOfferShiftRef(this.api);
        newWrapper._updateRawData(item, _generateMissingData);
        return newWrapper;
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return false;
    }
    createInstance(removeDestroyedItems) {
        return new SchedulingApiShiftExchangeCommunicationSwapOfferShiftRefs(this.api, removeDestroyedItems);
    }
    get dni() {
        return '235';
    }
    createNewItem(id = null) {
        const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('shiftRefs');
        return newItem;
    }
}
export class SchedulingApiShiftExchangeCommunicationSwapOfferShiftRef extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiShiftExchangeCommunicationSwapOfferShiftRef);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'shiftExchangeCommunicationSwapOfferShiftRef',
            id: 'SHIFT_EXCHANGE_COMMUNICATION_SWAP_OFFER_SHIFT_REF',
        });
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : ShiftId.create(Meta.getNewItemId(this.rawData));
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : ShiftId.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 1);
        }
        // propagate new raw data to children
    }
    get dni() {
        return '236';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '236', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export var SchedulingApiShiftExchangeCommunicationAction;
(function (SchedulingApiShiftExchangeCommunicationAction) {
    SchedulingApiShiftExchangeCommunicationAction[SchedulingApiShiftExchangeCommunicationAction["IM_REPORTED_ILLNESS"] = 1] = "IM_REPORTED_ILLNESS";
    SchedulingApiShiftExchangeCommunicationAction[SchedulingApiShiftExchangeCommunicationAction["A_REPORTED_ILLNESS"] = 2] = "A_REPORTED_ILLNESS";
    SchedulingApiShiftExchangeCommunicationAction[SchedulingApiShiftExchangeCommunicationAction["ILLNESS_NEEDS_CONFIRMATION_A_DECLINED"] = 3] = "ILLNESS_NEEDS_CONFIRMATION_A_DECLINED";
    SchedulingApiShiftExchangeCommunicationAction[SchedulingApiShiftExchangeCommunicationAction["ILLNESS_NEEDS_CONFIRMATION_A_ACCEPT_WITH_SHIFT_EXCHANGE"] = 4] = "ILLNESS_NEEDS_CONFIRMATION_A_ACCEPT_WITH_SHIFT_EXCHANGE";
    SchedulingApiShiftExchangeCommunicationAction[SchedulingApiShiftExchangeCommunicationAction["ILLNESS_NEEDS_CONFIRMATION_A_ACCEPT_WITHOUT_SHIFT_EXCHANGE"] = 5] = "ILLNESS_NEEDS_CONFIRMATION_A_ACCEPT_WITHOUT_SHIFT_EXCHANGE";
    SchedulingApiShiftExchangeCommunicationAction[SchedulingApiShiftExchangeCommunicationAction["ILLNESS_DECLINED_A_ACCEPT_WITHOUT_SHIFT_EXCHANGE"] = 6] = "ILLNESS_DECLINED_A_ACCEPT_WITHOUT_SHIFT_EXCHANGE";
    SchedulingApiShiftExchangeCommunicationAction[SchedulingApiShiftExchangeCommunicationAction["ILLNESS_DECLINED_A_ACCEPT_WITH_SHIFT_EXCHANGE"] = 7] = "ILLNESS_DECLINED_A_ACCEPT_WITH_SHIFT_EXCHANGE";
    SchedulingApiShiftExchangeCommunicationAction[SchedulingApiShiftExchangeCommunicationAction["ILLNESS_CONFIRMED_WITHOUT_SHIFT_EXCHANGE_A_START_SHIFT_EXCHANGE"] = 8] = "ILLNESS_CONFIRMED_WITHOUT_SHIFT_EXCHANGE_A_START_SHIFT_EXCHANGE";
    SchedulingApiShiftExchangeCommunicationAction[SchedulingApiShiftExchangeCommunicationAction["IM_NEEDS_RESPONSE"] = 9] = "IM_NEEDS_RESPONSE";
    SchedulingApiShiftExchangeCommunicationAction[SchedulingApiShiftExchangeCommunicationAction["CP_ASSIGNED_SAME_TIME"] = 10] = "CP_ASSIGNED_SAME_TIME";
    SchedulingApiShiftExchangeCommunicationAction[SchedulingApiShiftExchangeCommunicationAction["CP_ASSIGNED_SAME_SHIFT"] = 11] = "CP_ASSIGNED_SAME_SHIFT";
    SchedulingApiShiftExchangeCommunicationAction[SchedulingApiShiftExchangeCommunicationAction["CP_IS_ABSENT"] = 12] = "CP_IS_ABSENT";
    SchedulingApiShiftExchangeCommunicationAction[SchedulingApiShiftExchangeCommunicationAction["CP_IS_ILL"] = 13] = "CP_IS_ILL";
    SchedulingApiShiftExchangeCommunicationAction[SchedulingApiShiftExchangeCommunicationAction["CP_NOT_RESPONDED_CP_SWAP_SHIFT"] = 14] = "CP_NOT_RESPONDED_CP_SWAP_SHIFT";
    SchedulingApiShiftExchangeCommunicationAction[SchedulingApiShiftExchangeCommunicationAction["CP_NOT_RESPONDED_CP_TAKE_SHIFT_PREF_MISMATCH"] = 15] = "CP_NOT_RESPONDED_CP_TAKE_SHIFT_PREF_MISMATCH";
    SchedulingApiShiftExchangeCommunicationAction[SchedulingApiShiftExchangeCommunicationAction["CP_NOT_RESPONDED_CP_TAKE_SHIFT_PREF_MATCH"] = 16] = "CP_NOT_RESPONDED_CP_TAKE_SHIFT_PREF_MATCH";
    SchedulingApiShiftExchangeCommunicationAction[SchedulingApiShiftExchangeCommunicationAction["CP_NOT_RESPONDED_CP_CANNOT"] = 17] = "CP_NOT_RESPONDED_CP_CANNOT";
    SchedulingApiShiftExchangeCommunicationAction[SchedulingApiShiftExchangeCommunicationAction["CP_RESPONDED_NO_CP_SWAP_SHIFT"] = 18] = "CP_RESPONDED_NO_CP_SWAP_SHIFT";
    SchedulingApiShiftExchangeCommunicationAction[SchedulingApiShiftExchangeCommunicationAction["CP_RESPONDED_NO_CP_TAKE_SHIFT_PREF_MISMATCH"] = 19] = "CP_RESPONDED_NO_CP_TAKE_SHIFT_PREF_MISMATCH";
    SchedulingApiShiftExchangeCommunicationAction[SchedulingApiShiftExchangeCommunicationAction["CP_RESPONDED_NO_CP_TAKE_SHIFT_PREF_MATCH"] = 20] = "CP_RESPONDED_NO_CP_TAKE_SHIFT_PREF_MATCH";
    SchedulingApiShiftExchangeCommunicationAction[SchedulingApiShiftExchangeCommunicationAction["CP_WANTS_SWAP_CP_CHANGE_OFFERED_SHIFTS"] = 21] = "CP_WANTS_SWAP_CP_CHANGE_OFFERED_SHIFTS";
    SchedulingApiShiftExchangeCommunicationAction[SchedulingApiShiftExchangeCommunicationAction["CP_WANTS_SWAP_CP_CANNOT"] = 22] = "CP_WANTS_SWAP_CP_CANNOT";
    SchedulingApiShiftExchangeCommunicationAction[SchedulingApiShiftExchangeCommunicationAction["CP_WANTS_SWAP_IM_DECLINE_SWAP"] = 23] = "CP_WANTS_SWAP_IM_DECLINE_SWAP";
    SchedulingApiShiftExchangeCommunicationAction[SchedulingApiShiftExchangeCommunicationAction["CP_WANTS_SWAP_CP_TAKE_SHIFT_PREF_MISMATCH"] = 24] = "CP_WANTS_SWAP_CP_TAKE_SHIFT_PREF_MISMATCH";
    SchedulingApiShiftExchangeCommunicationAction[SchedulingApiShiftExchangeCommunicationAction["CP_WANTS_SWAP_CP_TAKE_SHIFT_PREF_MATCH"] = 25] = "CP_WANTS_SWAP_CP_TAKE_SHIFT_PREF_MATCH";
    SchedulingApiShiftExchangeCommunicationAction[SchedulingApiShiftExchangeCommunicationAction["CP_WANTS_SWAP_IM_ACCEPT"] = 26] = "CP_WANTS_SWAP_IM_ACCEPT";
    SchedulingApiShiftExchangeCommunicationAction[SchedulingApiShiftExchangeCommunicationAction["IM_DECLINED_SWAP_CP_CHANGE_OFFERED_SHIFTS"] = 27] = "IM_DECLINED_SWAP_CP_CHANGE_OFFERED_SHIFTS";
    SchedulingApiShiftExchangeCommunicationAction[SchedulingApiShiftExchangeCommunicationAction["IM_DECLINED_SWAP_IM_SWAP_SHIFT"] = 28] = "IM_DECLINED_SWAP_IM_SWAP_SHIFT";
    SchedulingApiShiftExchangeCommunicationAction[SchedulingApiShiftExchangeCommunicationAction["IM_DECLINED_SWAP_CP_TAKE_SHIFT_PREF_MISMATCH"] = 29] = "IM_DECLINED_SWAP_CP_TAKE_SHIFT_PREF_MISMATCH";
    SchedulingApiShiftExchangeCommunicationAction[SchedulingApiShiftExchangeCommunicationAction["IM_DECLINED_SWAP_CP_TAKE_SHIFT_PREF_MATCH"] = 30] = "IM_DECLINED_SWAP_CP_TAKE_SHIFT_PREF_MATCH";
    SchedulingApiShiftExchangeCommunicationAction[SchedulingApiShiftExchangeCommunicationAction["CP_WANTS_TAKE_CP_SWAP_SHIFT"] = 31] = "CP_WANTS_TAKE_CP_SWAP_SHIFT";
    SchedulingApiShiftExchangeCommunicationAction[SchedulingApiShiftExchangeCommunicationAction["CP_WANTS_TAKE_CP_CANNOT"] = 32] = "CP_WANTS_TAKE_CP_CANNOT";
    SchedulingApiShiftExchangeCommunicationAction[SchedulingApiShiftExchangeCommunicationAction["CP_WANTS_TAKE_IM_DECLINE"] = 33] = "CP_WANTS_TAKE_IM_DECLINE";
    SchedulingApiShiftExchangeCommunicationAction[SchedulingApiShiftExchangeCommunicationAction["CP_WANTS_TAKE_IM_ACCEPT"] = 34] = "CP_WANTS_TAKE_IM_ACCEPT";
    SchedulingApiShiftExchangeCommunicationAction[SchedulingApiShiftExchangeCommunicationAction["IM_DECLINED_TAKE_CP_SWAP_SHIFT"] = 35] = "IM_DECLINED_TAKE_CP_SWAP_SHIFT";
    SchedulingApiShiftExchangeCommunicationAction[SchedulingApiShiftExchangeCommunicationAction["IM_DECLINED_TAKE_IM_TAKE_SHIFT"] = 36] = "IM_DECLINED_TAKE_IM_TAKE_SHIFT";
    SchedulingApiShiftExchangeCommunicationAction[SchedulingApiShiftExchangeCommunicationAction["IM_CHANGED_MIND_WANTS_SWAP_IM_CHANGE_SWAPPED_SHIFT"] = 37] = "IM_CHANGED_MIND_WANTS_SWAP_IM_CHANGE_SWAPPED_SHIFT";
    SchedulingApiShiftExchangeCommunicationAction[SchedulingApiShiftExchangeCommunicationAction["IM_CHANGED_MIND_WANTS_SWAP_IM_DECLINE_SWAP"] = 38] = "IM_CHANGED_MIND_WANTS_SWAP_IM_DECLINE_SWAP";
    SchedulingApiShiftExchangeCommunicationAction[SchedulingApiShiftExchangeCommunicationAction["IM_CHANGED_MIND_WANTS_SWAP_CP_CANNOT"] = 39] = "IM_CHANGED_MIND_WANTS_SWAP_CP_CANNOT";
    SchedulingApiShiftExchangeCommunicationAction[SchedulingApiShiftExchangeCommunicationAction["IM_CHANGED_MIND_WANTS_SWAP_CP_ACCEPT"] = 40] = "IM_CHANGED_MIND_WANTS_SWAP_CP_ACCEPT";
    SchedulingApiShiftExchangeCommunicationAction[SchedulingApiShiftExchangeCommunicationAction["IM_CHANGED_MIND_WANTS_SWAP_CP_TAKE_SHIFT_PREF_MISMATCH"] = 41] = "IM_CHANGED_MIND_WANTS_SWAP_CP_TAKE_SHIFT_PREF_MISMATCH";
    SchedulingApiShiftExchangeCommunicationAction[SchedulingApiShiftExchangeCommunicationAction["IM_CHANGED_MIND_WANTS_SWAP_CP_TAKE_SHIFT_PREF_MATCH"] = 42] = "IM_CHANGED_MIND_WANTS_SWAP_CP_TAKE_SHIFT_PREF_MATCH";
    SchedulingApiShiftExchangeCommunicationAction[SchedulingApiShiftExchangeCommunicationAction["IM_CHANGED_MIND_WANTS_TAKE_CP_SWAP_SHIFT"] = 43] = "IM_CHANGED_MIND_WANTS_TAKE_CP_SWAP_SHIFT";
    SchedulingApiShiftExchangeCommunicationAction[SchedulingApiShiftExchangeCommunicationAction["IM_CHANGED_MIND_WANTS_TAKE_IM_DECLINE_TAKE"] = 44] = "IM_CHANGED_MIND_WANTS_TAKE_IM_DECLINE_TAKE";
    SchedulingApiShiftExchangeCommunicationAction[SchedulingApiShiftExchangeCommunicationAction["IM_CHANGED_MIND_WANTS_TAKE_CP_CANNOT"] = 45] = "IM_CHANGED_MIND_WANTS_TAKE_CP_CANNOT";
    SchedulingApiShiftExchangeCommunicationAction[SchedulingApiShiftExchangeCommunicationAction["IM_CHANGED_MIND_WANTS_TAKE_CP_ACCEPT"] = 46] = "IM_CHANGED_MIND_WANTS_TAKE_CP_ACCEPT";
})(SchedulingApiShiftExchangeCommunicationAction || (SchedulingApiShiftExchangeCommunicationAction = {}));
export var SchedulingApiShiftExchangeCommunicationState;
(function (SchedulingApiShiftExchangeCommunicationState) {
    SchedulingApiShiftExchangeCommunicationState[SchedulingApiShiftExchangeCommunicationState["SWAP_SUCCESSFUL"] = 1] = "SWAP_SUCCESSFUL";
    SchedulingApiShiftExchangeCommunicationState[SchedulingApiShiftExchangeCommunicationState["TAKE_SUCCESSFUL"] = 2] = "TAKE_SUCCESSFUL";
    SchedulingApiShiftExchangeCommunicationState[SchedulingApiShiftExchangeCommunicationState["ILLNESS_NEEDS_CONFIRMATION"] = 3] = "ILLNESS_NEEDS_CONFIRMATION";
    SchedulingApiShiftExchangeCommunicationState[SchedulingApiShiftExchangeCommunicationState["ILLNESS_DECLINED"] = 4] = "ILLNESS_DECLINED";
    SchedulingApiShiftExchangeCommunicationState[SchedulingApiShiftExchangeCommunicationState["ILLNESS_CONFIRMED"] = 5] = "ILLNESS_CONFIRMED";
    SchedulingApiShiftExchangeCommunicationState[SchedulingApiShiftExchangeCommunicationState["ILLNESS_CONFIRMED_WITHOUT_SHIFT_EXCHANGE"] = 6] = "ILLNESS_CONFIRMED_WITHOUT_SHIFT_EXCHANGE";
    SchedulingApiShiftExchangeCommunicationState[SchedulingApiShiftExchangeCommunicationState["CP_NOT_RESPONDED"] = 7] = "CP_NOT_RESPONDED";
    SchedulingApiShiftExchangeCommunicationState[SchedulingApiShiftExchangeCommunicationState["CP_RESPONDED_NO"] = 8] = "CP_RESPONDED_NO";
    SchedulingApiShiftExchangeCommunicationState[SchedulingApiShiftExchangeCommunicationState["CP_CANNOT_SHIFT_EXCHANGE"] = 9] = "CP_CANNOT_SHIFT_EXCHANGE";
    SchedulingApiShiftExchangeCommunicationState[SchedulingApiShiftExchangeCommunicationState["CP_WANTS_SWAP"] = 10] = "CP_WANTS_SWAP";
    SchedulingApiShiftExchangeCommunicationState[SchedulingApiShiftExchangeCommunicationState["IM_DECLINED_SWAP"] = 11] = "IM_DECLINED_SWAP";
    SchedulingApiShiftExchangeCommunicationState[SchedulingApiShiftExchangeCommunicationState["CP_WANTS_TAKE"] = 12] = "CP_WANTS_TAKE";
    SchedulingApiShiftExchangeCommunicationState[SchedulingApiShiftExchangeCommunicationState["IM_DECLINED_TAKE"] = 13] = "IM_DECLINED_TAKE";
    SchedulingApiShiftExchangeCommunicationState[SchedulingApiShiftExchangeCommunicationState["IM_CHANGED_MIND_WANTS_SWAP"] = 14] = "IM_CHANGED_MIND_WANTS_SWAP";
    SchedulingApiShiftExchangeCommunicationState[SchedulingApiShiftExchangeCommunicationState["IM_CHANGED_MIND_WANTS_TAKE"] = 15] = "IM_CHANGED_MIND_WANTS_TAKE";
})(SchedulingApiShiftExchangeCommunicationState || (SchedulingApiShiftExchangeCommunicationState = {}));
export var SchedulingApiShiftExchangeCommunicationRequesterRole;
(function (SchedulingApiShiftExchangeCommunicationRequesterRole) {
    SchedulingApiShiftExchangeCommunicationRequesterRole[SchedulingApiShiftExchangeCommunicationRequesterRole["A"] = 1] = "A";
    SchedulingApiShiftExchangeCommunicationRequesterRole[SchedulingApiShiftExchangeCommunicationRequesterRole["IM"] = 2] = "IM";
    SchedulingApiShiftExchangeCommunicationRequesterRole[SchedulingApiShiftExchangeCommunicationRequesterRole["CP"] = 3] = "CP";
})(SchedulingApiShiftExchangeCommunicationRequesterRole || (SchedulingApiShiftExchangeCommunicationRequesterRole = {}));
export class SchedulingApiAbsencesBase extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'absences');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'absences',
            id: 'ABSENCES',
            primitiveType: PApiPrimitiveTypes.ApiList,
            canEdit: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return true;
                }
                return false;
            },
        });
    }
    wrapItem(item, _generateMissingData) {
        const newWrapper = new SchedulingApiAbsence(this.api);
        newWrapper._updateRawData(item, _generateMissingData);
        return newWrapper;
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return false;
    }
    createInstance(removeDestroyedItems) {
        return new SchedulingApiAbsences(this.api, removeDestroyedItems);
    }
    get dni() {
        return '5';
    }
    createNewItem(id = null) {
        const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('absences');
        return newItem;
    }
}
export class SchedulingApiAbsenceBase extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiAbsence);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'absence',
            id: 'ABSENCE',
            show: function () {
                return true;
            },
        });
        this.attributeInfoOwnerComment = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'ownerComment',
            id: 'ABSENCE_OWNER_COMMENT',
            primitiveType: PApiPrimitiveTypes.string,
        });
        this.attributeInfoWorkingTimePerDay = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'workingTimePerDay',
            id: 'ABSENCE_WORKING_TIME_PER_DAY',
            primitiveType: PApiPrimitiveTypes.Duration,
        });
        this.attributeInfoHourlyEarnings = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'hourlyEarnings',
            id: 'ABSENCE_HOURLY_EARNINGS',
            primitiveType: PApiPrimitiveTypes.Currency,
        });
        this.attributeInfoType = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'type',
            id: 'ABSENCE_TYPE',
            primitiveType: PApiPrimitiveTypes.Enum,
        });
        this.attributeInfoMemberId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'memberId',
            id: 'ABSENCE_MEMBER_ID',
            primitiveType: PApiPrimitiveTypes.Id,
        });
        this.attributeInfoShiftExchangeId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'shiftExchangeId',
            id: 'ABSENCE_SHIFT_EXCHANGE_ID',
            primitiveType: PApiPrimitiveTypes.Id,
        });
        this.attributeInfoVisibleToTeamMembers = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'visibleToTeamMembers',
            id: 'ABSENCE_VISIBLE_TO_TEAM_MEMBERS',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.timeWrapper = new SchedulingApiAbsenceTime(this.api);
        this.memberIdWrapper = null;
        this.shiftExchangeIdWrapper = null;
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
        this.timeWrapper.parent = this;
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  Comment of Owner.
     *
     * @type {string}
     */
    get ownerComment() {
        return this.data[1];
    }
    set ownerComment(v) {
        this.setterImpl(1, v, 'ownerComment');
    }
    /**
     *  How many milliseconds of each day in start/end interval are considered as working-time. Set "null" if the whole start/end interval is considered as working-time.
     *
     * @type {Duration}
     */
    get workingTimePerDay() {
        return this.data[2];
    }
    set workingTimePerDay(v) {
        this.setterImpl(2, v, 'workingTimePerDay');
    }
    /**
     *  Time of absence.
     */
    get time() {
        return this.timeWrapper;
    }
    set timeTestSetter(v) {
        this.setterImpl(3, v.rawData, 'time', () => { this.timeWrapper = v; });
    }
    /**
     *  Hourly earnings.
     *
     * @type {Currency}
     */
    get hourlyEarnings() {
        return this.data[4];
    }
    set hourlyEarnings(v) {
        this.setterImpl(4, v, 'hourlyEarnings');
    }
    /**
     *  Type of absence
     *
     * @type {SchedulingApiAbsenceType}
     */
    get type() {
        return this.data[5];
    }
    set type(v) {
        this.setterImpl(5, v, 'type');
    }
    /**
     *  The member id to which this absence belongs.
     *
     * @type {Id}
     */
    get memberId() {
        return this.memberIdWrapper;
    }
    set memberId(v) {
        this.setterImpl(6, v, 'memberId', () => { this.memberIdWrapper = v; });
    }
    /**
     *  The id of the shift-exchange for which this absence item was created. Can be null. Can only be set during item creation.
     *
     * @type {Id}
     */
    get shiftExchangeId() {
        return this.shiftExchangeIdWrapper;
    }
    set shiftExchangeId(v) {
        this.setterImpl(7, v, 'shiftExchangeId', () => { this.shiftExchangeIdWrapper = v; });
    }
    /**
     *  true if the absence is visible for managers and team members, false if visible to managers only
     *
     * @type {boolean}
     */
    get visibleToTeamMembers() {
        return this.data[8];
    }
    set visibleToTeamMembers(v) {
        this.setterImpl(8, v, 'visibleToTeamMembers');
    }
    _fixIds(_idReplacements) {
        this.timeWrapper._fixIds(_idReplacements);
        this.data[6] = Meta.getReplacedId(this.data[6], _idReplacements);
        this.memberIdWrapper = Id.create(this.data[6]);
        this.data[7] = Meta.getReplacedId(this.data[7], _idReplacements);
        this.shiftExchangeIdWrapper = Id.create(this.data[7]);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 9);
            if (data[3] === null)
                data[3] = Meta.createNewObject(true);
            data[5] = SchedulingApiAbsenceType.ILLNESS;
            data[8] = false;
        }
        // propagate new raw data to children
        this.timeWrapper._updateRawData(data ? data[3] : null, generateMissingData);
        if (!Meta.isSameId(data ? data[6] : null, this.memberIdWrapper))
            this.memberIdWrapper = data && data[6] ? Id.create(data[6]) : null;
        if (!Meta.isSameId(data ? data[7] : null, this.shiftExchangeIdWrapper))
            this.shiftExchangeIdWrapper = data && data[7] ? Id.create(data[7]) : null;
    }
    get dni() {
        return '126';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '126', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class SchedulingApiAbsenceTime extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiAbsenceTime);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'time',
            id: 'ABSENCE_TIME',
        });
        this.attributeInfoStart = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'start',
            id: 'ABSENCE_TIME_START',
            primitiveType: PApiPrimitiveTypes.DateTime,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(() => this.end, false, PApiPrimitiveTypes.DateTime, 'ABSENCE_TIME_END', undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoEnd = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'end',
            id: 'ABSENCE_TIME_END',
            primitiveType: PApiPrimitiveTypes.DateTime,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(() => this.start, false, PApiPrimitiveTypes.DateTime, 'ABSENCE_TIME_START', undefined);
                        return null;
                    },
                ];
            },
        });
        this._updateRawData(Meta.createNewObject(true, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  Start time of absence (inclusive).
     *
     * @type {DateTime}
     */
    get start() {
        return this.data[1];
    }
    set start(v) {
        this.setterImpl(1, v, 'start');
    }
    /**
     *  End time of absence (exclusive).
     *
     * @type {DateTime}
     */
    get end() {
        return this.data[2];
    }
    set end(v) {
        this.setterImpl(2, v, 'end');
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 3);
        }
        // propagate new raw data to children
    }
    get dni() {
        return '129';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '129', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export var SchedulingApiAbsenceType;
(function (SchedulingApiAbsenceType) {
    SchedulingApiAbsenceType[SchedulingApiAbsenceType["ILLNESS"] = 1] = "ILLNESS";
    SchedulingApiAbsenceType[SchedulingApiAbsenceType["VACATION"] = 2] = "VACATION";
    SchedulingApiAbsenceType[SchedulingApiAbsenceType["OTHER"] = 3] = "OTHER";
})(SchedulingApiAbsenceType || (SchedulingApiAbsenceType = {}));
export class SchedulingApiAssignmentProcessesBase extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'assignmentProcesses');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'assignmentProcesses',
            id: 'ASSIGNMENT_PROCESSES',
            primitiveType: PApiPrimitiveTypes.ApiList,
            show: function () {
                console.error('AttributeInfo for /scheduling -> ASSIGNMENT_PROCESSES is not implemented yet. Please create a Jira issue in the current Sprint: https://drplano.atlassian.net/secure/CreateIssueDetails!init.jspa?pid=10003&issuetype=10101&summary=' + encodeURI('AttributeInfo for /scheduling -> ASSIGNMENT_PROCESSES is not implemented yet') + '&assignee=557058%3Ae58fd015-3e1d-44b8-9131-aef274b1c571');
                return true;
            },
        });
    }
    wrapItem(item, _generateMissingData) {
        const newWrapper = new SchedulingApiAssignmentProcess(this.api);
        newWrapper._updateRawData(item, _generateMissingData);
        return newWrapper;
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return false;
    }
    createInstance(removeDestroyedItems) {
        return new SchedulingApiAssignmentProcesses(this.api, removeDestroyedItems);
    }
    get dni() {
        return '6';
    }
    createNewItem(id = null) {
        const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('assignmentProcesses');
        return newItem;
    }
}
export class SchedulingApiAssignmentProcessBase extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiAssignmentProcess);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'assignmentProcess',
            id: 'ASSIGNMENT_PROCESS',
        });
        this.attributeInfoState = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'state',
            id: 'ASSIGNMENT_PROCESS_STATE',
            primitiveType: PApiPrimitiveTypes.Enum,
        });
        this.attributeInfoDeadline = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'deadline',
            id: 'ASSIGNMENT_PROCESS_DEADLINE',
            primitiveType: PApiPrimitiveTypes.DateTime,
        });
        this.attributeInfoName = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'name',
            id: 'ASSIGNMENT_PROCESS_NAME',
            primitiveType: PApiPrimitiveTypes.string,
        });
        this.attributeInfoOnlyAskPrefsForUnassignedShifts = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'onlyAskPrefsForUnassignedShifts',
            id: 'ASSIGNMENT_PROCESS_ONLY_ASK_PREFS_FOR_UNASSIGNED_SHIFTS',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoAssignMembersWhenNoPrefAvailable = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'assignMembersWhenNoPrefAvailable',
            id: 'ASSIGNMENT_PROCESS_ASSIGN_MEMBERS_WHEN_NO_PREF_AVAILABLE',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoRemoveProcessWhenEarlyBirdAssignedAllShifts = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'removeProcessWhenEarlyBirdAssignedAllShifts',
            id: 'ASSIGNMENT_PROCESS_REMOVE_PROCESS_WHEN_EARLY_BIRD_ASSIGNED_ALL_SHIFTS',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoAssignmentState = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'assignmentState',
            id: 'ASSIGNMENT_PROCESS_ASSIGNMENT_STATE',
            primitiveType: PApiPrimitiveTypes.Enum,
        });
        this.attributeInfoMissingAssignmentsCount = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'missingAssignmentsCount',
            id: 'ASSIGNMENT_PROCESS_MISSING_ASSIGNMENTS_COUNT',
            primitiveType: PApiPrimitiveTypes.Integer,
        });
        this.attributeInfoTodoShiftsCountCurrentView = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'todoShiftsCountCurrentView',
            id: 'ASSIGNMENT_PROCESS_TODO_SHIFTS_COUNT_CURRENT_VIEW',
            primitiveType: PApiPrimitiveTypes.Integer,
        });
        this.attributeInfoTodoShiftsCountRightView = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'todoShiftsCountRightView',
            id: 'ASSIGNMENT_PROCESS_TODO_SHIFTS_COUNT_RIGHT_VIEW',
            primitiveType: PApiPrimitiveTypes.Integer,
        });
        this.attributeInfoTodoShiftsCountLeftView = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'todoShiftsCountLeftView',
            id: 'ASSIGNMENT_PROCESS_TODO_SHIFTS_COUNT_LEFT_VIEW',
            primitiveType: PApiPrimitiveTypes.Integer,
        });
        this.attributeInfoType = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'type',
            id: 'ASSIGNMENT_PROCESS_TYPE',
            primitiveType: PApiPrimitiveTypes.Enum,
        });
        this.attributeInfoCanEdit = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'canEdit',
            id: 'ASSIGNMENT_PROCESS_CAN_EDIT',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.shiftRefsWrapper = new SchedulingApiAssignmentProcessShiftRefs(this.api, false);
        this.missingPrefsMemberIdsWrapper = new SchedulingApiAssignmentProcessMissingPrefsMemberIds(this.api, false);
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
        this.shiftRefsWrapper.parent = this;
        this.missingPrefsMemberIdsWrapper.parent = this;
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  Current state of the process.
     *
     * @type {SchedulingApiAssignmentProcessState}
     */
    get state() {
        return this.data[1];
    }
    set state(v) {
        this.setterImpl(1, v, 'state');
    }
    /**
     *  Deadline of the current state.
     *
     * @type {DateTime}
     */
    get deadline() {
        return this.data[2];
    }
    set deadline(v) {
        this.setterImpl(2, v, 'deadline');
    }
    /**
     *  Name of the process.
     *
     * @type {string}
     */
    get name() {
        return this.data[3];
    }
    set name(v) {
        this.setterImpl(3, v, 'name');
    }
    /**
     *  A list of shift ids being assigned by this process.
     */
    get shiftRefs() {
        return this.shiftRefsWrapper;
    }
    set shiftRefsTestSetter(v) {
        this.setterImpl(4, v.rawData, 'shiftRefs', () => { this.shiftRefsWrapper = v; });
    }
    /**
     *  Should member preferences only be asked for unassigned shifts? (i.e. shifts whose assignment count is less then the needed members count).
     *
     * @type {boolean}
     */
    get onlyAskPrefsForUnassignedShifts() {
        return this.data[5];
    }
    set onlyAskPrefsForUnassignedShifts(v) {
        this.setterImpl(5, v, 'onlyAskPrefsForUnassignedShifts');
    }
    /**
     *  Can a member be assigned by the algorithm to a shift when that member has not chosen pref for that shift? Only relevant for type == DR_PLANO.
     *
     * @type {boolean}
     */
    get assignMembersWhenNoPrefAvailable() {
        return this.data[6];
    }
    set assignMembersWhenNoPrefAvailable(v) {
        this.setterImpl(6, v, 'assignMembersWhenNoPrefAvailable');
    }
    /**
     *  If set true then the whole process is removed automatically when in EARLY_BIRD_SCHEDULING state all shifts were assigned the required needed-members-count.
     *
     * @type {boolean}
     */
    get removeProcessWhenEarlyBirdAssignedAllShifts() {
        return this.data[7];
    }
    set removeProcessWhenEarlyBirdAssignedAllShifts(v) {
        this.setterImpl(7, v, 'removeProcessWhenEarlyBirdAssignedAllShifts');
    }
    /**
     *  What is the assignment state of the shifts of this process? Read-only.
     *
     * @type {SchedulingApiAssignmentProcessAssignmentState}
     */
    get assignmentState() {
        return this.data[8];
    }
    set assignmentState(v) {
        this.setterImpl(8, v, 'assignmentState');
    }
    /**
     *  The overall number of missing assignments for this process. I.e. for a given shift Math.max(0, shift.neededMembersCount - shift.assignmentCount).
     *
     * @type {Integer}
     */
    get missingAssignmentsCount() {
        return this.data[9];
    }
    set missingAssignmentsCount(v) {
        this.setterImpl(9, v, 'missingAssignmentsCount');
    }
    /**
     *  The number of shifts for which the user has to do something in current view. Read-only.
     *
     * @type {Integer}
     */
    get todoShiftsCountCurrentView() {
        return this.data[10];
    }
    set todoShiftsCountCurrentView(v) {
        this.setterImpl(10, v, 'todoShiftsCountCurrentView');
    }
    /**
     *  The number of shifts for which the user has to do something on the right side of current view. Read-only.
     *
     * @type {Integer}
     */
    get todoShiftsCountRightView() {
        return this.data[11];
    }
    set todoShiftsCountRightView(v) {
        this.setterImpl(11, v, 'todoShiftsCountRightView');
    }
    /**
     *  The number of shifts for which the user has to do something on the left side of current view. Read-only.
     *
     * @type {Integer}
     */
    get todoShiftsCountLeftView() {
        return this.data[12];
    }
    set todoShiftsCountLeftView(v) {
        this.setterImpl(12, v, 'todoShiftsCountLeftView');
    }
    /**
     *  Type of the process. Can only be set on process creation. The states of each process type is DR_PLANO (NOT_STARTED -> ASKING_MEMBER_PREFERENCES -> NEEDING_APPROVAL -> APPROVE); MANUAL (NOT_STARTED -> ASKING_MEMBER_PREFERENCES -> MANUAL_SCHEDULING -> APPROVE); EARLY_BIRD (NOT_STARTED -> EARLY_BIRD_SCHEDULING -> EARLY_BIRD_FINISHED).
     *
     * @type {SchedulingApiAssignmentProcessType}
     */
    get type() {
        return this.data[13];
    }
    set type(v) {
        this.setterImpl(13, v, 'type');
    }
    /**
     *  Ids of members with missing prefs. Send to owner. Send during ASKING_MEMBER_PREFERENCES and all following states. Read-only.
     */
    get missingPrefsMemberIds() {
        return this.missingPrefsMemberIdsWrapper;
    }
    set missingPrefsMemberIdsTestSetter(v) {
        this.setterImpl(14, v.rawData, 'missingPrefsMemberIds', () => { this.missingPrefsMemberIdsWrapper = v; });
    }
    /**
     *  Can the requester edit this assignment-process? Read-only.
     *
     * @type {boolean}
     */
    get canEdit() {
        return this.data[15];
    }
    set canEdit(v) {
        this.setterImpl(15, v, 'canEdit');
    }
    _fixIds(_idReplacements) {
        this.shiftRefsWrapper._fixIds(_idReplacements);
        this.missingPrefsMemberIdsWrapper._fixIds(_idReplacements);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 16);
            data[1] = INITIALIZED_IN_BACKEND;
            if (data[4] === null)
                data[4] = Meta.createNewList();
            if (data[14] === null)
                data[14] = Meta.createNewList();
            data[15] = false;
        }
        // propagate new raw data to children
        this.shiftRefsWrapper._updateRawData(data ? data[4] : null, generateMissingData);
        this.missingPrefsMemberIdsWrapper._updateRawData(data ? data[14] : null, generateMissingData);
    }
    get dni() {
        return '137';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '137', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export var SchedulingApiAssignmentProcessState;
(function (SchedulingApiAssignmentProcessState) {
    SchedulingApiAssignmentProcessState[SchedulingApiAssignmentProcessState["NOT_STARTED"] = 1] = "NOT_STARTED";
    SchedulingApiAssignmentProcessState[SchedulingApiAssignmentProcessState["ASKING_MEMBER_PREFERENCES"] = 2] = "ASKING_MEMBER_PREFERENCES";
    SchedulingApiAssignmentProcessState[SchedulingApiAssignmentProcessState["NEEDING_APPROVAL"] = 3] = "NEEDING_APPROVAL";
    SchedulingApiAssignmentProcessState[SchedulingApiAssignmentProcessState["MANUAL_SCHEDULING"] = 4] = "MANUAL_SCHEDULING";
    SchedulingApiAssignmentProcessState[SchedulingApiAssignmentProcessState["APPROVE"] = 5] = "APPROVE";
    SchedulingApiAssignmentProcessState[SchedulingApiAssignmentProcessState["EARLY_BIRD_SCHEDULING"] = 6] = "EARLY_BIRD_SCHEDULING";
    SchedulingApiAssignmentProcessState[SchedulingApiAssignmentProcessState["EARLY_BIRD_FINISHED"] = 7] = "EARLY_BIRD_FINISHED";
})(SchedulingApiAssignmentProcessState || (SchedulingApiAssignmentProcessState = {}));
export class SchedulingApiAssignmentProcessShiftRefsBase extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'shiftRefs');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'shiftRefs',
            id: 'ASSIGNMENT_PROCESS_SHIFT_REFS',
            primitiveType: PApiPrimitiveTypes.ApiList,
        });
    }
    wrapItem(item, _generateMissingData) {
        const newWrapper = new SchedulingApiAssignmentProcessShiftRef(this.api);
        newWrapper._updateRawData(item, _generateMissingData);
        return newWrapper;
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return false;
    }
    createInstance(removeDestroyedItems) {
        return new SchedulingApiAssignmentProcessShiftRefs(this.api, removeDestroyedItems);
    }
    get dni() {
        return '141';
    }
    createNewItem(id = null) {
        const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('shiftRefs');
        return newItem;
    }
}
export class SchedulingApiAssignmentProcessShiftRef extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiAssignmentProcessShiftRef);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'assignmentProcessShiftRef',
            id: 'ASSIGNMENT_PROCESS_SHIFT_REF',
        });
        this.attributeInfoRequesterCanSetPref = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'requesterCanSetPref',
            id: 'ASSIGNMENT_PROCESS_SHIFT_REF_REQUESTER_CAN_SET_PREF',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoRequesterCanDoEarlyBird = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'requesterCanDoEarlyBird',
            id: 'ASSIGNMENT_PROCESS_SHIFT_REF_REQUESTER_CAN_DO_EARLY_BIRD',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : ShiftId.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  Can requester currently set shift.myPref?
     *
     * @type {boolean}
     */
    get requesterCanSetPref() {
        return this.data[1];
    }
    set requesterCanSetPref(v) {
        this.setterImpl(1, v, 'requesterCanSetPref');
    }
    /**
     *  Can requester currently set shift.earlyBirdAssignToMe?
     *
     * @type {boolean}
     */
    get requesterCanDoEarlyBird() {
        return this.data[2];
    }
    set requesterCanDoEarlyBird(v) {
        this.setterImpl(2, v, 'requesterCanDoEarlyBird');
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : ShiftId.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 3);
            data[1] = false;
            data[2] = false;
        }
        // propagate new raw data to children
    }
    get dni() {
        return '153';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '153', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export var SchedulingApiAssignmentProcessAssignmentState;
(function (SchedulingApiAssignmentProcessAssignmentState) {
    SchedulingApiAssignmentProcessAssignmentState[SchedulingApiAssignmentProcessAssignmentState["NONE_ASSIGNED"] = 1] = "NONE_ASSIGNED";
    SchedulingApiAssignmentProcessAssignmentState[SchedulingApiAssignmentProcessAssignmentState["PARTIALLY_ASSIGNED"] = 2] = "PARTIALLY_ASSIGNED";
    SchedulingApiAssignmentProcessAssignmentState[SchedulingApiAssignmentProcessAssignmentState["ALL_ASSIGNED"] = 3] = "ALL_ASSIGNED";
})(SchedulingApiAssignmentProcessAssignmentState || (SchedulingApiAssignmentProcessAssignmentState = {}));
export var SchedulingApiAssignmentProcessType;
(function (SchedulingApiAssignmentProcessType) {
    SchedulingApiAssignmentProcessType[SchedulingApiAssignmentProcessType["DR_PLANO"] = 1] = "DR_PLANO";
    SchedulingApiAssignmentProcessType[SchedulingApiAssignmentProcessType["MANUAL"] = 2] = "MANUAL";
    SchedulingApiAssignmentProcessType[SchedulingApiAssignmentProcessType["EARLY_BIRD"] = 3] = "EARLY_BIRD";
})(SchedulingApiAssignmentProcessType || (SchedulingApiAssignmentProcessType = {}));
export class SchedulingApiAssignmentProcessMissingPrefsMemberIds extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'missingPrefsMemberIds');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'missingPrefsMemberIds',
            id: 'ASSIGNMENT_PROCESS_MISSING_PREFS_MEMBER_IDS',
            primitiveType: PApiPrimitiveTypes.ApiList,
        });
        this.attributeInfoAssignmentProcessMissingPrefsMemberId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'assignmentProcessMissingPrefsMemberId',
            id: 'ASSIGNMENT_PROCESS_MISSING_PREFS_MEMBER_ID',
            primitiveType: PApiPrimitiveTypes.Id,
        });
    }
    wrapItem(item, _generateMissingData) {
        return Id.create(item);
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return true;
    }
    createInstance(removeDestroyedItems) {
        return new SchedulingApiAssignmentProcessMissingPrefsMemberIds(this.api, removeDestroyedItems);
    }
    get dni() {
        return '151';
    }
    createNewItem() {
        const newItemRaw = null;
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('missingPrefsMemberIds');
        return newItem;
    }
}
export class SchedulingApiMembersBase extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'members');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'members',
            id: 'MEMBERS',
            primitiveType: PApiPrimitiveTypes.ApiList,
        });
    }
    wrapItem(item, _generateMissingData) {
        const newWrapper = new SchedulingApiMember(this.api);
        newWrapper._updateRawData(item, _generateMissingData);
        return newWrapper;
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return false;
    }
    createInstance(removeDestroyedItems) {
        return new SchedulingApiMembers(this.api, removeDestroyedItems);
    }
    get dni() {
        return '7';
    }
    createNewItem(id = null) {
        const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('members');
        return newItem;
    }
}
export class SchedulingApiMemberBase extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiMember);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'member',
            id: 'MEMBER',
            canEdit: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) || (this.api.rightsService.isMe(this))))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return true;
                }
                return false;
            },
        });
        this.attributeInfoFirstName = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'firstName',
            id: 'MEMBER_FIRST_NAME',
            primitiveType: PApiPrimitiveTypes.string,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.string, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoLastName = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'lastName',
            id: 'MEMBER_LAST_NAME',
            primitiveType: PApiPrimitiveTypes.string,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.string, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoEmail = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'email',
            id: 'MEMBER_EMAIL',
            primitiveType: PApiPrimitiveTypes.Email,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Email, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoTrashed = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'trashed',
            id: 'MEMBER_TRASHED',
            primitiveType: PApiPrimitiveTypes.boolean,
            canEdit: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return true;
                }
                return false;
            },
        });
        this.attributeInfoMinMonthlyEarnings = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'minMonthlyEarnings',
            id: 'MEMBER_MIN_MONTHLY_EARNINGS',
            primitiveType: PApiPrimitiveTypes.Currency,
            show: function () {
                console.error('AttributeInfo for /scheduling -> MEMBER_MIN_MONTHLY_EARNINGS is not implemented yet. Please create a Jira issue in the current Sprint: https://drplano.atlassian.net/secure/CreateIssueDetails!init.jspa?pid=10003&issuetype=10101&summary=' + encodeURI('AttributeInfo for /scheduling -> MEMBER_MIN_MONTHLY_EARNINGS is not implemented yet') + '&assignee=557058%3Ae58fd015-3e1d-44b8-9131-aef274b1c571');
                return true;
            },
            canEdit: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return true;
                }
                return false;
            },
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Currency, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoMaxMonthlyEarnings = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'maxMonthlyEarnings',
            id: 'MEMBER_MAX_MONTHLY_EARNINGS',
            primitiveType: PApiPrimitiveTypes.Currency,
            show: function () {
                console.error('AttributeInfo for /scheduling -> MEMBER_MAX_MONTHLY_EARNINGS is not implemented yet. Please create a Jira issue in the current Sprint: https://drplano.atlassian.net/secure/CreateIssueDetails!init.jspa?pid=10003&issuetype=10101&summary=' + encodeURI('AttributeInfo for /scheduling -> MEMBER_MAX_MONTHLY_EARNINGS is not implemented yet') + '&assignee=557058%3Ae58fd015-3e1d-44b8-9131-aef274b1c571');
                return true;
            },
            canEdit: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return true;
                }
                return false;
            },
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Currency, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoDesiredMonthlyEarnings = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'desiredMonthlyEarnings',
            id: 'MEMBER_DESIRED_MONTHLY_EARNINGS',
            primitiveType: PApiPrimitiveTypes.Currency,
            show: function () {
                console.error('AttributeInfo for /scheduling -> MEMBER_DESIRED_MONTHLY_EARNINGS is not implemented yet. Please create a Jira issue in the current Sprint: https://drplano.atlassian.net/secure/CreateIssueDetails!init.jspa?pid=10003&issuetype=10101&summary=' + encodeURI('AttributeInfo for /scheduling -> MEMBER_DESIRED_MONTHLY_EARNINGS is not implemented yet') + '&assignee=557058%3Ae58fd015-3e1d-44b8-9131-aef274b1c571');
                return true;
            },
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Currency, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoAvgDaysPerWeek = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'avgDaysPerWeek',
            id: 'MEMBER_AVG_DAYS_PER_WEEK',
            primitiveType: PApiPrimitiveTypes.Days,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoAvgHoursPerDay = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'avgHoursPerDay',
            id: 'MEMBER_AVG_HOURS_PER_DAY',
            primitiveType: PApiPrimitiveTypes.Hours,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoBirthday = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'birthday',
            id: 'MEMBER_BIRTHDAY',
            primitiveType: PApiPrimitiveTypes.Date,
            show: function () {
                if (!((this.birthday || this.api.rightsService.hasManagerRightsForMember(this) || this.api.rightsService.isMe(this)))) {
                    return false;
                }
                return true;
            },
            canEdit: function () {
                if (!(((this.api.rightsService.hasManagerRightsForMember(this)) || (this.api.rightsService.isMe(this))))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(-1577926800000, true, PApiPrimitiveTypes.Date, undefined, undefined);
                        return null;
                    },
                    () => {
                        return this.api.validators.max(+this.api.pMoment.monthsFromNow(-1), true, PApiPrimitiveTypes.Date, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoPhone = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'phone',
            id: 'MEMBER_PHONE',
            primitiveType: PApiPrimitiveTypes.Tel,
        });
        this.attributeInfoGender = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'gender',
            id: 'MEMBER_GENDER',
            primitiveType: PApiPrimitiveTypes.Enum,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Enum, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoPassword = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'password',
            id: 'MEMBER_PASSWORD',
            primitiveType: PApiPrimitiveTypes.Password,
        });
        this.attributeInfoAddressStreet = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'addressStreet',
            id: 'MEMBER_ADDRESS_STREET',
            primitiveType: PApiPrimitiveTypes.string,
            show: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) || (this.api.rightsService.isMe(this))))) {
                    return false;
                }
                return true;
            },
        });
        this.attributeInfoAddressPostalCode = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'addressPostalCode',
            id: 'MEMBER_ADDRESS_POSTAL_CODE',
            primitiveType: PApiPrimitiveTypes.PostalCode,
            show: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) || (this.api.rightsService.isMe(this))))) {
                    return false;
                }
                return true;
            },
        });
        this.attributeInfoAddressCity = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'addressCity',
            id: 'MEMBER_ADDRESS_CITY',
            primitiveType: PApiPrimitiveTypes.string,
            show: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) || (this.api.rightsService.isMe(this))))) {
                    return false;
                }
                return true;
            },
        });
        this.attributeInfoEmploymentBegin = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'employmentBegin',
            id: 'MEMBER_EMPLOYMENT_BEGIN',
            primitiveType: PApiPrimitiveTypes.DateTime,
            show: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            canEdit: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return true;
                }
                return false;
            },
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(() => this.employmentEnd, true, PApiPrimitiveTypes.DateTime, 'MEMBER_EMPLOYMENT_END', undefined);
                        return null;
                    },
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.DateTime, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoEmploymentEnd = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'employmentEnd',
            id: 'MEMBER_EMPLOYMENT_END',
            primitiveType: PApiPrimitiveTypes.DateTime,
            show: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            canEdit: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return true;
                }
                return false;
            },
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(() => this.employmentBegin, true, PApiPrimitiveTypes.DateTime, 'MEMBER_EMPLOYMENT_BEGIN', undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoComments = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'comments',
            id: 'MEMBER_COMMENTS',
            primitiveType: PApiPrimitiveTypes.string,
            show: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            canEdit: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return true;
                }
                return false;
            },
        });
        this.attributeInfoPersonnelNumbers = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'personnelNumbers',
            id: 'MEMBER_PERSONNEL_NUMBERS',
            primitiveType: PApiPrimitiveTypes.string,
            show: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            canEdit: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return true;
                }
                return false;
            },
        });
        this.attributeInfoPlaceOfBirth = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'placeOfBirth',
            id: 'MEMBER_PLACE_OF_BIRTH',
            primitiveType: PApiPrimitiveTypes.string,
            show: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            canEdit: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return true;
                }
                return false;
            },
        });
        this.attributeInfoSocialSecurityNumber = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'socialSecurityNumber',
            id: 'MEMBER_SOCIAL_SECURITY_NUMBER',
            primitiveType: PApiPrimitiveTypes.string,
            show: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            canEdit: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return true;
                }
                return false;
            },
        });
        this.attributeInfoTaxId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'taxId',
            id: 'MEMBER_TAX_ID',
            primitiveType: PApiPrimitiveTypes.string,
            show: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            canEdit: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return true;
                }
                return false;
            },
        });
        this.attributeInfoHealthInsurance = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'healthInsurance',
            id: 'MEMBER_HEALTH_INSURANCE',
            primitiveType: PApiPrimitiveTypes.string,
            show: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            canEdit: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return true;
                }
                return false;
            },
        });
        this.attributeInfoNationality = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'nationality',
            id: 'MEMBER_NATIONALITY',
            primitiveType: PApiPrimitiveTypes.string,
            show: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            canEdit: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return true;
                }
                return false;
            },
        });
        this.attributeInfoDenomination = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'denomination',
            id: 'MEMBER_DENOMINATION',
            primitiveType: PApiPrimitiveTypes.string,
            show: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            canEdit: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return true;
                }
                return false;
            },
        });
        this.attributeInfoAccountIBAN = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'accountIBAN',
            id: 'MEMBER_ACCOUNT_IBAN',
            primitiveType: PApiPrimitiveTypes.Iban,
            show: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) || (this.api.rightsService.isMe(this))))) {
                    return false;
                }
                return true;
            },
        });
        this.attributeInfoAccountOwner = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'accountOwner',
            id: 'MEMBER_ACCOUNT_OWNER',
            primitiveType: PApiPrimitiveTypes.string,
            show: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) || (this.api.rightsService.isMe(this))))) {
                    return false;
                }
                return true;
            },
        });
        this.attributeInfoEmploymentContractsComment = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'employmentContractsComment',
            id: 'MEMBER_EMPLOYMENT_CONTRACTS_COMMENT',
            primitiveType: PApiPrimitiveTypes.string,
            show: function () {
                if (!((this.api.rightsService.hasManagerRightsForMember(this)))) {
                    return false;
                }
                return true;
            },
            canEdit: function () {
                if (!((this.api.rightsService.hasManagerRightsForMember(this)))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
        });
        this.attributeInfoMainJob = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'mainJob',
            id: 'MEMBER_MAIN_JOB',
            primitiveType: PApiPrimitiveTypes.boolean,
            canEdit: function () {
                if (!((this.api.rightsService.hasManagerRightsForMember(this)))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
        });
        this.rightGroupIdsWrapper = new SchedulingApiMemberRightGroupIds(this.api, false);
        this.assignableShiftModelsWrapper = new SchedulingApiAssignableShiftModels(this.api, false);
        this.changeSelectorWrapper = new SchedulingApiMemberChangeSelector(this.api);
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
        this.rightGroupIdsWrapper.parent = this;
        this.assignableShiftModelsWrapper.parent = this;
        this.changeSelectorWrapper.parent = this;
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  First name of the member
     *
     * @type {string}
     */
    get firstName() {
        return this.data[1];
    }
    set firstName(v) {
        this.setterImpl(1, v, 'firstName');
    }
    /**
     *  Last name of the member.
     *
     * @type {string}
     */
    get lastName() {
        return this.data[2];
    }
    set lastName(v) {
        this.setterImpl(2, v, 'lastName');
    }
    /**
     *  Email address of this member. (Note for Milad: This needs to be deserialized before "trashed" because trashed=false checks if current email is unused)
     *
     * @type {Email}
     */
    get email() {
        return this.data[3];
    }
    set email(v) {
        this.setterImpl(3, v, 'email');
    }
    /**
     *  Is this member trashed?
     *
     * @type {boolean}
     */
    get trashed() {
        return this.data[4];
    }
    set trashed(v) {
        this.setterImpl(4, v, 'trashed');
    }
    /**
     *  What is the minimum this member should earn?
     *
     * @type {Currency}
     */
    get minMonthlyEarnings() {
        return this.data[5];
    }
    set minMonthlyEarnings(v) {
        this.setterImpl(5, v, 'minMonthlyEarnings');
    }
    /**
     *  What is the maximum this member should earn?
     *
     * @type {Currency}
     */
    get maxMonthlyEarnings() {
        return this.data[6];
    }
    set maxMonthlyEarnings(v) {
        this.setterImpl(6, v, 'maxMonthlyEarnings');
    }
    /**
     *  What is the desired earnings of this member?
     *
     * @type {Currency}
     */
    get desiredMonthlyEarnings() {
        return this.data[7];
    }
    set desiredMonthlyEarnings(v) {
        this.setterImpl(7, v, 'desiredMonthlyEarnings');
    }
    /**
     *  A list of ids of the right groups assigned to this member. This list must contain at least one item.
     */
    get rightGroupIds() {
        return this.rightGroupIdsWrapper;
    }
    set rightGroupIdsTestSetter(v) {
        this.setterImpl(8, v.rawData, 'rightGroupIds', () => { this.rightGroupIdsWrapper = v; });
    }
    /**
     *  Only send for data == "reporting" and to client-owners. How many days per week does this member work on average.
     *
     * @type {Days}
     */
    get avgDaysPerWeek() {
        return this.data[9];
    }
    set avgDaysPerWeekTestSetter(v) {
        this.setterImpl(9, v, 'avgDaysPerWeek');
    }
    /**
     *  Only send for data == "reporting" and to client-owners. How many hours per day does this member work on average.
     *
     * @type {Hours}
     */
    get avgHoursPerDay() {
        return this.data[10];
    }
    set avgHoursPerDayTestSetter(v) {
        this.setterImpl(10, v, 'avgHoursPerDay');
    }
    /**
     *  A list of all assignable shift models. Can be used with "changeSelector".
     */
    get assignableShiftModels() {
        return this.assignableShiftModelsWrapper;
    }
    set assignableShiftModelsTestSetter(v) {
        this.setterImpl(11, v.rawData, 'assignableShiftModels', () => { this.assignableShiftModelsWrapper = v; });
    }
    /**
     *  Members birthday.
     *
     * @type {Date}
     */
    get birthday() {
        return this.data[12];
    }
    set birthday(v) {
        this.setterImpl(12, v, 'birthday');
    }
    /**
     * (Detail)  Phone number of the member.
     *
     * @type {Tel}
     */
    get phone() {
        return this.data[13];
    }
    set phone(v) {
        this.setterImpl(13, v, 'phone');
    }
    /**
     * (Detail)  The gender of the user.
     *
     * @type {SchedulingApiGender}
     */
    get gender() {
        return this.data[14];
    }
    set gender(v) {
        this.setterImpl(14, v, 'gender');
    }
    /**
     * (Detail)  Password of this member. Api always returns "xxxxxx". It is used for setting a new password.
     *
     * @type {Password}
     */
    get password() {
        return this.data[15];
    }
    set password(v) {
        this.setterImpl(15, v, 'password');
    }
    /**
     * (Detail)  Street and house number of member.
     *
     * @type {string}
     */
    get addressStreet() {
        return this.data[16];
    }
    set addressStreet(v) {
        this.setterImpl(16, v, 'addressStreet');
    }
    /**
     * (Detail)  Postal code of member.
     *
     * @type {PostalCode}
     */
    get addressPostalCode() {
        return this.data[17];
    }
    set addressPostalCode(v) {
        this.setterImpl(17, v, 'addressPostalCode');
    }
    /**
     * (Detail)  City of member.
     *
     * @type {string}
     */
    get addressCity() {
        return this.data[18];
    }
    set addressCity(v) {
        this.setterImpl(18, v, 'addressCity');
    }
    /**
     * (Detail)  When did the employment of this member begin?
     *
     * @type {DateTime}
     */
    get employmentBegin() {
        return this.data[19];
    }
    set employmentBegin(v) {
        this.setterImpl(19, v, 'employmentBegin');
    }
    /**
     * (Detail)  When did the employment of this member end?
     *
     * @type {DateTime}
     */
    get employmentEnd() {
        return this.data[20];
    }
    set employmentEnd(v) {
        this.setterImpl(20, v, 'employmentEnd');
    }
    /**
     * (Detail)  Comments related to the member.
     *
     * @type {string}
     */
    get comments() {
        return this.data[21];
    }
    set comments(v) {
        this.setterImpl(21, v, 'comments');
    }
    /**
     * (Detail)  Personnel numbers of this member.
     *
     * @type {string}
     */
    get personnelNumbers() {
        return this.data[22];
    }
    set personnelNumbers(v) {
        this.setterImpl(22, v, 'personnelNumbers');
    }
    /**
     * (Detail)  Place of birth of this member.
     *
     * @type {string}
     */
    get placeOfBirth() {
        return this.data[23];
    }
    set placeOfBirth(v) {
        this.setterImpl(23, v, 'placeOfBirth');
    }
    /**
     * (Detail)  Social security number of this member.
     *
     * @type {string}
     */
    get socialSecurityNumber() {
        return this.data[24];
    }
    set socialSecurityNumber(v) {
        this.setterImpl(24, v, 'socialSecurityNumber');
    }
    /**
     * (Detail)  Tax ID of this member.
     *
     * @type {string}
     */
    get taxId() {
        return this.data[25];
    }
    set taxId(v) {
        this.setterImpl(25, v, 'taxId');
    }
    /**
     * (Detail)  Health insurance of this member.
     *
     * @type {string}
     */
    get healthInsurance() {
        return this.data[26];
    }
    set healthInsurance(v) {
        this.setterImpl(26, v, 'healthInsurance');
    }
    /**
     * (Detail)  The nationality of the member.
     *
     * @type {string}
     */
    get nationality() {
        return this.data[27];
    }
    set nationality(v) {
        this.setterImpl(27, v, 'nationality');
    }
    /**
     * (Detail)  Denomination of this member.
     *
     * @type {string}
     */
    get denomination() {
        return this.data[28];
    }
    set denomination(v) {
        this.setterImpl(28, v, 'denomination');
    }
    /**
     * (Detail)  Bank account IBAN of this member.
     *
     * @type {Iban}
     */
    get accountIBAN() {
        return this.data[29];
    }
    set accountIBAN(v) {
        this.setterImpl(29, v, 'accountIBAN');
    }
    /**
     * (Detail)  Bank account owner of this member.
     *
     * @type {string}
     */
    get accountOwner() {
        return this.data[30];
    }
    set accountOwner(v) {
        this.setterImpl(30, v, 'accountOwner');
    }
    /**
     * (Detail)  Comment for the employment contracts. Only visible to members with manager rights.
     *
     * @type {string}
     */
    get employmentContractsComment() {
        return this.data[31];
    }
    set employmentContractsComment(v) {
        this.setterImpl(31, v, 'employmentContractsComment');
    }
    /**
     * (Detail)  Is this the main job of the member?
     *
     * @type {boolean}
     */
    get mainJob() {
        return this.data[32];
    }
    set mainJob(v) {
        this.setterImpl(32, v, 'mainJob');
    }
    /**
     * (Detail)  Set by user to define what should - additionally to this member - be modified.
     */
    get changeSelector() {
        return this.changeSelectorWrapper;
    }
    set changeSelectorTestSetter(v) {
        this.setterImpl(33, v.rawData, 'changeSelector', () => { this.changeSelectorWrapper = v; });
    }
    _fixIds(_idReplacements) {
        this.rightGroupIdsWrapper._fixIds(_idReplacements);
        this.assignableShiftModelsWrapper._fixIds(_idReplacements);
        this.changeSelectorWrapper._fixIds(_idReplacements);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 34);
            data[4] = false;
            if (data[8] === null)
                data[8] = Meta.createNewList();
            if (data[11] === null)
                data[11] = Meta.createNewList();
            data[15] = INITIALIZED_IN_BACKEND;
            data[32] = false;
            if (data[33] === null)
                data[33] = Meta.createNewObject(false);
        }
        // propagate new raw data to children
        this.rightGroupIdsWrapper._updateRawData(data ? data[8] : null, generateMissingData);
        this.assignableShiftModelsWrapper._updateRawData(data ? data[11] : null, generateMissingData);
        this.changeSelectorWrapper._updateRawData(data ? data[33] : null, generateMissingData);
    }
    get dni() {
        return '157';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '157', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class SchedulingApiMemberRightGroupIds extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'rightGroupIds');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'rightGroupIds',
            id: 'MEMBER_RIGHT_GROUP_IDS',
            primitiveType: PApiPrimitiveTypes.ApiList,
            canEdit: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return true;
                }
                return false;
            },
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.ApiList, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoMemberRightGroupId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'memberRightGroupId',
            id: 'MEMBER_RIGHT_GROUP_ID',
            primitiveType: PApiPrimitiveTypes.Id,
        });
    }
    wrapItem(item, _generateMissingData) {
        return Id.create(item);
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return true;
    }
    createInstance(removeDestroyedItems) {
        return new SchedulingApiMemberRightGroupIds(this.api, removeDestroyedItems);
    }
    get dni() {
        return '165';
    }
    createNewItem() {
        const newItemRaw = null;
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('rightGroupIds');
        return newItem;
    }
}
export class SchedulingApiMemberAssignableShiftModelsBase extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'assignableShiftModels');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'assignableShiftModels',
            id: 'MEMBER_ASSIGNABLE_SHIFT_MODELS',
            primitiveType: PApiPrimitiveTypes.ApiList,
            canEdit: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return true;
                }
                return false;
            },
        });
    }
    wrapItem(item, _generateMissingData) {
        const newWrapper = new SchedulingApiAssignableShiftModel(this.api);
        newWrapper._updateRawData(item, _generateMissingData);
        return newWrapper;
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return false;
    }
    createInstance(removeDestroyedItems) {
        return new SchedulingApiAssignableShiftModels(this.api, removeDestroyedItems);
    }
    get dni() {
        return '168';
    }
    createNewItem(id = null) {
        const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('assignableShiftModels');
        return newItem;
    }
}
export class SchedulingApiMemberAssignableShiftModelBase extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiAssignableShiftModel);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'memberAssignableShiftModel',
            id: 'MEMBER_ASSIGNABLE_SHIFT_MODEL',
        });
        this.attributeInfoHourlyEarnings = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'hourlyEarnings',
            id: 'MEMBER_ASSIGNABLE_SHIFT_MODEL_EARNINGS',
            primitiveType: PApiPrimitiveTypes.Currency,
        });
        this.attributeInfoShiftModelId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'shiftModelId',
            id: 'MEMBER_ASSIGNABLE_SHIFT_MODEL_ID',
            primitiveType: PApiPrimitiveTypes.Id,
        });
        this.shiftModelIdWrapper = null;
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  Members hourly earnings for this shift model
     *
     * @type {Currency}
     */
    get hourlyEarnings() {
        return this.data[1];
    }
    set hourlyEarnings(v) {
        this.setterImpl(1, v, 'hourlyEarnings');
    }
    /**
     *  Id of assignable shift model
     *
     * @type {Id}
     */
    get shiftModelId() {
        return this.shiftModelIdWrapper;
    }
    set shiftModelId(v) {
        this.setterImpl(2, v, 'shiftModelId', () => { this.shiftModelIdWrapper = v; });
    }
    _fixIds(_idReplacements) {
        this.data[2] = Meta.getReplacedId(this.data[2], _idReplacements);
        this.shiftModelIdWrapper = Id.create(this.data[2]);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 3);
        }
        // propagate new raw data to children
        if (!Meta.isSameId(data ? data[2] : null, this.shiftModelIdWrapper))
            this.shiftModelIdWrapper = data && data[2] ? Id.create(data[2]) : null;
    }
    get dni() {
        return '192';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '192', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export var SchedulingApiGender;
(function (SchedulingApiGender) {
    SchedulingApiGender[SchedulingApiGender["MALE"] = 1] = "MALE";
    SchedulingApiGender[SchedulingApiGender["FEMALE"] = 2] = "FEMALE";
    SchedulingApiGender[SchedulingApiGender["DIVERSE"] = 3] = "DIVERSE";
})(SchedulingApiGender || (SchedulingApiGender = {}));
export class SchedulingApiMemberChangeSelector extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiMemberChangeSelector);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'changeSelector',
            id: 'MEMBER_CHANGE_SELECTOR',
        });
        this.attributeInfoStart = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'start',
            id: 'MEMBER_CHANGE_SELECTOR_START',
            primitiveType: PApiPrimitiveTypes.Date,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(+this.api.pMoment.monthsFromNow(-5), true, PApiPrimitiveTypes.Date, undefined, undefined);
                        return null;
                    },
                    () => {
                        return this.api.validators.max(+this.api.pMoment.monthsFromNow(12), true, PApiPrimitiveTypes.Date, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  The start time from which the existing shifts should be modified.
     *
     * @type {Date}
     */
    get start() {
        return this.data[1];
    }
    set start(v) {
        this.setterImpl(1, v, 'start');
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 2);
        }
        // propagate new raw data to children
    }
    get dni() {
        return '190';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '190', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class SchedulingApiBookingsBase extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'bookings');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'bookings',
            id: 'BOOKINGS',
            primitiveType: PApiPrimitiveTypes.ApiList,
            canEdit: function () {
                if (!((this.api.rightsService.userCanWriteBookings()))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
            vars: {
                cannotEditHint: () => this.api.data.shiftModels.length === 0 ? 'Du brauchst mindestens eine buchbare Tätigkeit, um Buchungen erstellen zu können.' : 'Dir fehlen die Rechte, um Buchungen erstellen zu können.',
            }
        });
    }
    wrapItem(item, _generateMissingData) {
        const newWrapper = new SchedulingApiBooking(this.api);
        newWrapper._updateRawData(item, _generateMissingData);
        return newWrapper;
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return false;
    }
    createInstance(removeDestroyedItems) {
        return new SchedulingApiBookings(this.api, removeDestroyedItems);
    }
    get dni() {
        return '8';
    }
    createNewItem(id = null) {
        const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('bookings');
        return newItem;
    }
}
export class SchedulingApiBookingBase extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiBooking);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'booking',
            id: 'BOOKING',
            canEdit: function () {
                if (!((this.api.rightsService.userCanWriteBooking(this)))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
        });
        this.attributeInfoState = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'state',
            id: 'BOOKING_STATE',
            primitiveType: PApiPrimitiveTypes.Enum,
        });
        this.attributeInfoOwnerComment = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'ownerComment',
            id: 'BOOKING_OWNER_COMMENT',
            primitiveType: PApiPrimitiveTypes.string,
        });
        this.attributeInfoBookingNumber = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'bookingNumber',
            id: 'BOOKING_BOOKING_NUMBER',
            primitiveType: PApiPrimitiveTypes.Integer,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoCourseSelector = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'courseSelector',
            id: 'BOOKING_COURSE_SELECTOR',
            primitiveType: PApiPrimitiveTypes.ShiftSelector,
        });
        this.attributeInfoShiftModelId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'shiftModelId',
            id: 'BOOKING_SHIFT_MODEL_ID',
            primitiveType: PApiPrimitiveTypes.Id,
        });
        this.attributeInfoDateOfBooking = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'dateOfBooking',
            id: 'BOOKING_DATE_OF_BOOKING',
            primitiveType: PApiPrimitiveTypes.DateTime,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoBookingComment = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'bookingComment',
            id: 'BOOKING_BOOKING_COMMENT',
            primitiveType: PApiPrimitiveTypes.string,
        });
        this.attributeInfoAllShiftsRemoved = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'allShiftsRemoved',
            id: 'BOOKING_ALL_SHIFTS_REMOVED',
            primitiveType: PApiPrimitiveTypes.boolean,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoFirstName = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'firstName',
            id: 'BOOKING_FIRST_NAME',
            primitiveType: PApiPrimitiveTypes.string,
        });
        this.attributeInfoLastName = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'lastName',
            id: 'BOOKING_LAST_NAME',
            primitiveType: PApiPrimitiveTypes.string,
        });
        this.attributeInfoFirstShiftStart = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'firstShiftStart',
            id: 'BOOKING_FIRST_SHIFT_START',
            primitiveType: PApiPrimitiveTypes.DateTime,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoParticipantCount = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'participantCount',
            id: 'BOOKING_PARTICIPANT_COUNT',
            primitiveType: PApiPrimitiveTypes.Integer,
        });
        this.attributeInfoCurrentlyPaid = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'currentlyPaid',
            id: 'BOOKING_CURRENTLY_PAID',
            primitiveType: PApiPrimitiveTypes.Currency,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoCancellationFee = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'cancellationFee',
            id: 'BOOKING_CANCELLATION_FEE',
            primitiveType: PApiPrimitiveTypes.Currency,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Currency, undefined);
                        return null;
                    },
                    () => {
                        return this.api.validators.min(0, true, PApiPrimitiveTypes.Currency, undefined, undefined);
                        return null;
                    },
                    () => {
                        return this.api.validators.max(10000, true, PApiPrimitiveTypes.Currency, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoOverallTariffId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'overallTariffId',
            id: 'BOOKING_OVERALL_TARIFF_ID',
            primitiveType: PApiPrimitiveTypes.Id,
        });
        this.attributeInfoFirstShiftEnd = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'firstShiftEnd',
            id: 'BOOKING_FIRST_SHIFT_END',
            primitiveType: PApiPrimitiveTypes.DateTime,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoFirstShiftSelector = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'firstShiftSelector',
            id: 'BOOKING_FIRST_SHIFT_SELECTOR',
            primitiveType: PApiPrimitiveTypes.ShiftId,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoAttended = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'attended',
            id: 'BOOKING_ATTENDED',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoCanWriteAttended = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'canWriteAttended',
            id: 'BOOKING_CAN_WRITE_ATTENDED',
            primitiveType: PApiPrimitiveTypes.boolean,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoAttendedSetByPos = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'attendedSetByPos',
            id: 'BOOKING_ATTENDED_SET_BY_POS',
            primitiveType: PApiPrimitiveTypes.boolean,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoDateOfBirth = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'dateOfBirth',
            id: 'BOOKING_DATE_OF_BIRTH',
            primitiveType: PApiPrimitiveTypes.Date,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Date, undefined);
                        return null;
                    },
                    () => {
                        return this.api.validators.min(-1577926800000, true, PApiPrimitiveTypes.Date, undefined, undefined);
                        return null;
                    },
                    () => {
                        return this.api.validators.max(+this.api.pMoment.m().add(0, 'minutes'), true, PApiPrimitiveTypes.Date, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoStreetAndHouseNumber = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'streetAndHouseNumber',
            id: 'BOOKING_STREET_AND_HOUSE_NUMBER',
            primitiveType: PApiPrimitiveTypes.string,
        });
        this.attributeInfoCity = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'city',
            id: 'BOOKING_CITY',
            primitiveType: PApiPrimitiveTypes.string,
        });
        this.attributeInfoPostalCode = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'postalCode',
            id: 'BOOKING_POSTAL_CODE',
            primitiveType: PApiPrimitiveTypes.PostalCode,
        });
        this.attributeInfoEmail = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'email',
            id: 'BOOKING_EMAIL',
            primitiveType: PApiPrimitiveTypes.Email,
        });
        this.attributeInfoPhoneMobile = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'phoneMobile',
            id: 'BOOKING_PHONE_MOBILE',
            primitiveType: PApiPrimitiveTypes.Tel,
        });
        this.attributeInfoPhoneLandline = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'phoneLandline',
            id: 'BOOKING_PHONE_LANDLINE',
            primitiveType: PApiPrimitiveTypes.Tel,
        });
        this.attributeInfoPaymentMethodId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'paymentMethodId',
            id: 'BOOKING_PAYMENT_METHOD_ID',
            primitiveType: PApiPrimitiveTypes.Id,
        });
        this.attributeInfoDesiredDate = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'desiredDate',
            id: 'BOOKING_DESIRED_DATE',
            primitiveType: PApiPrimitiveTypes.string,
        });
        this.attributeInfoWantsNewsletter = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'wantsNewsletter',
            id: 'BOOKING_WANTS_NEWSLETTER',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoPaidBeforeTransactionListIntroduction = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'paidBeforeTransactionListIntroduction',
            id: 'BOOKING_PAID_BEFORE_TRANSACTION_LIST_INTRODUCTION',
            primitiveType: PApiPrimitiveTypes.Currency,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoCompany = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'company',
            id: 'BOOKING_COMPANY',
            primitiveType: PApiPrimitiveTypes.string,
        });
        this.attributeInfoAdditionalFieldValue = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'additionalFieldValue',
            id: 'BOOKING_ADDITIONAL_FIELD_VALUE',
            primitiveType: PApiPrimitiveTypes.string,
        });
        this.attributeInfoAgeMin = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'ageMin',
            id: 'BOOKING_AGE_MIN',
            primitiveType: PApiPrimitiveTypes.Integer,
        });
        this.attributeInfoAgeMax = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'ageMax',
            id: 'BOOKING_AGE_MAX',
            primitiveType: PApiPrimitiveTypes.Integer,
        });
        this.attributeInfoCancellationPolicyId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'cancellationPolicyId',
            id: 'BOOKING_CANCELLATION_POLICY_ID',
            primitiveType: PApiPrimitiveTypes.Id,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoHasRightOfWithdrawal = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'hasRightOfWithdrawal',
            id: 'BOOKING_HAS_RIGHT_OF_WITHDRAWAL',
            primitiveType: PApiPrimitiveTypes.boolean,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoApplicableCancellationFeePeriodId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'applicableCancellationFeePeriodId',
            id: 'BOOKING_APPLICABLE_CANCELLATION_FEE_PERIOD_ID',
            primitiveType: PApiPrimitiveTypes.Id,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoRefundLimitDueToOnlineBalance = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'refundLimitDueToOnlineBalance',
            id: 'BOOKING_ACCOUNT_REFUND_LIMIT_DUE_TO_ONLINE_BALANCE',
            primitiveType: PApiPrimitiveTypes.Currency,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoIsAnonymized = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'isAnonymized',
            id: 'BOOKING_IS_ANONYMIZED',
            primitiveType: PApiPrimitiveTypes.boolean,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoTestingDeferredPaymentToken = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'testingDeferredPaymentToken',
            id: 'BOOKING_TESTING_DEFERRED_PAYMENT_TOKEN',
            primitiveType: PApiPrimitiveTypes.string,
            show: function () {
                return true;
            },
            canEdit: () => false,
            readMode: () => true,
        });
        this.courseSelectorWrapper = null;
        this.shiftModelIdWrapper = null;
        this.participantsWrapper = new SchedulingApiBookingParticipants(this.api, false);
        this.overallTariffIdWrapper = null;
        this.firstShiftSelectorWrapper = null;
        this.paymentMethodIdWrapper = null;
        this.cancellationPolicyIdWrapper = null;
        this.applicableCancellationFeePeriodIdWrapper = null;
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
        this.participantsWrapper.parent = this;
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  Current state of this booking
     *
     * @type {SchedulingApiBookingState}
     */
    get state() {
        return this.data[1];
    }
    set state(v) {
        this.setterImpl(1, v, 'state');
    }
    /**
     *  Internal comment
     *
     * @type {string}
     */
    get ownerComment() {
        return this.data[2];
    }
    set ownerComment(v) {
        this.setterImpl(2, v, 'ownerComment');
    }
    /**
     *  Unique booking number.
     *
     * @type {Integer}
     */
    get bookingNumber() {
        return this.data[3];
    }
    set bookingNumberTestSetter(v) {
        this.setterImpl(3, v, 'bookingNumber');
    }
    /**
     *  A shift-selector selecting a shift or a whole packet. When setting this value you can set it to the selector of a shift and in case this shift belongs to a packet, backend will automatically change it to the packet selector.
     *
     * @type {ShiftSelector}
     */
    get courseSelector() {
        return this.courseSelectorWrapper;
    }
    set courseSelector(v) {
        this.setterImpl(4, v, 'courseSelector', () => { this.courseSelectorWrapper = v; });
    }
    /**
     *  The shift-model to which this booking belongs.
     *
     * @type {Id}
     */
    get shiftModelId() {
        return this.shiftModelIdWrapper;
    }
    set shiftModelId(v) {
        this.setterImpl(5, v, 'shiftModelId', () => { this.shiftModelIdWrapper = v; });
    }
    /**
     *  Date when booking was created.
     *
     * @type {DateTime}
     */
    get dateOfBooking() {
        return this.data[6];
    }
    set dateOfBookingTestSetter(v) {
        this.setterImpl(6, v, 'dateOfBooking');
    }
    /**
     *  A comment being given by the booking person during the booking process.
     *
     * @type {string}
     */
    get bookingComment() {
        return this.data[7];
    }
    set bookingComment(v) {
        this.setterImpl(7, v, 'bookingComment');
    }
    /**
     *  Have all shifts associated which this booking been removed? Read only.
     *
     * @type {boolean}
     */
    get allShiftsRemoved() {
        return this.data[8];
    }
    set allShiftsRemovedTestSetter(v) {
        this.setterImpl(8, v, 'allShiftsRemoved');
    }
    /**
     *  First name of the booking person.
     *
     * @type {string}
     */
    get firstName() {
        return this.data[9];
    }
    set firstName(v) {
        this.setterImpl(9, v, 'firstName');
    }
    /**
     *  Last name of the booking person.
     *
     * @type {string}
     */
    get lastName() {
        return this.data[10];
    }
    set lastName(v) {
        this.setterImpl(10, v, 'lastName');
    }
    /**
     *  Start time of first not removed course shift. If all course shifts are removed then time of first original shift is taken. Is "null" when no shift is associated with this booking. Read only.
     *
     * @type {DateTime}
     */
    get firstShiftStart() {
        return this.data[11];
    }
    set firstShiftStartTestSetter(v) {
        this.setterImpl(11, v, 'firstShiftStart');
    }
    /**
     *  The participant count of this booking. Should only be defined manually when shiftModel.onlyWholeCourseBookable == true. Otherwise this value will be automatically determined by backend according to participants list.
     *
     * @type {Integer}
     */
    get participantCount() {
        return this.data[12];
    }
    set participantCount(v) {
        this.setterImpl(12, v, 'participantCount');
    }
    /**
     *  How much has currently been paid by the booking person.
     *
     * @type {Currency}
     */
    get currentlyPaid() {
        return this.data[13];
    }
    set currentlyPaidTestSetter(v) {
        this.setterImpl(13, v, 'currentlyPaid');
    }
    /**
     *  The cancellation fee to be paid for this booking.
     *
     * @type {Currency}
     */
    get cancellationFee() {
        return this.data[14];
    }
    set cancellationFee(v) {
        this.setterImpl(14, v, 'cancellationFee');
    }
    /**
     *  A list of participants belonging to this booking. Should only be defined when shiftModel.onlyWholeCourseBookable == false.
     */
    get participants() {
        return this.participantsWrapper;
    }
    set participantsTestSetter(v) {
        this.setterImpl(15, v.rawData, 'participants', () => { this.participantsWrapper = v; });
    }
    /**
     *  The overall tariff of the booking. Should only be defined when shiftModel.onlyWholeCourseBookable == true. Otherwise the tariff will be defined for each participant.
     *
     * @type {Id}
     */
    get overallTariffId() {
        return this.overallTariffIdWrapper;
    }
    set overallTariffId(v) {
        this.setterImpl(16, v, 'overallTariffId', () => { this.overallTariffIdWrapper = v; });
    }
    /**
     * (Detail)  End time of first not removed course shift. If all course shifts are removed then time of first original shift is taken. Is "null" when no shift is associated with this booking. Read only.
     *
     * @type {DateTime}
     */
    get firstShiftEnd() {
        return this.data[17];
    }
    set firstShiftEndTestSetter(v) {
        this.setterImpl(17, v, 'firstShiftEnd');
    }
    /**
     * (Detail)  The shift-selector of the first not removed course shift. If all course shifts are removed then shift-selector of the original first shift is returned.
     *
     * @type {ShiftId}
     */
    get firstShiftSelector() {
        return this.firstShiftSelectorWrapper;
    }
    set firstShiftSelectorTestSetter(v) {
        this.setterImpl(18, v, 'firstShiftSelector', () => { this.firstShiftSelectorWrapper = v; });
    }
    /**
     * (Detail)  Has the booking been attended? Show this only when the booking has participants. If not, then "null" will be returned by the api in which case you should look at "participant.attended".
     *
     * @type {boolean}
     */
    get attended() {
        return this.data[19];
    }
    set attended(v) {
        this.setterImpl(19, v, 'attended');
    }
    /**
     * (Detail)  Can requester write booking.attended or participant.attended?
     *
     * @type {boolean}
     */
    get canWriteAttended() {
        return this.data[20];
    }
    set canWriteAttendedTestSetter(v) {
        this.setterImpl(20, v, 'canWriteAttended');
    }
    /**
     * (Detail)  Was the attended attribute set the POS system?
     *
     * @type {boolean}
     */
    get attendedSetByPos() {
        return this.data[21];
    }
    set attendedSetByPosTestSetter(v) {
        this.setterImpl(21, v, 'attendedSetByPos');
    }
    /**
     * (Detail)  Date of birth of the booking person.
     *
     * @type {Date}
     */
    get dateOfBirth() {
        return this.data[22];
    }
    set dateOfBirth(v) {
        this.setterImpl(22, v, 'dateOfBirth');
    }
    /**
     * (Detail)  Street and house number of the booking person.
     *
     * @type {string}
     */
    get streetAndHouseNumber() {
        return this.data[23];
    }
    set streetAndHouseNumber(v) {
        this.setterImpl(23, v, 'streetAndHouseNumber');
    }
    /**
     * (Detail)  City of the booking person.
     *
     * @type {string}
     */
    get city() {
        return this.data[24];
    }
    set city(v) {
        this.setterImpl(24, v, 'city');
    }
    /**
     * (Detail)  Postal code of the booking person.
     *
     * @type {PostalCode}
     */
    get postalCode() {
        return this.data[25];
    }
    set postalCode(v) {
        this.setterImpl(25, v, 'postalCode');
    }
    /**
     * (Detail)  Email of the booking person.
     *
     * @type {Email}
     */
    get email() {
        return this.data[26];
    }
    set email(v) {
        this.setterImpl(26, v, 'email');
    }
    /**
     * (Detail)  Mobile phone of the booking person.
     *
     * @type {Tel}
     */
    get phoneMobile() {
        return this.data[27];
    }
    set phoneMobile(v) {
        this.setterImpl(27, v, 'phoneMobile');
    }
    /**
     * (Detail)  Landline phone of the booking person.
     *
     * @type {Tel}
     */
    get phoneLandline() {
        return this.data[28];
    }
    set phoneLandline(v) {
        this.setterImpl(28, v, 'phoneLandline');
    }
    /**
     * (Detail)  The payment-method being selected by the booking person.
     *
     * @type {Id}
     */
    get paymentMethodId() {
        return this.paymentMethodIdWrapper;
    }
    set paymentMethodId(v) {
        this.setterImpl(29, v, 'paymentMethodId', () => { this.paymentMethodIdWrapper = v; });
    }
    /**
     * (Detail)  The desired date description being given by the booking person.
     *
     * @type {string}
     */
    get desiredDate() {
        return this.data[30];
    }
    set desiredDate(v) {
        this.setterImpl(30, v, 'desiredDate');
    }
    /**
     * (Detail)  Does the booking person wants newsletter?
     *
     * @type {boolean}
     */
    get wantsNewsletter() {
        return this.data[31];
    }
    set wantsNewsletter(v) {
        this.setterImpl(31, v, 'wantsNewsletter');
    }
    /**
     * (Detail)  The amount which was paid before we introduced the detailed transaction list for each bookable. Ignore it when it is "null".
     *
     * @type {Currency}
     */
    get paidBeforeTransactionListIntroduction() {
        return this.data[32];
    }
    set paidBeforeTransactionListIntroductionTestSetter(v) {
        this.setterImpl(32, v, 'paidBeforeTransactionListIntroduction');
    }
    /**
     * (Detail)  Company of the booking person.
     *
     * @type {string}
     */
    get company() {
        return this.data[33];
    }
    set company(v) {
        this.setterImpl(33, v, 'company');
    }
    /**
     * (Detail)  Additional field value for the whole booking. Should only be shown when booking has an overallTariff with "overallTariff.additionalFieldLabel" defined.
     *
     * @type {string}
     */
    get additionalFieldValue() {
        return this.data[34];
    }
    set additionalFieldValue(v) {
        this.setterImpl(34, v, 'additionalFieldValue');
    }
    /**
     * (Detail)  Description about min average age of the participants. Can only be defined when shiftModel.onlyWholeCourseBookable == true.
     *
     * @type {Integer}
     */
    get ageMin() {
        return this.data[35];
    }
    set ageMin(v) {
        this.setterImpl(35, v, 'ageMin');
    }
    /**
     * (Detail)  Description about max average age of the participants. Can only be defined when shiftModel.onlyWholeCourseBookable == true.
     *
     * @type {Integer}
     */
    get ageMax() {
        return this.data[36];
    }
    set ageMax(v) {
        this.setterImpl(36, v, 'ageMax');
    }
    /**
     * (Detail)  The id of the cancellation-policy used by this booking.
     *
     * @type {Id}
     */
    get cancellationPolicyId() {
        return this.cancellationPolicyIdWrapper;
    }
    set cancellationPolicyIdTestSetter(v) {
        this.setterImpl(37, v, 'cancellationPolicyId', () => { this.cancellationPolicyIdWrapper = v; });
    }
    /**
     * (Detail)  Has the booking person have write of withdrawal at this moment?
     *
     * @type {boolean}
     */
    get hasRightOfWithdrawal() {
        return this.data[38];
    }
    set hasRightOfWithdrawalTestSetter(v) {
        this.setterImpl(38, v, 'hasRightOfWithdrawal');
    }
    /**
     * (Detail)  The fee-period id of the cancellation-policy "cancellationPolicyId" which should be applied at this moment.
     *
     * @type {Id}
     */
    get applicableCancellationFeePeriodId() {
        return this.applicableCancellationFeePeriodIdWrapper;
    }
    set applicableCancellationFeePeriodIdTestSetter(v) {
        this.setterImpl(39, v, 'applicableCancellationFeePeriodId', () => { this.applicableCancellationFeePeriodIdWrapper = v; });
    }
    /**
     * (Detail)  The max refund value when limited by online balance. This value is send to everyone who can trigger online refunds. Thus as a security measure it is only send when online balance limits the refund amount to not leak the online balance to unauthorized users. Otherwise "null" is returned.
     *
     * @type {Currency}
     */
    get refundLimitDueToOnlineBalance() {
        return this.data[40];
    }
    set refundLimitDueToOnlineBalanceTestSetter(v) {
        this.setterImpl(40, v, 'refundLimitDueToOnlineBalance');
    }
    /**
     * (Detail)  Is this booking anonymized?
     *
     * @type {boolean}
     */
    get isAnonymized() {
        return this.data[41];
    }
    set isAnonymizedTestSetter(v) {
        this.setterImpl(41, v, 'isAnonymized');
    }
    /**
     * (Detail)  A token for deferred Payments. only for testing.
     *
     * @type {string}
     */
    get testingDeferredPaymentToken() {
        return this.data[42];
    }
    set testingDeferredPaymentTokenTestSetter(v) {
        this.setterImpl(42, v, 'testingDeferredPaymentToken');
    }
    _fixIds(_idReplacements) {
        this.data[4] = Meta.getReplacedId(this.data[4], _idReplacements);
        this.courseSelectorWrapper = ShiftSelector.create(this.data[4]);
        this.data[5] = Meta.getReplacedId(this.data[5], _idReplacements);
        this.shiftModelIdWrapper = Id.create(this.data[5]);
        this.participantsWrapper._fixIds(_idReplacements);
        this.data[16] = Meta.getReplacedId(this.data[16], _idReplacements);
        this.overallTariffIdWrapper = Id.create(this.data[16]);
        this.data[18] = Meta.getReplacedId(this.data[18], _idReplacements);
        this.firstShiftSelectorWrapper = ShiftId.create(this.data[18]);
        this.data[29] = Meta.getReplacedId(this.data[29], _idReplacements);
        this.paymentMethodIdWrapper = Id.create(this.data[29]);
        this.data[37] = Meta.getReplacedId(this.data[37], _idReplacements);
        this.cancellationPolicyIdWrapper = Id.create(this.data[37]);
        this.data[39] = Meta.getReplacedId(this.data[39], _idReplacements);
        this.applicableCancellationFeePeriodIdWrapper = Id.create(this.data[39]);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 43);
            data[8] = false;
            data[12] = INITIALIZED_IN_BACKEND;
            if (data[15] === null)
                data[15] = Meta.createNewList();
            data[20] = false;
            data[21] = false;
            data[31] = false;
            data[38] = false;
            data[41] = false;
        }
        // propagate new raw data to children
        if (!Meta.isSameId(data ? data[4] : null, this.courseSelectorWrapper))
            this.courseSelectorWrapper = data && data[4] ? ShiftSelector.create(data[4]) : null;
        if (!Meta.isSameId(data ? data[5] : null, this.shiftModelIdWrapper))
            this.shiftModelIdWrapper = data && data[5] ? Id.create(data[5]) : null;
        this.participantsWrapper._updateRawData(data ? data[15] : null, generateMissingData);
        if (!Meta.isSameId(data ? data[16] : null, this.overallTariffIdWrapper))
            this.overallTariffIdWrapper = data && data[16] ? Id.create(data[16]) : null;
        if (!Meta.isSameId(data ? data[18] : null, this.firstShiftSelectorWrapper))
            this.firstShiftSelectorWrapper = data && data[18] ? ShiftId.create(data[18]) : null;
        if (!Meta.isSameId(data ? data[29] : null, this.paymentMethodIdWrapper))
            this.paymentMethodIdWrapper = data && data[29] ? Id.create(data[29]) : null;
        if (!Meta.isSameId(data ? data[37] : null, this.cancellationPolicyIdWrapper))
            this.cancellationPolicyIdWrapper = data && data[37] ? Id.create(data[37]) : null;
        if (!Meta.isSameId(data ? data[39] : null, this.applicableCancellationFeePeriodIdWrapper))
            this.applicableCancellationFeePeriodIdWrapper = data && data[39] ? Id.create(data[39]) : null;
    }
    get dni() {
        return '406';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '406', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export var SchedulingApiBookingState;
(function (SchedulingApiBookingState) {
    SchedulingApiBookingState[SchedulingApiBookingState["INQUIRY"] = 1] = "INQUIRY";
    SchedulingApiBookingState[SchedulingApiBookingState["INQUIRY_DECLINED"] = 2] = "INQUIRY_DECLINED";
    SchedulingApiBookingState[SchedulingApiBookingState["BOOKED"] = 3] = "BOOKED";
    SchedulingApiBookingState[SchedulingApiBookingState["CANCELED"] = 4] = "CANCELED";
})(SchedulingApiBookingState || (SchedulingApiBookingState = {}));
export class SchedulingApiBookingParticipants extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'participants');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'participants',
            id: 'BOOKING_PARTICIPANTS',
            primitiveType: PApiPrimitiveTypes.ApiList,
        });
    }
    wrapItem(item, _generateMissingData) {
        const newWrapper = new SchedulingApiBookingParticipant(this.api);
        newWrapper._updateRawData(item, _generateMissingData);
        return newWrapper;
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return false;
    }
    createInstance(removeDestroyedItems) {
        return new SchedulingApiBookingParticipants(this.api, removeDestroyedItems);
    }
    get dni() {
        return '421';
    }
    createNewItem(id = null) {
        const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('participants');
        return newItem;
    }
}
export class SchedulingApiBookingParticipantBase extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiBookingParticipant);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'bookingParticipant',
            id: 'BOOKING_PARTICIPANT',
        });
        this.attributeInfoAttended = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'attended',
            id: 'BOOKING_PARTICIPANT_ATTENDED',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoIsBookingPerson = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'isBookingPerson',
            id: 'BOOKING_PARTICIPANT_IS_BOOKING_PERSON',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoFirstName = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'firstName',
            id: 'BOOKING_PARTICIPANT_FIRST_NAME',
            primitiveType: PApiPrimitiveTypes.string,
        });
        this.attributeInfoLastName = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'lastName',
            id: 'BOOKING_PARTICIPANT_LAST_NAME',
            primitiveType: PApiPrimitiveTypes.string,
        });
        this.attributeInfoEmail = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'email',
            id: 'BOOKING_PARTICIPANT_EMAIL',
            primitiveType: PApiPrimitiveTypes.Email,
        });
        this.attributeInfoDateOfBirth = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'dateOfBirth',
            id: 'BOOKING_PARTICIPANT_DATE_OF_BIRTH',
            primitiveType: PApiPrimitiveTypes.Date,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(-1577926800000, true, PApiPrimitiveTypes.Date, undefined, undefined);
                        return null;
                    },
                    () => {
                        return this.api.validators.max(+this.api.pMoment.m().add(0, 'minutes'), true, PApiPrimitiveTypes.Date, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoTariffId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'tariffId',
            id: 'BOOKING_PARTICIPANT_TARIFF_ID',
            primitiveType: PApiPrimitiveTypes.Id,
        });
        this.attributeInfoAdditionalFieldValue = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'additionalFieldValue',
            id: 'BOOKING_PARTICIPANT_ADDITIONAL_FIELD_VALUE',
            primitiveType: PApiPrimitiveTypes.string,
        });
        this.tariffIdWrapper = null;
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  Has the participant attended?
     *
     * @type {boolean}
     */
    get attended() {
        return this.data[1];
    }
    set attended(v) {
        this.setterImpl(1, v, 'attended');
    }
    /**
     *  Is this the booking person? If so, the attributes like firstName, lastName, ... from this item will be ignored and data from booking item will be taken.
     *
     * @type {boolean}
     */
    get isBookingPerson() {
        return this.data[2];
    }
    set isBookingPerson(v) {
        this.setterImpl(2, v, 'isBookingPerson');
    }
    /**
     *  First name of the participant
     *
     * @type {string}
     */
    get firstName() {
        return this.data[3];
    }
    set firstName(v) {
        this.setterImpl(3, v, 'firstName');
    }
    /**
     *  Last name of the participant
     *
     * @type {string}
     */
    get lastName() {
        return this.data[4];
    }
    set lastName(v) {
        this.setterImpl(4, v, 'lastName');
    }
    /**
     *  Email of the participant
     *
     * @type {Email}
     */
    get email() {
        return this.data[5];
    }
    set email(v) {
        this.setterImpl(5, v, 'email');
    }
    /**
     *  Date of birth of the participant
     *
     * @type {Date}
     */
    get dateOfBirth() {
        return this.data[6];
    }
    set dateOfBirth(v) {
        this.setterImpl(6, v, 'dateOfBirth');
    }
    /**
     *  Tariff id of the participant
     *
     * @type {Id}
     */
    get tariffId() {
        return this.tariffIdWrapper;
    }
    set tariffId(v) {
        this.setterImpl(7, v, 'tariffId', () => { this.tariffIdWrapper = v; });
    }
    /**
     * (Detail)  Additional field value for this participant. Should only be shown when participant has a tariff with "tariff.additionalFieldLabel" defined.
     *
     * @type {string}
     */
    get additionalFieldValue() {
        return this.data[8];
    }
    set additionalFieldValue(v) {
        this.setterImpl(8, v, 'additionalFieldValue');
    }
    _fixIds(_idReplacements) {
        this.data[7] = Meta.getReplacedId(this.data[7], _idReplacements);
        this.tariffIdWrapper = Id.create(this.data[7]);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 9);
            data[1] = false;
            data[2] = false;
        }
        // propagate new raw data to children
        if (!Meta.isSameId(data ? data[7] : null, this.tariffIdWrapper))
            this.tariffIdWrapper = data && data[7] ? Id.create(data[7]) : null;
    }
    get dni() {
        return '449';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '449', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class SchedulingApiShiftModelsBase extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'shiftModels');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'shiftModels',
            id: 'SHIFT_MODELS',
            primitiveType: PApiPrimitiveTypes.ApiList,
        });
    }
    wrapItem(item, _generateMissingData) {
        const newWrapper = new SchedulingApiShiftModel(this.api);
        newWrapper._updateRawData(item, _generateMissingData);
        return newWrapper;
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return false;
    }
    createInstance(removeDestroyedItems) {
        return new SchedulingApiShiftModels(this.api, removeDestroyedItems);
    }
    get dni() {
        return '9';
    }
    createNewItem(id = null) {
        const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('shiftModels');
        return newItem;
    }
}
export class SchedulingApiShiftModelBase extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiShiftModel);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'shiftModel',
            id: 'SHIFT_MODEL',
            canEdit: function () {
                if (!((this.api.rightsService.userCanWrite(this)))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
        });
        this.attributeInfoColor = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'color',
            id: 'SHIFT_MODEL_COLOR',
            primitiveType: PApiPrimitiveTypes.string,
        });
        this.attributeInfoName = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'name',
            id: 'SHIFT_MODEL_NAME',
            primitiveType: PApiPrimitiveTypes.string,
        });
        this.attributeInfoParentName = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'parentName',
            id: 'SHIFT_MODEL_PARENT_NAME',
            primitiveType: PApiPrimitiveTypes.string,
        });
        this.attributeInfoTrashed = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'trashed',
            id: 'SHIFT_MODEL_TRASHED',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoCostCentre = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'costCentre',
            id: 'SHIFT_MODEL_COST_CENTRE',
            primitiveType: PApiPrimitiveTypes.string,
            show: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            canEdit: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return true;
                }
                return false;
            },
        });
        this.attributeInfoArticleGroup = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'articleGroup',
            id: 'SHIFT_MODEL_ARTICLE_GROUP',
            primitiveType: PApiPrimitiveTypes.string,
            show: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            canEdit: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return true;
                }
                return false;
            },
        });
        this.attributeInfoIsCourse = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'isCourse',
            id: 'SHIFT_MODEL_IS_COURSE',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoCourseType = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'courseType',
            id: 'SHIFT_MODEL_COURSE_TYPE',
            primitiveType: PApiPrimitiveTypes.Enum,
        });
        this.attributeInfoOnlyWholeCourseBookable = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'onlyWholeCourseBookable',
            id: 'SHIFT_MODEL_ONLY_WHOLE_COURSE_BOOKABLE',
            primitiveType: PApiPrimitiveTypes.boolean,
            canEdit: function () {
                if (!((this.api.rightsService.userCanWrite(this)))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
        });
        this.attributeInfoOnlineCancellationForChargeableBookingsEnabled = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'onlineCancellationForChargeableBookingsEnabled',
            id: 'SHIFT_MODEL_ONLINE_CANCELLATION_FOR_CHARGEABLE_BOOKINGS_ENABLED',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoCurrentCancellationPolicyId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'currentCancellationPolicyId',
            id: 'SHIFT_MODEL_CURRENT_CANCELLATION_POLICY_ID',
            primitiveType: PApiPrimitiveTypes.Id,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoIsCourseOnline = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'isCourseOnline',
            id: 'SHIFT_MODEL_IS_COURSE_ONLINE',
            primitiveType: PApiPrimitiveTypes.boolean,
            canEdit: function () {
                if (!((this.api.rightsService.userCanWrite(this)))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
        });
        this.attributeInfoBookingDesiredDateSetting = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'bookingDesiredDateSetting',
            id: 'SHIFT_MODEL_BOOKING_DESIRED_DATE_SETTING',
            primitiveType: PApiPrimitiveTypes.Enum,
            canEdit: function () {
                if (!((this.api.rightsService.userCanWrite(this)))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
        });
        this.attributeInfoCourseCodePrefix = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'courseCodePrefix',
            id: 'SHIFT_MODEL_COURSE_CODE_PREFIX',
            primitiveType: PApiPrimitiveTypes.string,
            canEdit: function () {
                if (!((this.api.rightsService.userCanWrite(this)))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
        });
        this.attributeInfoCourseGroup = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'courseGroup',
            id: 'SHIFT_MODEL_COURSE_GROUP',
            primitiveType: PApiPrimitiveTypes.string,
            canEdit: function () {
                if (!((this.api.rightsService.userCanWrite(this)))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
        });
        this.attributeInfoFreeclimberArticleId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'freeclimberArticleId',
            id: 'SHIFT_MODEL_FREECLIMBER_ARTICLE_ID',
            primitiveType: PApiPrimitiveTypes.Integer,
            canEdit: function () {
                if (!((this.api.rightsService.userCanWrite(this)))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
        });
        this.attributeInfoBookingPersonMinAge = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'bookingPersonMinAge',
            id: 'SHIFT_MODEL_BOOKING_PERSON_MIN_AGE',
            primitiveType: PApiPrimitiveTypes.Years,
            canEdit: function () {
                if (!((this.api.rightsService.userCanWrite(this)))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(1, true, PApiPrimitiveTypes.Years, undefined, undefined);
                        return null;
                    },
                    () => {
                        return this.api.validators.max(100, true, PApiPrimitiveTypes.Years, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoParticipantMinAge = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'participantMinAge',
            id: 'SHIFT_MODEL_PARTICIPANT_MIN_AGE',
            primitiveType: PApiPrimitiveTypes.Years,
            canEdit: function () {
                if (!((this.api.rightsService.userCanWrite(this)))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(1, true, PApiPrimitiveTypes.Years, undefined, undefined);
                        return null;
                    },
                    () => {
                        return this.api.validators.max(100, true, PApiPrimitiveTypes.Years, undefined, undefined);
                        return null;
                    },
                    () => {
                        return this.api.validators.max(() => this.participantMaxAge, true, PApiPrimitiveTypes.Years, 'SHIFT_MODEL_PARTICIPANT_MAX_AGE', undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoParticipantMaxAge = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'participantMaxAge',
            id: 'SHIFT_MODEL_PARTICIPANT_MAX_AGE',
            primitiveType: PApiPrimitiveTypes.Years,
            canEdit: function () {
                if (!((this.api.rightsService.userCanWrite(this)))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(1, true, PApiPrimitiveTypes.Years, undefined, undefined);
                        return null;
                    },
                    () => {
                        return this.api.validators.max(100, true, PApiPrimitiveTypes.Years, undefined, undefined);
                        return null;
                    },
                    () => {
                        return this.api.validators.min(() => this.participantMinAge, true, PApiPrimitiveTypes.Years, 'SHIFT_MODEL_PARTICIPANT_MIN_AGE', undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoDescription = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'description',
            id: 'SHIFT_MODEL_DESCRIPTION',
            primitiveType: PApiPrimitiveTypes.string,
        });
        this.attributeInfoWorkingTimeCreationMethod = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'workingTimeCreationMethod',
            id: 'SHIFT_MODEL_WORKING_TIME_CREATION_METHOD',
            primitiveType: PApiPrimitiveTypes.Enum,
            show: function () {
                if (!((this.api.rightsService.userCanWrite(this)))) {
                    return false;
                }
                return true;
            },
        });
        this.attributeInfoCourseTitle = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'courseTitle',
            id: 'SHIFT_MODEL_COURSE_TITLE',
            primitiveType: PApiPrimitiveTypes.string,
            canEdit: function () {
                if (!((this.api.rightsService.userCanWrite(this)))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
        });
        this.attributeInfoCourseSubtitle = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'courseSubtitle',
            id: 'SHIFT_MODEL_COURSE_SUBTITLE',
            primitiveType: PApiPrimitiveTypes.string,
            canEdit: function () {
                if (!((this.api.rightsService.userCanWrite(this)))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
        });
        this.attributeInfoCourseDescription = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'courseDescription',
            id: 'SHIFT_MODEL_COURSE_DESCRIPTION',
            primitiveType: PApiPrimitiveTypes.string,
            canEdit: function () {
                if (!((this.api.rightsService.userCanWrite(this)))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
        });
        this.attributeInfoCourseEquipmentRequirements = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'courseEquipmentRequirements',
            id: 'SHIFT_MODEL_COURSE_EQUIPMENT_REQUIREMENTS',
            primitiveType: PApiPrimitiveTypes.string,
            canEdit: function () {
                if (!((this.api.rightsService.userCanWrite(this)))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
        });
        this.attributeInfoCourseSkillRequirements = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'courseSkillRequirements',
            id: 'SHIFT_MODEL_COURSE_SKILL_REQUIREMENTS',
            primitiveType: PApiPrimitiveTypes.string,
            canEdit: function () {
                if (!((this.api.rightsService.userCanWrite(this)))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
        });
        this.attributeInfoCourseLocation = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'courseLocation',
            id: 'SHIFT_MODEL_COURSE_LOCATION',
            primitiveType: PApiPrimitiveTypes.string,
            canEdit: function () {
                if (!((this.api.rightsService.userCanWrite(this)))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
        });
        this.attributeInfoCourseContactName = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'courseContactName',
            id: 'SHIFT_MODEL_COURSE_CONTACT_NAME',
            primitiveType: PApiPrimitiveTypes.string,
            canEdit: function () {
                if (!((this.api.rightsService.userCanWrite(this)))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
        });
        this.attributeInfoCourseContactEmail = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'courseContactEmail',
            id: 'SHIFT_MODEL_COURSE_CONTACT_EMAIL',
            primitiveType: PApiPrimitiveTypes.Email,
            canEdit: function () {
                if (!((this.api.rightsService.userCanWrite(this)))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
        });
        this.attributeInfoCourseContactPhone = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'courseContactPhone',
            id: 'SHIFT_MODEL_COURSE_CONTACT_PHONE',
            primitiveType: PApiPrimitiveTypes.Tel,
            canEdit: function () {
                if (!((this.api.rightsService.userCanWrite(this)))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
        });
        this.attributeInfoArrivalTimeBeforeCourse = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'arrivalTimeBeforeCourse',
            id: 'SHIFT_MODEL_ARRIVAL_TIME_BEFORE_COURSE',
            primitiveType: PApiPrimitiveTypes.Duration,
            canEdit: function () {
                if (!((this.api.rightsService.userCanWrite(this)))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
        });
        this.attributeInfoCourseBookingDeadlineFrom = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'courseBookingDeadlineFrom',
            id: 'SHIFT_MODEL_COURSE_BOOKING_DEADLINE_FROM',
            primitiveType: PApiPrimitiveTypes.Duration,
            canEdit: function () {
                if (!((this.api.rightsService.userCanWrite(this)))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
        });
        this.attributeInfoCourseBookingDeadlineUntil = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'courseBookingDeadlineUntil',
            id: 'SHIFT_MODEL_COURSE_BOOKING_DEADLINE_UNTIL',
            primitiveType: PApiPrimitiveTypes.Duration,
            canEdit: function () {
                if (!((this.api.rightsService.userCanWrite(this)))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
        });
        this.attributeInfoMinCourseParticipantCount = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'minCourseParticipantCount',
            id: 'SHIFT_MODEL_MIN_COURSE_PARTICIPANT_COUNT',
            primitiveType: PApiPrimitiveTypes.Integer,
            canEdit: function () {
                if (!((this.api.rightsService.userCanWrite(this)))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
        });
        this.attributeInfoMaxCourseParticipantCount = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'maxCourseParticipantCount',
            id: 'SHIFT_MODEL_MAX_COURSE_PARTICIPANT_COUNT',
            primitiveType: PApiPrimitiveTypes.Integer,
            canEdit: function () {
                if (!((this.api.rightsService.userCanWrite(this)))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
        });
        this.attributeInfoIsCoronaSlotBooking = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'isCoronaSlotBooking',
            id: 'SHIFT_MODEL_IS_CORONA_SLOT_BOOKING',
            primitiveType: PApiPrimitiveTypes.boolean,
            canEdit: function () {
                if (!((this.api.rightsService.userCanWrite(this)))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
        });
        this.attributeInfoOnlineCancellationForFreeBookingsEnabled = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'onlineCancellationForFreeBookingsEnabled',
            id: 'SHIFT_MODEL_ONLINE_CANCELLATION_FOR_FREE_BOOKINGS_ENABLED',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoOnlineCancellationForFreeBookingsDeadline = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'onlineCancellationForFreeBookingsDeadline',
            id: 'SHIFT_MODEL_ONLINE_CANCELLATION_FOR_FREE_BOOKINGS_DEADLINE',
            primitiveType: PApiPrimitiveTypes.Duration,
            show: function () {
                if (!((this.onlineCancellationForFreeBookingsEnabled))) {
                    return false;
                }
                return true;
            },
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(0, true, PApiPrimitiveTypes.Duration, undefined, undefined);
                        return null;
                    },
                    () => {
                        return this.api.validators.notUndefined(PApiPrimitiveTypes.Duration, undefined);
                    },
                ];
            },
        });
        this.attributeInfoOnlineCancellationForChargeableBookingsDeadline = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'onlineCancellationForChargeableBookingsDeadline',
            id: 'SHIFT_MODEL_ONLINE_CANCELLATION_FOR_CHARGEABLE_BOOKINGS_DEADLINE',
            primitiveType: PApiPrimitiveTypes.Duration,
            show: function () {
                if (!((this.onlineCancellationForChargeableBookingsEnabled))) {
                    return false;
                }
                return true;
            },
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(0, true, PApiPrimitiveTypes.Duration, undefined, undefined);
                        return null;
                    },
                    () => {
                        return this.api.validators.notUndefined(PApiPrimitiveTypes.Duration, undefined);
                    },
                ];
            },
        });
        this.attributeInfoOnlineCancellationForWithdrawableBookingsAlwaysEnabled = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'onlineCancellationForWithdrawableBookingsAlwaysEnabled',
            id: 'SHIFT_MODEL_ONLINE_CANCELLATION_FOR_WITHDRAWABLE_BOOKINGS_ALWAYS_ENABLED',
            primitiveType: PApiPrimitiveTypes.boolean,
            canEdit: function () {
                if (!((this.currentCancellationPolicy.withdrawalPeriod !== null))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
            vars: {
                cannotEditHint: 'Um diese Funktionalität nutzen zu können, setze bitte erst eine Widerrufsfrist.',
            }
        });
        this.attributeInfoOnlineCancellationAutomaticOnlineRefundEnabled = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'onlineCancellationAutomaticOnlineRefundEnabled',
            id: 'SHIFT_MODEL_ONLINE_CANCELLATION_AUTOMATIC_ONLINE_REFUND_ENABLED',
            primitiveType: PApiPrimitiveTypes.boolean,
            canEdit: function () {
                if (!((this.api.data.isOnlinePaymentAvailable))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
            vars: {
                cannotEditHint: 'Um diese Funktionalität nutzen zu können, aktiviere bitte erst die <a href="client/plugin/payments" target="_blank">Online-Zahlung</a>.',
            }
        });
        this.assignableMembersWrapper = new SchedulingApiShiftModelAssignableMembers(this.api, false);
        this.repetitionWrapper = new SchedulingApiShiftModelRepetition(this.api);
        this.timeWrapper = new SchedulingApiShiftModelTime(this.api);
        this.posAccountsWrapper = new SchedulingApiShiftModelPosAccounts(this.api, false);
        this.changeSelectorWrapper = new SchedulingApiShiftModelChangeSelector(this.api);
        this.automaticBookableMailIdsWrapper = new SchedulingApiShiftModelAutomaticBookableMailIds(this.api, false);
        this.courseTariffsWrapper = new SchedulingApiShiftModelCourseTariffs(this.api, false);
        this.coursePaymentMethodsWrapper = new SchedulingApiShiftModelCoursePaymentMethods(this.api, false);
        this.currentCancellationPolicyIdWrapper = null;
        this.cancellationPoliciesWrapper = new SchedulingApiShiftModelCancellationPolicies(this.api, false);
        this.neededMembersCountConfWrapper = new SchedulingApiShiftModelNeededMembersCountConf(this.api);
        this.assignedMemberIdsWrapper = new SchedulingApiShiftModelAssignedMemberIds(this.api, false);
        this.courseHighlightsWrapper = new SchedulingApiShiftModelCourseHighlights(this.api, false);
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
        this.assignableMembersWrapper.parent = this;
        this.repetitionWrapper.parent = this;
        this.timeWrapper.parent = this;
        this.posAccountsWrapper.parent = this;
        this.changeSelectorWrapper.parent = this;
        this.automaticBookableMailIdsWrapper.parent = this;
        this.courseTariffsWrapper.parent = this;
        this.coursePaymentMethodsWrapper.parent = this;
        this.cancellationPoliciesWrapper.parent = this;
        this.neededMembersCountConfWrapper.parent = this;
        this.assignedMemberIdsWrapper.parent = this;
        this.courseHighlightsWrapper.parent = this;
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  Color of shift model in format "rrggbb".
     *
     * @type {string}
     */
    get color() {
        return this.data[1];
    }
    set color(v) {
        this.setterImpl(1, v, 'color');
    }
    /**
     *  Name of shift model.
     *
     * @type {string}
     */
    get name() {
        return this.data[2];
    }
    set name(v) {
        this.setterImpl(2, v, 'name');
    }
    /**
     *  Name of this shift-model's parent.
     *
     * @type {string}
     */
    get parentName() {
        return this.data[3];
    }
    set parentName(v) {
        this.setterImpl(3, v, 'parentName');
    }
    /**
     *  Is this shift model trashed?
     *
     * @type {boolean}
     */
    get trashed() {
        return this.data[4];
    }
    set trashed(v) {
        this.setterImpl(4, v, 'trashed');
    }
    /**
     *  Only send to client owners. Which members are assignable to this shift-model. Make sure this is deserialized before assignedMemberIds because this is a prerequisite.  Can be used with "changeSelector".
     */
    get assignableMembers() {
        return this.assignableMembersWrapper;
    }
    set assignableMembersTestSetter(v) {
        this.setterImpl(5, v.rawData, 'assignableMembers', () => { this.assignableMembersWrapper = v; });
    }
    /**
     *  Repetition pattern of this shift-model.
     */
    get repetition() {
        return this.repetitionWrapper;
    }
    set repetitionTestSetter(v) {
        this.setterImpl(6, v.rawData, 'repetition', () => { this.repetitionWrapper = v; });
    }
    /**
     *  The time when this shift-model will start (relative to current day). Can be used with "changeSelector".
     */
    get time() {
        return this.timeWrapper;
    }
    set timeTestSetter(v) {
        this.setterImpl(7, v.rawData, 'time', () => { this.timeWrapper = v; });
    }
    /**
     *  "Kostenstelle" used for controlling. Note that this is not a detailed field to enable type-ahead functionality.
     *
     * @type {string}
     */
    get costCentre() {
        return this.data[8];
    }
    set costCentre(v) {
        this.setterImpl(8, v, 'costCentre');
    }
    /**
     *  "Warengruppe" used for controlling. Note that this is not a detailed field to enable type-ahead functionality.
     *
     * @type {string}
     */
    get articleGroup() {
        return this.data[9];
    }
    set articleGroup(v) {
        this.setterImpl(9, v, 'articleGroup');
    }
    /**
     *  Pos accounts for this shift-model. Note that this is not a detailed field to enable type-ahead functionality.
     */
    get posAccounts() {
        return this.posAccountsWrapper;
    }
    set posAccountsTestSetter(v) {
        this.setterImpl(10, v.rawData, 'posAccounts', () => { this.posAccountsWrapper = v; });
    }
    /**
     *  Is this a course?
     *
     * @type {boolean}
     */
    get isCourse() {
        return this.data[11];
    }
    set isCourse(v) {
        this.setterImpl(11, v, 'isCourse');
    }
    /**
     *  course type
     *
     * @type {SchedulingApiCourseType}
     */
    get courseType() {
        return this.data[12];
    }
    set courseType(v) {
        this.setterImpl(12, v, 'courseType');
    }
    /**
     *  Set by user to define what should - additionally to this member - be modified.
     */
    get changeSelector() {
        return this.changeSelectorWrapper;
    }
    set changeSelectorTestSetter(v) {
        this.setterImpl(13, v.rawData, 'changeSelector', () => { this.changeSelectorWrapper = v; });
    }
    /**
     *  A list of custom-bookable-mail ids which are attached to this shift-model for automatic mail sending.
     */
    get automaticBookableMailIds() {
        return this.automaticBookableMailIdsWrapper;
    }
    set automaticBookableMailIdsTestSetter(v) {
        this.setterImpl(14, v.rawData, 'automaticBookableMailIds', () => { this.automaticBookableMailIdsWrapper = v; });
    }
    /**
     *  A booking will book the whole course? Only possible when courseType is not NO_BOOKING. (Note for Milad: This has currently be deserialized before tariffs/payment-methods. Thus, it is positioned currently here).
     *
     * @type {boolean}
     */
    get onlyWholeCourseBookable() {
        return this.data[15];
    }
    set onlyWholeCourseBookable(v) {
        this.setterImpl(15, v, 'onlyWholeCourseBookable');
    }
    /**
     *  A list of course tariffs.
     */
    get courseTariffs() {
        return this.courseTariffsWrapper;
    }
    set courseTariffsTestSetter(v) {
        this.setterImpl(16, v.rawData, 'courseTariffs', () => { this.courseTariffsWrapper = v; });
    }
    /**
     *  A list of course payment methods.
     */
    get coursePaymentMethods() {
        return this.coursePaymentMethodsWrapper;
    }
    set coursePaymentMethodsTestSetter(v) {
        this.setterImpl(17, v.rawData, 'coursePaymentMethods', () => { this.coursePaymentMethodsWrapper = v; });
    }
    /**
     *  Is online cancellation by booking person for chargeable bookings allowed? (Backend-note by Milad: This has to be deserialized before SHIFT_MODEL_ONLINE_CANCELLATION_FOR_CHARGEABLE_BOOKINGS_ENABLED because the "required" validation of this depends on that value)
     *
     * @type {boolean}
     */
    get onlineCancellationForChargeableBookingsEnabled() {
        return this.data[18];
    }
    set onlineCancellationForChargeableBookingsEnabled(v) {
        this.setterImpl(18, v, 'onlineCancellationForChargeableBookingsEnabled');
    }
    /**
     *  The id of the current cancellationPolicy which will be used for new bookings.
     *
     * @type {Id}
     */
    get currentCancellationPolicyId() {
        return this.currentCancellationPolicyIdWrapper;
    }
    set currentCancellationPolicyIdTestSetter(v) {
        this.setterImpl(19, v, 'currentCancellationPolicyId', () => { this.currentCancellationPolicyIdWrapper = v; });
    }
    /**
     *  The list of all cancellation policies of this shift-model. You can only edit shift-models current cancellation policy. See "shiftModel.currentCancellationPolicyId". (Note by Milad: This has to be deserialized after SHIFT_MODEL_CANCELLATION_POLICIES because the "required" validation of that depends on this value)
     */
    get cancellationPolicies() {
        return this.cancellationPoliciesWrapper;
    }
    set cancellationPoliciesTestSetter(v) {
        this.setterImpl(20, v.rawData, 'cancellationPolicies', () => { this.cancellationPoliciesWrapper = v; });
    }
    /**
     *  Is the course online?
     *
     * @type {boolean}
     */
    get isCourseOnline() {
        return this.data[21];
    }
    set isCourseOnline(v) {
        this.setterImpl(21, v, 'isCourseOnline');
    }
    /**
     *  Can the booking person give a desired date? Only set this when courseType is INQUIRY. Otherwise by default it is DESIRED_DATE_NOT_ALLOWED.
     *
     * @type {SchedulingApiBookingDesiredDateSetting}
     */
    get bookingDesiredDateSetting() {
        return this.data[22];
    }
    set bookingDesiredDateSetting(v) {
        this.setterImpl(22, v, 'bookingDesiredDateSetting');
    }
    /**
     *  Prefix being used to generate course codes. If no value is set then no course codes will be generated.
     *
     * @type {string}
     */
    get courseCodePrefix() {
        return this.data[23];
    }
    set courseCodePrefix(v) {
        this.setterImpl(23, v, 'courseCodePrefix');
    }
    /**
     *  course group which is used to group the courses in the booking plug-in.
     *
     * @type {string}
     */
    get courseGroup() {
        return this.data[24];
    }
    set courseGroup(v) {
        this.setterImpl(24, v, 'courseGroup');
    }
    /**
     *  Article id of Freeclimber POS system enabling payments through Freeclimber. Optional and only relevant when a course is bookable.
     *
     * @type {Integer}
     */
    get freeclimberArticleId() {
        return this.data[25];
    }
    set freeclimberArticleId(v) {
        this.setterImpl(25, v, 'freeclimberArticleId');
    }
    /**
     *  The minimal age allowed for the booking person. The booking person's age is calculate at the date of booking.
     *
     * @type {Years}
     */
    get bookingPersonMinAge() {
        return this.data[26];
    }
    set bookingPersonMinAge(v) {
        this.setterImpl(26, v, 'bookingPersonMinAge');
    }
    /**
     *  The minimal age allowed for the participant. Participant ages are defined by "participant.dateOfBirth" or "booking.ageMin" + "booking.ageMax". In case of "participant.dateOfBirth" the age is calculated at the date of the first shift of the course.
     *
     * @type {Years}
     */
    get participantMinAge() {
        return this.data[27];
    }
    set participantMinAge(v) {
        this.setterImpl(27, v, 'participantMinAge');
    }
    /**
     *  See "participantMinAge".
     *
     * @type {Years}
     */
    get participantMaxAge() {
        return this.data[28];
    }
    set participantMaxAge(v) {
        this.setterImpl(28, v, 'participantMaxAge');
    }
    /**
     * (Detail)  Configuration values from which a shift's "neededMembersCount" is calculated. Can be used with "changeSelector".
     */
    get neededMembersCountConf() {
        return this.neededMembersCountConfWrapper;
    }
    set neededMembersCountConfTestSetter(v) {
        this.setterImpl(29, v.rawData, 'neededMembersCountConf', () => { this.neededMembersCountConfWrapper = v; });
    }
    /**
     * (Detail)  Description of the shift-model. Can be used with "changeSelector".
     *
     * @type {string}
     */
    get description() {
        return this.data[30];
    }
    set description(v) {
        this.setterImpl(30, v, 'description');
    }
    /**
     * (Detail)  Only send to client owners. A list of the assigned members' ids. Can be used with "changeSelector".
     */
    get assignedMemberIds() {
        return this.assignedMemberIdsWrapper;
    }
    set assignedMemberIdsTestSetter(v) {
        this.setterImpl(31, v.rawData, 'assignedMemberIds', () => { this.assignedMemberIdsWrapper = v; });
    }
    /**
     * (Detail)  How is the corresponding working-time to this shift-model going to be created? Only send to client owners. Can be used with "changeSelector".
     *
     * @type {SchedulingApiWorkingTimeCreationMethod}
     */
    get workingTimeCreationMethod() {
        return this.data[32];
    }
    set workingTimeCreationMethod(v) {
        this.setterImpl(32, v, 'workingTimeCreationMethod');
    }
    /**
     * (Detail)  course title
     *
     * @type {string}
     */
    get courseTitle() {
        return this.data[33];
    }
    set courseTitle(v) {
        this.setterImpl(33, v, 'courseTitle');
    }
    /**
     * (Detail)  course subtitle
     *
     * @type {string}
     */
    get courseSubtitle() {
        return this.data[34];
    }
    set courseSubtitle(v) {
        this.setterImpl(34, v, 'courseSubtitle');
    }
    /**
     * (Detail)  course description
     *
     * @type {string}
     */
    get courseDescription() {
        return this.data[35];
    }
    set courseDescription(v) {
        this.setterImpl(35, v, 'courseDescription');
    }
    /**
     * (Detail)  A list of course highlights
     */
    get courseHighlights() {
        return this.courseHighlightsWrapper;
    }
    set courseHighlightsTestSetter(v) {
        this.setterImpl(36, v.rawData, 'courseHighlights', () => { this.courseHighlightsWrapper = v; });
    }
    /**
     * (Detail)  What a participant should bring to the course.
     *
     * @type {string}
     */
    get courseEquipmentRequirements() {
        return this.data[37];
    }
    set courseEquipmentRequirements(v) {
        this.setterImpl(37, v, 'courseEquipmentRequirements');
    }
    /**
     * (Detail)  Course skill requirements for a participant
     *
     * @type {string}
     */
    get courseSkillRequirements() {
        return this.data[38];
    }
    set courseSkillRequirements(v) {
        this.setterImpl(38, v, 'courseSkillRequirements');
    }
    /**
     * (Detail)  Course location
     *
     * @type {string}
     */
    get courseLocation() {
        return this.data[39];
    }
    set courseLocation(v) {
        this.setterImpl(39, v, 'courseLocation');
    }
    /**
     * (Detail)  Contact name for any questions.
     *
     * @type {string}
     */
    get courseContactName() {
        return this.data[40];
    }
    set courseContactName(v) {
        this.setterImpl(40, v, 'courseContactName');
    }
    /**
     * (Detail)  Contact email for any questions.
     *
     * @type {Email}
     */
    get courseContactEmail() {
        return this.data[41];
    }
    set courseContactEmail(v) {
        this.setterImpl(41, v, 'courseContactEmail');
    }
    /**
     * (Detail)  Contact phone for any questions.
     *
     * @type {Tel}
     */
    get courseContactPhone() {
        return this.data[42];
    }
    set courseContactPhone(v) {
        this.setterImpl(42, v, 'courseContactPhone');
    }
    /**
     * (Detail)  How many milliseconds before course begin should a participant arrive?
     *
     * @type {Duration}
     */
    get arrivalTimeBeforeCourse() {
        return this.data[43];
    }
    set arrivalTimeBeforeCourse(v) {
        this.setterImpl(43, v, 'arrivalTimeBeforeCourse');
    }
    /**
     * (Detail)  From how many milliseconds before course begin can a booking be done?
     *
     * @type {Duration}
     */
    get courseBookingDeadlineFrom() {
        return this.data[44];
    }
    set courseBookingDeadlineFrom(v) {
        this.setterImpl(44, v, 'courseBookingDeadlineFrom');
    }
    /**
     * (Detail)  Until how many milliseconds before course begin can a booking be done?
     *
     * @type {Duration}
     */
    get courseBookingDeadlineUntil() {
        return this.data[45];
    }
    set courseBookingDeadlineUntil(v) {
        this.setterImpl(45, v, 'courseBookingDeadlineUntil');
    }
    /**
     * (Detail)  Minimal course participant count. Can be used with "changeSelector".
     *
     * @type {Integer}
     */
    get minCourseParticipantCount() {
        return this.data[46];
    }
    set minCourseParticipantCount(v) {
        this.setterImpl(46, v, 'minCourseParticipantCount');
    }
    /**
     * (Detail)  Maximal course participant count. Set "null" to have no maximal course participant count. Can be used with "changeSelector".
     *
     * @type {Integer}
     */
    get maxCourseParticipantCount() {
        return this.data[47];
    }
    set maxCourseParticipantCount(v) {
        this.setterImpl(47, v, 'maxCourseParticipantCount');
    }
    /**
     * (Detail)  Is this shift-model for corona slot-booking?
     *
     * @type {boolean}
     */
    get isCoronaSlotBooking() {
        return this.data[48];
    }
    set isCoronaSlotBooking(v) {
        this.setterImpl(48, v, 'isCoronaSlotBooking');
    }
    /**
     * (Detail)  Is online cancellation by booking person for free bookings allowed?
     *
     * @type {boolean}
     */
    get onlineCancellationForFreeBookingsEnabled() {
        return this.data[49];
    }
    set onlineCancellationForFreeBookingsEnabled(v) {
        this.setterImpl(49, v, 'onlineCancellationForFreeBookingsEnabled');
    }
    /**
     * (Detail)  When "onlineCancellationForFreeBookingsEnabled" is "true" then this defines the deadline until how many milliseconds before course start the online cancellation is allowed. When "null" is returned then there is no such deadline.
     *
     * @type {Duration}
     */
    get onlineCancellationForFreeBookingsDeadline() {
        return this.data[50];
    }
    set onlineCancellationForFreeBookingsDeadline(v) {
        this.setterImpl(50, v, 'onlineCancellationForFreeBookingsDeadline');
    }
    /**
     * (Detail)  When "onlineCancellationForChargeableBookingsEnabled" is "true" then this defines the deadline until how many milliseconds before course start the online cancellation is allowed. When "null" is returned then there is no such deadline.
     *
     * @type {Duration}
     */
    get onlineCancellationForChargeableBookingsDeadline() {
        return this.data[51];
    }
    set onlineCancellationForChargeableBookingsDeadline(v) {
        this.setterImpl(51, v, 'onlineCancellationForChargeableBookingsDeadline');
    }
    /**
     * (Detail)  Is online cancellation by booking person for withdrawable bookings allowed?
     *
     * @type {boolean}
     */
    get onlineCancellationForWithdrawableBookingsAlwaysEnabled() {
        return this.data[52];
    }
    set onlineCancellationForWithdrawableBookingsAlwaysEnabled(v) {
        this.setterImpl(52, v, 'onlineCancellationForWithdrawableBookingsAlwaysEnabled');
    }
    /**
     * (Detail)  When online cancellation is done should any online payment be automatically refunded?
     *
     * @type {boolean}
     */
    get onlineCancellationAutomaticOnlineRefundEnabled() {
        return this.data[53];
    }
    set onlineCancellationAutomaticOnlineRefundEnabled(v) {
        this.setterImpl(53, v, 'onlineCancellationAutomaticOnlineRefundEnabled');
    }
    _fixIds(_idReplacements) {
        this.assignableMembersWrapper._fixIds(_idReplacements);
        this.repetitionWrapper._fixIds(_idReplacements);
        this.timeWrapper._fixIds(_idReplacements);
        this.posAccountsWrapper._fixIds(_idReplacements);
        this.changeSelectorWrapper._fixIds(_idReplacements);
        this.automaticBookableMailIdsWrapper._fixIds(_idReplacements);
        this.courseTariffsWrapper._fixIds(_idReplacements);
        this.coursePaymentMethodsWrapper._fixIds(_idReplacements);
        this.data[19] = Meta.getReplacedId(this.data[19], _idReplacements);
        this.currentCancellationPolicyIdWrapper = Id.create(this.data[19]);
        this.cancellationPoliciesWrapper._fixIds(_idReplacements);
        this.neededMembersCountConfWrapper._fixIds(_idReplacements);
        this.assignedMemberIdsWrapper._fixIds(_idReplacements);
        this.courseHighlightsWrapper._fixIds(_idReplacements);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 54);
            data[4] = false;
            if (data[5] === null)
                data[5] = Meta.createNewList();
            if (data[6] === null)
                data[6] = Meta.createNewObject(true);
            if (data[7] === null)
                data[7] = Meta.createNewObject(true);
            if (data[10] === null)
                data[10] = Meta.createNewList();
            data[11] = false;
            if (data[13] === null)
                data[13] = Meta.createNewObject(false);
            if (data[14] === null)
                data[14] = Meta.createNewList();
            data[15] = false;
            if (data[16] === null)
                data[16] = Meta.createNewList();
            if (data[17] === null)
                data[17] = Meta.createNewList();
            data[18] = false;
            if (data[20] === null)
                data[20] = Meta.createNewList();
            data[21] = false;
            if (data[29] === null)
                data[29] = Meta.createNewObject(true);
            if (data[31] === null)
                data[31] = Meta.createNewList();
            if (data[36] === null)
                data[36] = Meta.createNewList();
            data[48] = false;
            data[49] = false;
            data[52] = false;
            data[53] = false;
        }
        // propagate new raw data to children
        this.assignableMembersWrapper._updateRawData(data ? data[5] : null, generateMissingData);
        this.repetitionWrapper._updateRawData(data ? data[6] : null, generateMissingData);
        this.timeWrapper._updateRawData(data ? data[7] : null, generateMissingData);
        this.posAccountsWrapper._updateRawData(data ? data[10] : null, generateMissingData);
        this.changeSelectorWrapper._updateRawData(data ? data[13] : null, generateMissingData);
        this.automaticBookableMailIdsWrapper._updateRawData(data ? data[14] : null, generateMissingData);
        this.courseTariffsWrapper._updateRawData(data ? data[16] : null, generateMissingData);
        this.coursePaymentMethodsWrapper._updateRawData(data ? data[17] : null, generateMissingData);
        if (!Meta.isSameId(data ? data[19] : null, this.currentCancellationPolicyIdWrapper))
            this.currentCancellationPolicyIdWrapper = data && data[19] ? Id.create(data[19]) : null;
        this.cancellationPoliciesWrapper._updateRawData(data ? data[20] : null, generateMissingData);
        this.neededMembersCountConfWrapper._updateRawData(data ? data[29] : null, generateMissingData);
        this.assignedMemberIdsWrapper._updateRawData(data ? data[31] : null, generateMissingData);
        this.courseHighlightsWrapper._updateRawData(data ? data[36] : null, generateMissingData);
    }
    get dni() {
        return '237';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '237', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class SchedulingApiShiftModelAssignableMembersBase extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'assignableMembers');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'assignableMembers',
            id: 'SHIFT_MODEL_ASSIGNABLE_MEMBERS',
            primitiveType: PApiPrimitiveTypes.ApiList,
            show: function () {
                if (!((this.api.rightsService.userCanWrite(this.parent)))) {
                    return false;
                }
                return true;
            },
            canEdit: function () {
                if (!((this.api.rightsService.userCanWrite(this.parent)))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
        });
    }
    wrapItem(item, _generateMissingData) {
        const newWrapper = new SchedulingApiShiftModelAssignableMember(this.api);
        newWrapper._updateRawData(item, _generateMissingData);
        return newWrapper;
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return false;
    }
    createInstance(removeDestroyedItems) {
        return new SchedulingApiShiftModelAssignableMembers(this.api, removeDestroyedItems);
    }
    get dni() {
        return '242';
    }
    createNewItem(id = null) {
        const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('assignableMembers');
        return newItem;
    }
}
export class SchedulingApiShiftModelAssignableMemberBase extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiShiftModelAssignableMember);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'shiftModelAssignableMember',
            id: 'SHIFT_MODEL_ASSIGNABLE_MEMBER',
        });
        this.attributeInfoHourlyEarnings = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'hourlyEarnings',
            id: 'SHIFT_MODEL_ASSIGNABLE_MEMBER_EARNINGS',
            primitiveType: PApiPrimitiveTypes.Currency,
        });
        this.attributeInfoMemberId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'memberId',
            id: 'SHIFT_MODEL_ASSIGNABLE_MEMBER_ID',
            primitiveType: PApiPrimitiveTypes.Id,
        });
        this.memberIdWrapper = null;
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  Members hourly earnings for this shift model
     *
     * @type {Currency}
     */
    get hourlyEarnings() {
        return this.data[1];
    }
    set hourlyEarnings(v) {
        this.setterImpl(1, v, 'hourlyEarnings');
    }
    /**
     *  Id of assignable member
     *
     * @type {Id}
     */
    get memberId() {
        return this.memberIdWrapper;
    }
    set memberId(v) {
        this.setterImpl(2, v, 'memberId', () => { this.memberIdWrapper = v; });
    }
    _fixIds(_idReplacements) {
        this.data[2] = Meta.getReplacedId(this.data[2], _idReplacements);
        this.memberIdWrapper = Id.create(this.data[2]);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 3);
        }
        // propagate new raw data to children
        if (!Meta.isSameId(data ? data[2] : null, this.memberIdWrapper))
            this.memberIdWrapper = data && data[2] ? Id.create(data[2]) : null;
    }
    get dni() {
        return '296';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '296', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class SchedulingApiShiftModelRepetition extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiShiftModelRepetition);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'repetition',
            id: 'SHIFT_MODEL_REPETITION',
        });
        this.attributeInfoType = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'type',
            id: 'SHIFT_MODEL_REPETITION_TYPE',
            primitiveType: PApiPrimitiveTypes.Enum,
        });
        this.attributeInfoX = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'x',
            id: 'SHIFT_MODEL_REPETITION_X',
            primitiveType: PApiPrimitiveTypes.Integer,
        });
        this.attributeInfoEndsAfterRepetitionCount = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'endsAfterRepetitionCount',
            id: 'SHIFT_MODEL_REPETITION_ENDS_AFTER_REPETITION_COUNT',
            primitiveType: PApiPrimitiveTypes.Integer,
        });
        this.attributeInfoEndsAfterDate = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'endsAfterDate',
            id: 'SHIFT_MODEL_REPETITION_ENDS_AFTER_DATE',
            primitiveType: PApiPrimitiveTypes.DateExclusiveEnd,
        });
        this.attributeInfoIsRepeatingOnMonday = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'isRepeatingOnMonday',
            id: 'SHIFT_MODEL_REPETITION_ON_MONDAY',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoIsRepeatingOnTuesday = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'isRepeatingOnTuesday',
            id: 'SHIFT_MODEL_REPETITION_ON_TUESDAY',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoIsRepeatingOnWednesday = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'isRepeatingOnWednesday',
            id: 'SHIFT_MODEL_REPETITION_ON_WEDNESDAY',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoIsRepeatingOnThursday = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'isRepeatingOnThursday',
            id: 'SHIFT_MODEL_REPETITION_ON_THURSDAY',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoIsRepeatingOnFriday = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'isRepeatingOnFriday',
            id: 'SHIFT_MODEL_REPETITION_ON_FRIDAY',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoIsRepeatingOnSaturday = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'isRepeatingOnSaturday',
            id: 'SHIFT_MODEL_REPETITION_ON_SATURDAY',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoIsRepeatingOnSunday = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'isRepeatingOnSunday',
            id: 'SHIFT_MODEL_REPETITION_ON_SUNDAY',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.packetRepetitionWrapper = new SchedulingApiShiftModelRepetitionPacket(this.api);
        this._updateRawData(Meta.createNewObject(true, idRaw), true);
        // set parent attribute
        this.packetRepetitionWrapper.parent = this;
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  repetition type. "NONE" means no repetition
     *
     * @type {SchedulingApiShiftRepetitionType}
     */
    get type() {
        return this.data[1];
    }
    set type(v) {
        this.setterImpl(1, v, 'type');
    }
    /**
     *  This is the "x" value defined by the type property (e.g. EVERY_X_DAYS or EVERY_X_WEEKS).
     *
     * @type {Integer}
     */
    get x() {
        return this.data[2];
    }
    set x(v) {
        this.setterImpl(2, v, 'x');
    }
    /**
     *  Should the repetition end after a given count? If not, set to "0".
     *
     * @type {Integer}
     */
    get endsAfterRepetitionCount() {
        return this.data[3];
    }
    set endsAfterRepetitionCount(v) {
        this.setterImpl(3, v, 'endsAfterRepetitionCount');
    }
    /**
     *  Should the repetition end after a given date? If not, set to "0".
     *
     * @type {DateExclusiveEnd}
     */
    get endsAfterDate() {
        return this.data[4];
    }
    set endsAfterDate(v) {
        this.setterImpl(4, v, 'endsAfterDate');
    }
    /**
     *  The packet repetition pattern.
     */
    get packetRepetition() {
        return this.packetRepetitionWrapper;
    }
    set packetRepetitionTestSetter(v) {
        this.setterImpl(5, v.rawData, 'packetRepetition', () => { this.packetRepetitionWrapper = v; });
    }
    /**
     *  Is there a repetition on Monday? Only valid when type is "EVERY_X_WEEKS".
     *
     * @type {boolean}
     */
    get isRepeatingOnMonday() {
        return this.data[6];
    }
    set isRepeatingOnMonday(v) {
        this.setterImpl(6, v, 'isRepeatingOnMonday');
    }
    /**
     *  Is there a repetition on Tuesday? Only valid when type is "EVERY_X_WEEKS".
     *
     * @type {boolean}
     */
    get isRepeatingOnTuesday() {
        return this.data[7];
    }
    set isRepeatingOnTuesday(v) {
        this.setterImpl(7, v, 'isRepeatingOnTuesday');
    }
    /**
     *  Is there a repetition on Wednesday? Only valid when type is "EVERY_X_WEEKS".
     *
     * @type {boolean}
     */
    get isRepeatingOnWednesday() {
        return this.data[8];
    }
    set isRepeatingOnWednesday(v) {
        this.setterImpl(8, v, 'isRepeatingOnWednesday');
    }
    /**
     *  Is there a repetition on Thursday? Only valid when type is "EVERY_X_WEEKS".
     *
     * @type {boolean}
     */
    get isRepeatingOnThursday() {
        return this.data[9];
    }
    set isRepeatingOnThursday(v) {
        this.setterImpl(9, v, 'isRepeatingOnThursday');
    }
    /**
     *  Is there a repetition on Friday? Only valid when type is "EVERY_X_WEEKS".
     *
     * @type {boolean}
     */
    get isRepeatingOnFriday() {
        return this.data[10];
    }
    set isRepeatingOnFriday(v) {
        this.setterImpl(10, v, 'isRepeatingOnFriday');
    }
    /**
     *  Is there a repetition on Saturday? Only valid when type is "EVERY_X_WEEKS".
     *
     * @type {boolean}
     */
    get isRepeatingOnSaturday() {
        return this.data[11];
    }
    set isRepeatingOnSaturday(v) {
        this.setterImpl(11, v, 'isRepeatingOnSaturday');
    }
    /**
     *  Is there a repetition on Sunday? Only valid when type is "EVERY_X_WEEKS".
     *
     * @type {boolean}
     */
    get isRepeatingOnSunday() {
        return this.data[12];
    }
    set isRepeatingOnSunday(v) {
        this.setterImpl(12, v, 'isRepeatingOnSunday');
    }
    _fixIds(_idReplacements) {
        this.packetRepetitionWrapper._fixIds(_idReplacements);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 13);
            if (data[5] === null)
                data[5] = Meta.createNewObject(true);
            data[6] = false;
            data[7] = false;
            data[8] = false;
            data[9] = false;
            data[10] = false;
            data[11] = false;
            data[12] = false;
        }
        // propagate new raw data to children
        this.packetRepetitionWrapper._updateRawData(data ? data[5] : null, generateMissingData);
    }
    get dni() {
        return '243';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '243', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class SchedulingApiShiftModelRepetitionPacket extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiShiftModelRepetitionPacket);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'packetRepetition',
            id: 'SHIFT_MODEL_REPETITION_PACKET',
        });
        this.attributeInfoType = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'type',
            id: 'SHIFT_MODEL_REPETITION_PACKET_TYPE',
            primitiveType: PApiPrimitiveTypes.Enum,
        });
        this.attributeInfoX = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'x',
            id: 'SHIFT_MODEL_REPETITION_PACKET_X',
            primitiveType: PApiPrimitiveTypes.Integer,
        });
        this.attributeInfoEndsAfterRepetitionCount = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'endsAfterRepetitionCount',
            id: 'SHIFT_MODEL_REPETITION_PACKET_ENDS_AFTER_REPETITION_COUNT',
            primitiveType: PApiPrimitiveTypes.Integer,
        });
        this.attributeInfoIsRepeatingOnMonday = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'isRepeatingOnMonday',
            id: 'SHIFT_MODEL_REPETITION_PACKET_ON_MONDAY',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoIsRepeatingOnTuesday = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'isRepeatingOnTuesday',
            id: 'SHIFT_MODEL_REPETITION_PACKET_ON_TUESDAY',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoIsRepeatingOnWednesday = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'isRepeatingOnWednesday',
            id: 'SHIFT_MODEL_REPETITION_PACKET_ON_WEDNESDAY',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoIsRepeatingOnThursday = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'isRepeatingOnThursday',
            id: 'SHIFT_MODEL_REPETITION_PACKET_ON_THURSDAY',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoIsRepeatingOnFriday = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'isRepeatingOnFriday',
            id: 'SHIFT_MODEL_REPETITION_PACKET_ON_FRIDAY',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoIsRepeatingOnSaturday = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'isRepeatingOnSaturday',
            id: 'SHIFT_MODEL_REPETITION_PACKET_ON_SATURDAY',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoIsRepeatingOnSunday = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'isRepeatingOnSunday',
            id: 'SHIFT_MODEL_REPETITION_PACKET_ON_SUNDAY',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this._updateRawData(Meta.createNewObject(true, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  repetition type. "NONE" means no repetition
     *
     * @type {SchedulingApiShiftRepetitionType}
     */
    get type() {
        return this.data[1];
    }
    set type(v) {
        this.setterImpl(1, v, 'type');
    }
    /**
     *  This is the "x" value defined by the type property (e.g. EVERY_X_DAYS or EVERY_X_WEEKS).
     *
     * @type {Integer}
     */
    get x() {
        return this.data[2];
    }
    set x(v) {
        this.setterImpl(2, v, 'x');
    }
    /**
     *  Should the repetition end after a given count? If not, set to "0".
     *
     * @type {Integer}
     */
    get endsAfterRepetitionCount() {
        return this.data[3];
    }
    set endsAfterRepetitionCount(v) {
        this.setterImpl(3, v, 'endsAfterRepetitionCount');
    }
    /**
     *  Is there a repetition on Monday? Only valid when type is "EVERY_X_WEEKS".
     *
     * @type {boolean}
     */
    get isRepeatingOnMonday() {
        return this.data[4];
    }
    set isRepeatingOnMonday(v) {
        this.setterImpl(4, v, 'isRepeatingOnMonday');
    }
    /**
     *  Is there a repetition on Tuesday? Only valid when type is "EVERY_X_WEEKS".
     *
     * @type {boolean}
     */
    get isRepeatingOnTuesday() {
        return this.data[5];
    }
    set isRepeatingOnTuesday(v) {
        this.setterImpl(5, v, 'isRepeatingOnTuesday');
    }
    /**
     *  Is there a repetition on Wednesday? Only valid when type is "EVERY_X_WEEKS".
     *
     * @type {boolean}
     */
    get isRepeatingOnWednesday() {
        return this.data[6];
    }
    set isRepeatingOnWednesday(v) {
        this.setterImpl(6, v, 'isRepeatingOnWednesday');
    }
    /**
     *  Is there a repetition on Thursday? Only valid when type is "EVERY_X_WEEKS".
     *
     * @type {boolean}
     */
    get isRepeatingOnThursday() {
        return this.data[7];
    }
    set isRepeatingOnThursday(v) {
        this.setterImpl(7, v, 'isRepeatingOnThursday');
    }
    /**
     *  Is there a repetition on Friday? Only valid when type is "EVERY_X_WEEKS".
     *
     * @type {boolean}
     */
    get isRepeatingOnFriday() {
        return this.data[8];
    }
    set isRepeatingOnFriday(v) {
        this.setterImpl(8, v, 'isRepeatingOnFriday');
    }
    /**
     *  Is there a repetition on Saturday? Only valid when type is "EVERY_X_WEEKS".
     *
     * @type {boolean}
     */
    get isRepeatingOnSaturday() {
        return this.data[9];
    }
    set isRepeatingOnSaturday(v) {
        this.setterImpl(9, v, 'isRepeatingOnSaturday');
    }
    /**
     *  Is there a repetition on Sunday? Only valid when type is "EVERY_X_WEEKS".
     *
     * @type {boolean}
     */
    get isRepeatingOnSunday() {
        return this.data[10];
    }
    set isRepeatingOnSunday(v) {
        this.setterImpl(10, v, 'isRepeatingOnSunday');
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 11);
            data[4] = false;
            data[5] = false;
            data[6] = false;
            data[7] = false;
            data[8] = false;
            data[9] = false;
            data[10] = false;
        }
        // propagate new raw data to children
    }
    get dni() {
        return '305';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '305', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class SchedulingApiShiftModelTime extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiShiftModelTime);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'time',
            id: 'SHIFT_MODEL_TIME',
            canEdit: function () {
                if (!((this.api.rightsService.userCanWrite(this.parent)))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
        });
        this.attributeInfoStart = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'start',
            id: 'SHIFT_MODEL_TIME_START',
            primitiveType: PApiPrimitiveTypes.LocalTime,
        });
        this.attributeInfoEnd = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'end',
            id: 'SHIFT_MODEL_TIME_END',
            primitiveType: PApiPrimitiveTypes.LocalTime,
        });
        this._updateRawData(Meta.createNewObject(true, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  The time when this shift-model will start.
     *
     * @type {LocalTime}
     */
    get start() {
        return this.data[1];
    }
    set start(v) {
        this.setterImpl(1, v, 'start');
    }
    /**
     * (Detail)  The time when this shift-model will end.
     *
     * @type {LocalTime}
     */
    get end() {
        return this.data[2];
    }
    set end(v) {
        this.setterImpl(2, v, 'end');
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 3);
        }
        // propagate new raw data to children
    }
    get dni() {
        return '244';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '244', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class SchedulingApiShiftModelPosAccounts extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'posAccounts');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'posAccounts',
            id: 'SHIFT_MODEL_POS_ACCOUNTS',
            primitiveType: PApiPrimitiveTypes.ApiList,
        });
    }
    wrapItem(item, _generateMissingData) {
        const newWrapper = new SchedulingApiShiftModelPosAccount(this.api);
        newWrapper._updateRawData(item, _generateMissingData);
        return newWrapper;
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return false;
    }
    createInstance(removeDestroyedItems) {
        return new SchedulingApiShiftModelPosAccounts(this.api, removeDestroyedItems);
    }
    get dni() {
        return '247';
    }
    createNewItem(id = null) {
        const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('posAccounts');
        return newItem;
    }
}
export class SchedulingApiShiftModelPosAccount extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiShiftModelPosAccount);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'shiftModelPosAccount',
            id: 'SHIFT_MODEL_POS_ACCOUNT',
        });
        this.attributeInfoTax = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'tax',
            id: 'SHIFT_MODEL_POS_ACCOUNT_TAX',
            primitiveType: PApiPrimitiveTypes.number,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.maxDecimalPlacesCount(1, PApiPrimitiveTypes.number, undefined);
                    },
                ];
            },
        });
        this.attributeInfoName = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'name',
            id: 'SHIFT_MODEL_POS_ACCOUNT_NAME',
            primitiveType: PApiPrimitiveTypes.string,
        });
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  Tax value.
     *
     * @type {number}
     */
    get tax() {
        return this.data[1];
    }
    set tax(v) {
        this.setterImpl(1, v, 'tax');
    }
    /**
     *  Name of the pos account.
     *
     * @type {string}
     */
    get name() {
        return this.data[2];
    }
    set name(v) {
        this.setterImpl(2, v, 'name');
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 3);
        }
        // propagate new raw data to children
    }
    get dni() {
        return '323';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '323', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export var SchedulingApiCourseType;
(function (SchedulingApiCourseType) {
    SchedulingApiCourseType[SchedulingApiCourseType["ONLINE_BOOKABLE"] = 1] = "ONLINE_BOOKABLE";
    SchedulingApiCourseType[SchedulingApiCourseType["ONLINE_INQUIRY"] = 2] = "ONLINE_INQUIRY";
    SchedulingApiCourseType[SchedulingApiCourseType["NO_BOOKING"] = 3] = "NO_BOOKING";
})(SchedulingApiCourseType || (SchedulingApiCourseType = {}));
export class SchedulingApiShiftModelChangeSelector extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiShiftModelChangeSelector);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'changeSelector',
            id: 'SHIFT_MODEL_CHANGE_SELECTOR',
        });
        this.attributeInfoStart = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'start',
            id: 'SHIFT_MODEL_CHANGE_SELECTOR_START',
            primitiveType: PApiPrimitiveTypes.Date,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(+this.api.pMoment.monthsFromNow(-5), true, PApiPrimitiveTypes.Date, undefined, undefined);
                        return null;
                    },
                    () => {
                        return this.api.validators.max(+this.api.pMoment.monthsFromNow(12), true, PApiPrimitiveTypes.Date, undefined, undefined);
                        return null;
                    },
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Date, undefined);
                        return null;
                    },
                ];
            },
        });
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  The start time from which the existing shifts should be modified. If "null" then no shifts will be modified.
     *
     * @type {Date}
     */
    get start() {
        return this.data[1];
    }
    set start(v) {
        this.setterImpl(1, v, 'start');
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 2);
        }
        // propagate new raw data to children
    }
    get dni() {
        return '250';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '250', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class SchedulingApiShiftModelAutomaticBookableMailIds extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'automaticBookableMailIds');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'automaticBookableMailIds',
            id: 'SHIFT_MODEL_AUTOMATIC_BOOKABLE_MAIL_IDS',
            primitiveType: PApiPrimitiveTypes.ApiList,
        });
        this.attributeInfoShiftModelAutomaticBookableMailId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'shiftModelAutomaticBookableMailId',
            id: 'SHIFT_MODEL_AUTOMATIC_BOOKABLE_MAIL_ID',
            primitiveType: PApiPrimitiveTypes.Id,
        });
    }
    wrapItem(item, _generateMissingData) {
        return Id.create(item);
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return true;
    }
    createInstance(removeDestroyedItems) {
        return new SchedulingApiShiftModelAutomaticBookableMailIds(this.api, removeDestroyedItems);
    }
    get dni() {
        return '251';
    }
    createNewItem() {
        const newItemRaw = null;
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('automaticBookableMailIds');
        return newItem;
    }
}
export class SchedulingApiShiftModelCourseTariffsBase extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'courseTariffs');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'courseTariffs',
            id: 'SHIFT_MODEL_COURSE_TARIFFS',
            primitiveType: PApiPrimitiveTypes.ApiList,
        });
    }
    wrapItem(item, _generateMissingData) {
        const newWrapper = new SchedulingApiShiftModelCourseTariff(this.api);
        newWrapper._updateRawData(item, _generateMissingData);
        return newWrapper;
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return false;
    }
    createInstance(removeDestroyedItems) {
        return new SchedulingApiShiftModelCourseTariffs(this.api, removeDestroyedItems);
    }
    get dni() {
        return '253';
    }
    createNewItem(id = null) {
        const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('courseTariffs');
        return newItem;
    }
}
export class SchedulingApiShiftModelCourseTariffBase extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiShiftModelCourseTariff);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'shiftModelCourseTariff',
            id: 'SHIFT_MODEL_COURSE_TARIFF',
        });
        this.attributeInfoName = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'name',
            id: 'SHIFT_MODEL_COURSE_TARIFF_NAME',
            primitiveType: PApiPrimitiveTypes.string,
        });
        this.attributeInfoDescription = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'description',
            id: 'SHIFT_MODEL_COURSE_TARIFF_DESCRIPTION',
            primitiveType: PApiPrimitiveTypes.string,
        });
        this.attributeInfoIsInternal = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'isInternal',
            id: 'SHIFT_MODEL_COURSE_TARIFF_IS_INTERNAL',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoAdditionalFieldLabel = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'additionalFieldLabel',
            id: 'SHIFT_MODEL_COURSE_TARIFF_ADDITIONAL_FIELD_LABEL',
            primitiveType: PApiPrimitiveTypes.string,
        });
        this.attributeInfoForCourseDatesFrom = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'forCourseDatesFrom',
            id: 'SHIFT_MODEL_COURSE_TARIFF_FOR_COURSE_DATES_FROM',
            primitiveType: PApiPrimitiveTypes.Date,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(() => this.forCourseDatesUntil, false, PApiPrimitiveTypes.Date, 'SHIFT_MODEL_COURSE_TARIFF_FOR_COURSE_DATES_UNTIL', undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoForCourseDatesUntil = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'forCourseDatesUntil',
            id: 'SHIFT_MODEL_COURSE_TARIFF_FOR_COURSE_DATES_UNTIL',
            primitiveType: PApiPrimitiveTypes.DateExclusiveEnd,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(() => this.forCourseDatesFrom, false, PApiPrimitiveTypes.DateExclusiveEnd, 'SHIFT_MODEL_COURSE_TARIFF_FOR_COURSE_DATES_FROM', undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoNegateForCourseDatesInterval = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'negateForCourseDatesInterval',
            id: 'SHIFT_MODEL_COURSE_TARIFF_NEGATE_FOR_COURSE_DATES_INTERVAL',
            primitiveType: PApiPrimitiveTypes.boolean,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.boolean, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoTrashed = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'trashed',
            id: 'SHIFT_MODEL_COURSE_TARIFF_TRASHED',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoApplyToBooking = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'applyToBooking',
            id: 'SHIFT_MODEL_COURSE_TARIFF_APPLY_TO_BOOKING',
            primitiveType: PApiPrimitiveTypes.Id,
        });
        this.attributeInfoApplyToParticipant = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'applyToParticipant',
            id: 'SHIFT_MODEL_COURSE_TARIFF_APPLY_TO_PARTICIPANT',
            primitiveType: PApiPrimitiveTypes.Id,
        });
        this.feesWrapper = new SchedulingApiShiftModelCourseTariffFees(this.api, false);
        this.applyToBookingWrapper = null;
        this.applyToParticipantWrapper = null;
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
        this.feesWrapper.parent = this;
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  Tariff Name
     *
     * @type {string}
     */
    get name() {
        return this.data[1];
    }
    set name(v) {
        this.setterImpl(1, v, 'name');
    }
    /**
     *  Tariff Description
     *
     * @type {string}
     */
    get description() {
        return this.data[2];
    }
    set description(v) {
        this.setterImpl(2, v, 'description');
    }
    /**
     *  Is the tariff internal? I.e. only usable during manual booking?
     *
     * @type {boolean}
     */
    get isInternal() {
        return this.data[3];
    }
    set isInternal(v) {
        this.setterImpl(3, v, 'isInternal');
    }
    /**
     *  A list of tariff's fees
     */
    get fees() {
        return this.feesWrapper;
    }
    set feesTestSetter(v) {
        this.setterImpl(4, v.rawData, 'fees', () => { this.feesWrapper = v; });
    }
    /**
     *  If this contains an empty string then this tariff does not require an additional field. Otherwise this contains the label of the additional field.
     *
     * @type {string}
     */
    get additionalFieldLabel() {
        return this.data[5];
    }
    set additionalFieldLabel(v) {
        this.setterImpl(5, v, 'additionalFieldLabel');
    }
    /**
     *  This tariff should be used for course dates from this given date-time. Relevant is start of the first course-shift. Optional value.
     *
     * @type {Date}
     */
    get forCourseDatesFrom() {
        return this.data[6];
    }
    set forCourseDatesFrom(v) {
        this.setterImpl(6, v, 'forCourseDatesFrom');
    }
    /**
     *  This tariff should be used for course dates until this given date-time. Relevant is start of the first course-shift. Optional value.
     *
     * @type {DateExclusiveEnd}
     */
    get forCourseDatesUntil() {
        return this.data[7];
    }
    set forCourseDatesUntil(v) {
        this.setterImpl(7, v, 'forCourseDatesUntil');
    }
    /**
     *  Normally "forCourseDatesFrom" and "forCourseDatesUntil" define an interval for which this tariff should be used. When this is "true" then they define an interval for which this tariff should NOT be used.
     *
     * @type {boolean}
     */
    get negateForCourseDatesInterval() {
        return this.data[8];
    }
    set negateForCourseDatesInterval(v) {
        this.setterImpl(8, v, 'negateForCourseDatesInterval');
    }
    /**
     *  Is the tariff trashed?
     *
     * @type {boolean}
     */
    get trashed() {
        return this.data[9];
    }
    set trashed(v) {
        this.setterImpl(9, v, 'trashed');
    }
    set applyToBooking(v) {
        this.setterImpl(10, v, 'applyToBooking', () => { this.applyToBookingWrapper = v; });
    }
    set applyToParticipant(v) {
        this.setterImpl(11, v, 'applyToParticipant', () => { this.applyToParticipantWrapper = v; });
    }
    _fixIds(_idReplacements) {
        this.feesWrapper._fixIds(_idReplacements);
        this.data[10] = Meta.getReplacedId(this.data[10], _idReplacements);
        this.applyToBookingWrapper = Id.create(this.data[10]);
        this.data[11] = Meta.getReplacedId(this.data[11], _idReplacements);
        this.applyToParticipantWrapper = Id.create(this.data[11]);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 12);
            data[3] = false;
            if (data[4] === null)
                data[4] = Meta.createNewList();
            data[8] = false;
            data[9] = false;
        }
        // propagate new raw data to children
        this.feesWrapper._updateRawData(data ? data[4] : null, generateMissingData);
        if (!Meta.isSameId(data ? data[10] : null, this.applyToBookingWrapper))
            this.applyToBookingWrapper = data && data[10] ? Id.create(data[10]) : null;
        if (!Meta.isSameId(data ? data[11] : null, this.applyToParticipantWrapper))
            this.applyToParticipantWrapper = data && data[11] ? Id.create(data[11]) : null;
    }
    get dni() {
        return '328';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '328', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class SchedulingApiShiftModelCourseTariffFees extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'fees');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'fees',
            id: 'SHIFT_MODEL_COURSE_TARIFF_FEES',
            primitiveType: PApiPrimitiveTypes.ApiList,
        });
    }
    wrapItem(item, _generateMissingData) {
        const newWrapper = new SchedulingApiShiftModelCourseTariffFee(this.api);
        newWrapper._updateRawData(item, _generateMissingData);
        return newWrapper;
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return false;
    }
    createInstance(removeDestroyedItems) {
        return new SchedulingApiShiftModelCourseTariffFees(this.api, removeDestroyedItems);
    }
    get dni() {
        return '332';
    }
    createNewItem(id = null) {
        const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('fees');
        return newItem;
    }
}
export class SchedulingApiShiftModelCourseTariffFee extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiShiftModelCourseTariffFee);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'shiftModelCourseTariffFee',
            id: 'SHIFT_MODEL_COURSE_TARIFF_FEE',
        });
        this.attributeInfoName = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'name',
            id: 'SHIFT_MODEL_COURSE_TARIFF_FEE_NAME',
            primitiveType: PApiPrimitiveTypes.string,
        });
        this.attributeInfoFee = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'fee',
            id: 'SHIFT_MODEL_COURSE_TARIFF_FEE_FEE',
            primitiveType: PApiPrimitiveTypes.Currency,
        });
        this.attributeInfoPerXParticipants = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'perXParticipants',
            id: 'SHIFT_MODEL_COURSE_TARIFF_FEE_PER_X_PARTICIPANTS',
            primitiveType: PApiPrimitiveTypes.Integer,
        });
        this.attributeInfoTaxPercentage = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'taxPercentage',
            id: 'SHIFT_MODEL_COURSE_TARIFF_FEE_TAX_PERCENTAGE',
            primitiveType: PApiPrimitiveTypes.number,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.maxDecimalPlacesCount(1, PApiPrimitiveTypes.number, undefined);
                    },
                ];
            },
        });
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  Fee Name
     *
     * @type {string}
     */
    get name() {
        return this.data[1];
    }
    set name(v) {
        this.setterImpl(1, v, 'name');
    }
    /**
     *  Gross amount to pay
     *
     * @type {Currency}
     */
    get fee() {
        return this.data[2];
    }
    set fee(v) {
        this.setterImpl(2, v, 'fee');
    }
    /**
     *  Amount has to be paid per how many participants?
     *
     * @type {Integer}
     */
    get perXParticipants() {
        return this.data[3];
    }
    set perXParticipants(v) {
        this.setterImpl(3, v, 'perXParticipants');
    }
    /**
     *  Tax percentage
     *
     * @type {number}
     */
    get taxPercentage() {
        return this.data[4];
    }
    set taxPercentage(v) {
        this.setterImpl(4, v, 'taxPercentage');
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 5);
        }
        // propagate new raw data to children
    }
    get dni() {
        return '340';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '340', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class SchedulingApiShiftModelCoursePaymentMethodsBase extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'coursePaymentMethods');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'coursePaymentMethods',
            id: 'SHIFT_MODEL_COURSE_PAYMENT_METHODS',
            primitiveType: PApiPrimitiveTypes.ApiList,
        });
    }
    wrapItem(item, _generateMissingData) {
        const newWrapper = new SchedulingApiShiftModelCoursePaymentMethod(this.api);
        newWrapper._updateRawData(item, _generateMissingData);
        return newWrapper;
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return false;
    }
    createInstance(removeDestroyedItems) {
        return new SchedulingApiShiftModelCoursePaymentMethods(this.api, removeDestroyedItems);
    }
    get dni() {
        return '254';
    }
    createNewItem(id = null) {
        const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('coursePaymentMethods');
        return newItem;
    }
}
export class SchedulingApiShiftModelCoursePaymentMethod extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiShiftModelCoursePaymentMethod);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'shiftModelCoursePaymentMethod',
            id: 'SHIFT_MODEL_COURSE_PAYMENT_METHOD',
        });
        this.attributeInfoType = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'type',
            id: 'SHIFT_MODEL_COURSE_PAYMENT_METHOD_TYPE',
            primitiveType: PApiPrimitiveTypes.Enum,
        });
        this.attributeInfoName = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'name',
            id: 'SHIFT_MODEL_COURSE_PAYMENT_METHOD_NAME',
            primitiveType: PApiPrimitiveTypes.string,
        });
        this.attributeInfoDescription = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'description',
            id: 'SHIFT_MODEL_COURSE_PAYMENT_METHOD_DESCRIPTION',
            primitiveType: PApiPrimitiveTypes.string,
        });
        this.attributeInfoIsInternal = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'isInternal',
            id: 'SHIFT_MODEL_COURSE_PAYMENT_METHOD_IS_INTERNAL',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoTrashed = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'trashed',
            id: 'SHIFT_MODEL_COURSE_PAYMENT_METHOD_TRASHED',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoApplyToBooking = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'applyToBooking',
            id: 'SHIFT_MODEL_COURSE_PAYMENT_METHOD_APPLY_TO_BOOKING',
            primitiveType: PApiPrimitiveTypes.Id,
        });
        this.applyToBookingWrapper = null;
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  Payment method type
     *
     * @type {SchedulingApiPaymentMethodType}
     */
    get type() {
        return this.data[1];
    }
    set type(v) {
        this.setterImpl(1, v, 'type');
    }
    /**
     *  Payment method name
     *
     * @type {string}
     */
    get name() {
        return this.data[2];
    }
    set name(v) {
        this.setterImpl(2, v, 'name');
    }
    /**
     *  Payment method description. This value is ignored for type == "PAYPAL".
     *
     * @type {string}
     */
    get description() {
        return this.data[3];
    }
    set description(v) {
        this.setterImpl(3, v, 'description');
    }
    /**
     *  Is the payment-method internal? I.e. only usable during manual booking?
     *
     * @type {boolean}
     */
    get isInternal() {
        return this.data[4];
    }
    set isInternal(v) {
        this.setterImpl(4, v, 'isInternal');
    }
    /**
     *  Is the payment method trashed?
     *
     * @type {boolean}
     */
    get trashed() {
        return this.data[5];
    }
    set trashed(v) {
        this.setterImpl(5, v, 'trashed');
    }
    set applyToBooking(v) {
        this.setterImpl(6, v, 'applyToBooking', () => { this.applyToBookingWrapper = v; });
    }
    _fixIds(_idReplacements) {
        this.data[6] = Meta.getReplacedId(this.data[6], _idReplacements);
        this.applyToBookingWrapper = Id.create(this.data[6]);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 7);
            data[4] = false;
            data[5] = false;
        }
        // propagate new raw data to children
        if (!Meta.isSameId(data ? data[6] : null, this.applyToBookingWrapper))
            this.applyToBookingWrapper = data && data[6] ? Id.create(data[6]) : null;
    }
    get dni() {
        return '345';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '345', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export var SchedulingApiPaymentMethodType;
(function (SchedulingApiPaymentMethodType) {
    SchedulingApiPaymentMethodType[SchedulingApiPaymentMethodType["ONLINE_PAYMENT"] = 1] = "ONLINE_PAYMENT";
    SchedulingApiPaymentMethodType[SchedulingApiPaymentMethodType["PAYPAL"] = 2] = "PAYPAL";
    SchedulingApiPaymentMethodType[SchedulingApiPaymentMethodType["MISC"] = 3] = "MISC";
})(SchedulingApiPaymentMethodType || (SchedulingApiPaymentMethodType = {}));
export class SchedulingApiShiftModelCancellationPolicies extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'cancellationPolicies');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'cancellationPolicies',
            id: 'SHIFT_MODEL_CANCELLATION_POLICIES',
            primitiveType: PApiPrimitiveTypes.ApiList,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.ApiList, undefined);
                        return null;
                    },
                ];
            },
        });
    }
    wrapItem(item, _generateMissingData) {
        const newWrapper = new SchedulingApiShiftModelCancellationPolicy(this.api);
        newWrapper._updateRawData(item, _generateMissingData);
        return newWrapper;
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return false;
    }
    createInstance(removeDestroyedItems) {
        return new SchedulingApiShiftModelCancellationPolicies(this.api, removeDestroyedItems);
    }
    get dni() {
        return '257';
    }
    createNewItem(id = null) {
        const newItemRaw = Meta.createNewObject(true, !!id ? id.rawData : null);
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('cancellationPolicies');
        return newItem;
    }
}
export class SchedulingApiShiftModelCancellationPolicy extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiShiftModelCancellationPolicy);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'shiftModelCancellationPolicy',
            id: 'SHIFT_MODEL_CANCELLATION_POLICY',
        });
        this.attributeInfoWithdrawalEnabled = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'withdrawalEnabled',
            id: 'SHIFT_MODEL_CANCELLATION_POLICY_WITHDRAWAL_ENABLED',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoWithdrawalPeriod = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'withdrawalPeriod',
            id: 'SHIFT_MODEL_CANCELLATION_POLICY_WITHDRAWAL_PERIOD',
            primitiveType: PApiPrimitiveTypes.Days,
            show: function () {
                if (!((this.withdrawalEnabled))) {
                    return false;
                }
                return true;
            },
            validations: function () {
                return [
                    () => {
                        if (((this.withdrawalEnabled))) {
                            return this.api.validators.required(PApiPrimitiveTypes.Days, undefined);
                        }
                        return null;
                    },
                    () => {
                        return this.api.validators.min(0, false, PApiPrimitiveTypes.Days, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.feePeriodsWrapper = new SchedulingApiShiftModelCancellationPolicyFeePeriods(this.api, false);
        this._updateRawData(Meta.createNewObject(true, idRaw), true);
        // set parent attribute
        this.feePeriodsWrapper.parent = this;
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  A list of all fee periods. The items of this list are sorted in a chronological direction where each period starts at "feePeriod.start" and ends at the next period's "start". The first period in the list must have "start" set to "null" which means that it starts from "infinite". The last period in the list is valid to infinite. So, for any given date-time a specific period can be associated.
     */
    get feePeriods() {
        return this.feePeriodsWrapper;
    }
    set feePeriodsTestSetter(v) {
        this.setterImpl(1, v.rawData, 'feePeriods', () => { this.feePeriodsWrapper = v; });
    }
    /**
     *  Is booking withdrawal allowed? See "withdrawalPeriod".
     *
     * @type {boolean}
     */
    get withdrawalEnabled() {
        return this.data[2];
    }
    set withdrawalEnabled(v) {
        this.setterImpl(2, v, 'withdrawalEnabled', () => { this.withdrawalPeriod = null; });
    }
    /**
     *  Defines the number of days after the booking date in which the booking person has the right of withdrawal. I.e. he can cancel the booking without paying any cancellation fees. Only relevant when "withdrawalPeriod" is "true".
     *
     * @type {Days}
     */
    get withdrawalPeriod() {
        return this.data[3];
    }
    set withdrawalPeriod(v) {
        this.setterImpl(3, v, 'withdrawalPeriod');
    }
    _fixIds(_idReplacements) {
        this.feePeriodsWrapper._fixIds(_idReplacements);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 4);
            if (data[1] === null)
                data[1] = Meta.createNewList();
            data[2] = false;
        }
        // propagate new raw data to children
        this.feePeriodsWrapper._updateRawData(data ? data[1] : null, generateMissingData);
    }
    get dni() {
        return '353';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '353', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class SchedulingApiShiftModelCancellationPolicyFeePeriodsBase extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'feePeriods');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'feePeriods',
            id: 'SHIFT_MODEL_CANCELLATION_POLICY_FEE_PERIODS',
            primitiveType: PApiPrimitiveTypes.ApiList,
            validations: function () {
                return [
                    () => {
                        var _a;
                        if ((((_a = this.parent.parent) === null || _a === void 0 ? void 0 : _a.parent.onlineCancellationForChargeableBookingsEnabled))) {
                            return this.api.validators.required(PApiPrimitiveTypes.ApiList, undefined);
                        }
                        return null;
                    },
                    () => { return this.checkFirstPeriodShouldHaveNullStart(); },
                ];
            },
        });
    }
    wrapItem(item, _generateMissingData) {
        const newWrapper = new SchedulingApiShiftModelCancellationPolicyFeePeriod(this.api);
        newWrapper._updateRawData(item, _generateMissingData);
        return newWrapper;
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return false;
    }
    createInstance(removeDestroyedItems) {
        return new SchedulingApiShiftModelCancellationPolicyFeePeriods(this.api, removeDestroyedItems);
    }
    get dni() {
        return '354';
    }
    createNewItem(id = null) {
        const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('feePeriods');
        return newItem;
    }
}
export class SchedulingApiShiftModelCancellationPolicyFeePeriodBase extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiShiftModelCancellationPolicyFeePeriod);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'shiftModelCancellationPolicyFeePeriod',
            id: 'SHIFT_MODEL_CANCELLATION_POLICY_FEE_PERIOD',
        });
        this.attributeInfoFeeFix = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'feeFix',
            id: 'SHIFT_MODEL_CANCELLATION_POLICY_FEE_PERIOD_FEE_FIX',
            primitiveType: PApiPrimitiveTypes.Currency,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Currency, undefined);
                        return null;
                    },
                    () => {
                        return this.api.validators.min(0, true, PApiPrimitiveTypes.Currency, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoFeePercentage = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'feePercentage',
            id: 'SHIFT_MODEL_CANCELLATION_POLICY_FEE_PERIOD_FEE_PERCENTAGE',
            primitiveType: PApiPrimitiveTypes.number,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.number, undefined);
                        return null;
                    },
                    () => {
                        return this.api.validators.min(0, true, PApiPrimitiveTypes.number, undefined, undefined);
                        return null;
                    },
                    () => {
                        return this.api.validators.max(100, true, PApiPrimitiveTypes.number, undefined, undefined);
                        return null;
                    },
                    () => {
                        return this.api.validators.maxDecimalPlacesCount(1, PApiPrimitiveTypes.number, undefined);
                    },
                ];
            },
        });
        this.attributeInfoStart = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'start',
            id: 'SHIFT_MODEL_CANCELLATION_POLICY_FEE_PERIOD_START',
            primitiveType: PApiPrimitiveTypes.Days,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(0, true, PApiPrimitiveTypes.Days, undefined, undefined);
                        return null;
                    },
                    () => {
                        return this.api.validators.min(() => this.end, true, PApiPrimitiveTypes.Days, 'SHIFT_MODEL_CANCELLATION_POLICY_FEE_PERIOD_END', undefined);
                        return null;
                    },
                    () => {
                        return this.api.validators.notUndefined(PApiPrimitiveTypes.Days, undefined);
                    },
                    () => {
                        if (((this.parent.indexOf(this) > 0))) {
                            return this.api.validators.required(PApiPrimitiveTypes.Days, undefined);
                        }
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoEnd = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'end',
            id: 'SHIFT_MODEL_CANCELLATION_POLICY_FEE_PERIOD_END',
            primitiveType: PApiPrimitiveTypes.Days,
            canEdit: function () {
                return false;
                return true;
            },
            readMode: function () {
                return false;
            },
            vars: {
                cannotEditHint: () => this.end === null ? 'Das Ende der ersten Zeitspanne muss so definiert sein, um Lücken zu vermeiden und sicherzustellen, dass auch Stornos nach dem gebuchten Termin abgedeckt sind. Bei mehrtägigen Angeboten gilt immer der Starttermin als Referenz.' :
                    'Das Ende errechnet sich automatisch anhand des Startzeitpunktes der vorherigen Zeitspanne. So werden Lücken zwischen den Zeiträumen vermieden.',
            }
        });
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  The fix fee of a booking cancellation.
     *
     * @type {Currency}
     */
    get feeFix() {
        return this.data[1];
    }
    set feeFix(v) {
        this.setterImpl(1, v, 'feeFix');
    }
    /**
     *  The percentage fee of a booking cancellation.
     *
     * @type {number}
     */
    get feePercentage() {
        return this.data[2];
    }
    set feePercentage(v) {
        this.setterImpl(2, v, 'feePercentage');
    }
    /**
     *  From when is this period valid? The number of days is relative to the beginning of the day when the course starts. The first item in the list must always have this set to "null". See "cancellationPeriod.feePeriods" for more details.
     *
     * @type {Days}
     */
    get start() {
        return this.data[3];
    }
    set start(v) {
        this.setterImpl(3, v, 'start');
    }
    set end(v) {
        this.setterImpl(4, v, 'end');
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 5);
        }
        // propagate new raw data to children
    }
    get dni() {
        return '357';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '357', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export var SchedulingApiBookingDesiredDateSetting;
(function (SchedulingApiBookingDesiredDateSetting) {
    SchedulingApiBookingDesiredDateSetting[SchedulingApiBookingDesiredDateSetting["DESIRED_DATE_NOT_ALLOWED"] = 1] = "DESIRED_DATE_NOT_ALLOWED";
    SchedulingApiBookingDesiredDateSetting[SchedulingApiBookingDesiredDateSetting["DESIRED_DATE_OPTIONAL"] = 2] = "DESIRED_DATE_OPTIONAL";
    SchedulingApiBookingDesiredDateSetting[SchedulingApiBookingDesiredDateSetting["ONLY_DESIRED_DATES"] = 3] = "ONLY_DESIRED_DATES";
})(SchedulingApiBookingDesiredDateSetting || (SchedulingApiBookingDesiredDateSetting = {}));
export class SchedulingApiShiftModelNeededMembersCountConf extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiShiftModelNeededMembersCountConf);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'neededMembersCountConf',
            id: 'SHIFT_MODEL_NEEDED_MEMBERS_COUNT_CONF',
            canEdit: function () {
                if (!((this.api.rightsService.userCanWrite(this.parent)))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
        });
        this.attributeInfoNeededMembersCount = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'neededMembersCount',
            id: 'SHIFT_MODEL_NEEDED_MEMBERS_COUNT_CONF_NEEDED_MEMBERS_COUNT',
            primitiveType: PApiPrimitiveTypes.Integer,
        });
        this.attributeInfoPerXParticipants = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'perXParticipants',
            id: 'SHIFT_MODEL_NEEDED_MEMBERS_COUNT_CONF_PER_X_PARTICIPANTS',
            primitiveType: PApiPrimitiveTypes.Integer,
        });
        this.attributeInfoIsZeroNotReachedMinParticipantsCount = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'isZeroNotReachedMinParticipantsCount',
            id: 'SHIFT_MODEL_NEEDED_MEMBERS_COUNT_CONF_IS_ZERO_NOT_REACHED_MIN_PARTICIPANTS_COUNT',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this._updateRawData(Meta.createNewObject(true, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  See perXParticipants for documentation.
     *
     * @type {Integer}
     */
    get neededMembersCount() {
        return this.data[1];
    }
    set neededMembersCount(v) {
        this.setterImpl(1, v, 'neededMembersCount');
    }
    /**
     *  If this value is "null" then the final needed-members-count will be just "neededMembersCount". Otherwise it will be "neededMembersCount * ceil(participant-count / perXParticipants)". The calculated needed-members-count can be retrieved in shift.neededMembersCount.
     *
     * @type {Integer}
     */
    get perXParticipants() {
        return this.data[2];
    }
    set perXParticipants(v) {
        this.setterImpl(2, v, 'perXParticipants');
    }
    /**
     *  If "true" then needed-members-count will be zero when participants count has not reached min-participants-count.
     *
     * @type {boolean}
     */
    get isZeroNotReachedMinParticipantsCount() {
        return this.data[3];
    }
    set isZeroNotReachedMinParticipantsCount(v) {
        this.setterImpl(3, v, 'isZeroNotReachedMinParticipantsCount');
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 4);
            data[3] = false;
        }
        // propagate new raw data to children
    }
    get dni() {
        return '266';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '266', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class SchedulingApiShiftModelAssignedMemberIds extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'assignedMemberIds');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'assignedMemberIds',
            id: 'SHIFT_MODEL_ASSIGNED_MEMBER_IDS',
            primitiveType: PApiPrimitiveTypes.ApiList,
            show: function () {
                if (!((this.api.rightsService.userCanWrite(this.parent)))) {
                    return false;
                }
                return true;
            },
        });
        this.attributeInfoShiftModelAssignedMemberId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'shiftModelAssignedMemberId',
            id: 'SHIFT_MODEL_ASSIGNED_MEMBER_ID',
            primitiveType: PApiPrimitiveTypes.Id,
        });
    }
    wrapItem(item, _generateMissingData) {
        return Id.create(item);
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return true;
    }
    createInstance(removeDestroyedItems) {
        return new SchedulingApiShiftModelAssignedMemberIds(this.api, removeDestroyedItems);
    }
    get dni() {
        return '268';
    }
    createNewItem() {
        const newItemRaw = null;
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('assignedMemberIds');
        return newItem;
    }
}
export class SchedulingApiShiftModelCourseHighlights extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'courseHighlights');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'courseHighlights',
            id: 'SHIFT_MODEL_COURSE_HIGHLIGHTS',
            primitiveType: PApiPrimitiveTypes.ApiList,
            canEdit: function () {
                if (!((this.api.rightsService.userCanWrite(this.parent)))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
        });
    }
    wrapItem(item, _generateMissingData) {
        const newWrapper = new SchedulingApiShiftModelCourseHighlight(this.api);
        newWrapper._updateRawData(item, _generateMissingData);
        return newWrapper;
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return false;
    }
    createInstance(removeDestroyedItems) {
        return new SchedulingApiShiftModelCourseHighlights(this.api, removeDestroyedItems);
    }
    get dni() {
        return '273';
    }
    createNewItem(id = null) {
        const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('courseHighlights');
        return newItem;
    }
}
export class SchedulingApiShiftModelCourseHighlight extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiShiftModelCourseHighlight);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'shiftModelCourseHighlight',
            id: 'SHIFT_MODEL_COURSE_HIGHLIGHT',
        });
        this.attributeInfoText = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'text',
            id: 'SHIFT_MODEL_COURSE_HIGHLIGHT_TEXT',
            primitiveType: PApiPrimitiveTypes.string,
        });
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  Highlight text
     *
     * @type {string}
     */
    get text() {
        return this.data[1];
    }
    set text(v) {
        this.setterImpl(1, v, 'text');
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 2);
        }
        // propagate new raw data to children
    }
    get dni() {
        return '326';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '326', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export var SchedulingApiPosSystem;
(function (SchedulingApiPosSystem) {
    SchedulingApiPosSystem[SchedulingApiPosSystem["BOULDERADO"] = 1] = "BOULDERADO";
    SchedulingApiPosSystem[SchedulingApiPosSystem["FREECLIMBER"] = 2] = "FREECLIMBER";
})(SchedulingApiPosSystem || (SchedulingApiPosSystem = {}));
export class SchedulingApiNotificationsConf extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiNotificationsConf);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'notificationsConf',
            id: 'NOTIFICATIONS_CONF',
        });
        this.attributeInfoSendEmail = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'sendEmail',
            id: 'NOTIFICATIONS_CONF_SEND_EMAIL',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  Should email notifications be send for current action? Default is "true".
     *
     * @type {boolean}
     */
    get sendEmail() {
        return this.data[1];
    }
    set sendEmail(v) {
        this.setterImpl(1, v, 'sendEmail');
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 2);
            data[1] = false;
        }
        // propagate new raw data to children
    }
    get dni() {
        return '15';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '15', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class SchedulingApiRightGroupsBase extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'rightGroups');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'rightGroups',
            id: 'RIGHT_GROUPS',
            primitiveType: PApiPrimitiveTypes.ApiList,
            canEdit: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return true;
                }
                return false;
            },
        });
    }
    wrapItem(item, _generateMissingData) {
        const newWrapper = new SchedulingApiRightGroup(this.api);
        newWrapper._updateRawData(item, _generateMissingData);
        return newWrapper;
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return false;
    }
    createInstance(removeDestroyedItems) {
        return new SchedulingApiRightGroups(this.api, removeDestroyedItems);
    }
    get dni() {
        return '16';
    }
    createNewItem(id = null) {
        const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('rightGroups');
        return newItem;
    }
}
export class SchedulingApiRightGroupBase extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiRightGroup);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'rightGroup',
            id: 'RIGHT_GROUP',
        });
        this.attributeInfoName = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'name',
            id: 'RIGHT_GROUP_NAME',
            primitiveType: PApiPrimitiveTypes.string,
        });
        this.attributeInfoRole = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'role',
            id: 'RIGHT_GROUP_ROLE',
            primitiveType: PApiPrimitiveTypes.Enum,
            canEdit: function () {
                return true;
            },
            readMode: function () {
                return false;
            },
        });
        this.attributeInfoCanReadAndWriteBookingSystemSettings = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'canReadAndWriteBookingSystemSettings',
            id: 'RIGHT_GROUP_CAN_READ_AND_WRITE_BOOKING_SYSTEM_SETTINGS',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.shiftModelRightsWrapper = new SchedulingApiRightGroupShiftModelRights(this.api, false);
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
        this.shiftModelRightsWrapper.parent = this;
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  The name of the right group
     *
     * @type {string}
     */
    get name() {
        return this.data[1];
    }
    set name(v) {
        this.setterImpl(1, v, 'name');
    }
    /**
     *  The role of this right group.
     *
     * @type {SchedulingApiRightGroupRole}
     */
    get role() {
        return this.data[2];
    }
    set role(v) {
        this.setterImpl(2, v, 'role');
    }
    /**
     *  Can this member read and write booking system settings? For role == "CLIENT_OWNER" this value be always "true".
     *
     * @type {boolean}
     */
    get canReadAndWriteBookingSystemSettings() {
        return this.data[3];
    }
    set canReadAndWriteBookingSystemSettings(v) {
        this.setterImpl(3, v, 'canReadAndWriteBookingSystemSettings');
    }
    /**
     *  Additional shift-model rights. Only send for right group of requester or when owner and data="rights".
     */
    get shiftModelRights() {
        return this.shiftModelRightsWrapper;
    }
    set shiftModelRightsTestSetter(v) {
        this.setterImpl(4, v.rawData, 'shiftModelRights', () => { this.shiftModelRightsWrapper = v; });
    }
    _fixIds(_idReplacements) {
        this.shiftModelRightsWrapper._fixIds(_idReplacements);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 5);
            data[3] = false;
            if (data[4] === null)
                data[4] = Meta.createNewList();
        }
        // propagate new raw data to children
        this.shiftModelRightsWrapper._updateRawData(data ? data[4] : null, generateMissingData);
    }
    get dni() {
        return '362';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '362', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export var SchedulingApiRightGroupRole;
(function (SchedulingApiRightGroupRole) {
    SchedulingApiRightGroupRole[SchedulingApiRightGroupRole["CLIENT_DEFAULT"] = 1] = "CLIENT_DEFAULT";
    SchedulingApiRightGroupRole[SchedulingApiRightGroupRole["CLIENT_OWNER"] = 2] = "CLIENT_OWNER";
})(SchedulingApiRightGroupRole || (SchedulingApiRightGroupRole = {}));
export class SchedulingApiRightGroupShiftModelRightsBase extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'shiftModelRights');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'shiftModelRights',
            id: 'RIGHT_GROUP_SHIFT_MODEL_RIGHTS',
            primitiveType: PApiPrimitiveTypes.ApiList,
            show: function () {
                console.error('AttributeInfo for /scheduling -> RIGHT_GROUP_SHIFT_MODEL_RIGHTS is not implemented yet. Please create a Jira issue in the current Sprint: https://drplano.atlassian.net/secure/CreateIssueDetails!init.jspa?pid=10003&issuetype=10101&summary=' + encodeURI('AttributeInfo for /scheduling -> RIGHT_GROUP_SHIFT_MODEL_RIGHTS is not implemented yet') + '&assignee=557058%3Ae58fd015-3e1d-44b8-9131-aef274b1c571');
                return true;
            },
        });
    }
    wrapItem(item, _generateMissingData) {
        const newWrapper = new SchedulingApiRightGroupShiftModelRight(this.api);
        newWrapper._updateRawData(item, _generateMissingData);
        return newWrapper;
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return false;
    }
    createInstance(removeDestroyedItems) {
        return new SchedulingApiRightGroupShiftModelRights(this.api, removeDestroyedItems);
    }
    get dni() {
        return '366';
    }
    createNewItem(id = null) {
        const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('shiftModelRights');
        return newItem;
    }
}
export class SchedulingApiRightGroupShiftModelRight extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiRightGroupShiftModelRight);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'rightGroupShiftModelRight',
            id: 'RIGHT_GROUP_SHIFT_MODEL_RIGHT',
        });
        this.attributeInfoCanRead = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'canRead',
            id: 'RIGHT_GROUP_SHIFT_MODEL_RIGHT_CAN_READ',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoCanWrite = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'canWrite',
            id: 'RIGHT_GROUP_SHIFT_MODEL_RIGHT_CAN_WRITE',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoCanWriteBookings = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'canWriteBookings',
            id: 'RIGHT_GROUP_SHIFT_MODEL_RIGHT_CAN_WRITE_BOOKINGS',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoCanOnlineRefund = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'canOnlineRefund',
            id: 'RIGHT_GROUP_SHIFT_MODEL_RIGHT_CAN_ONLINE_REFUND',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoCanGetManagerNotifications = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'canGetManagerNotifications',
            id: 'RIGHT_GROUP_SHIFT_MODEL_RIGHT_CAN_GET_MANAGER_NOTIFICATIONS',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoShiftModelId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'shiftModelId',
            id: 'RIGHT_GROUP_SHIFT_MODEL_RIGHT_SHIFT_MODEL_ID',
            primitiveType: PApiPrimitiveTypes.Id,
        });
        this.attributeInfoShiftModelParentName = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'shiftModelParentName',
            id: 'RIGHT_GROUP_SHIFT_MODEL_RIGHT_SHIFT_MODEL_PARENT_NAME',
            primitiveType: PApiPrimitiveTypes.string,
        });
        this.shiftModelIdWrapper = null;
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  Granting read right to member? If no shiftModelRight-item is send then for owner this values is assumed to be "true". For default member "true" if he is assignable otherwise "false".
     *
     * @type {boolean}
     */
    get canRead() {
        return this.data[1];
    }
    set canRead(v) {
        this.setterImpl(1, v, 'canRead');
    }
    /**
     *  Granting write right to member? If no shiftModelRight-item is send then for owner this values is assumed to be "true" and for default member "false".
     *
     * @type {boolean}
     */
    get canWrite() {
        return this.data[2];
    }
    set canWrite(v) {
        this.setterImpl(2, v, 'canWrite');
    }
    /**
     *  Granting bookings write right to member? If no shiftModelRight-item is send then for owner this values is assumed to be "true" and for default member "false".
     *
     * @type {boolean}
     */
    get canWriteBookings() {
        return this.data[3];
    }
    set canWriteBookings(v) {
        this.setterImpl(3, v, 'canWriteBookings');
    }
    /**
     *  Granting online-refund right to member? If no shiftModelRight-item is send then for owner this values is assumed to be "true" and for default member "false".
     *
     * @type {boolean}
     */
    get canOnlineRefund() {
        return this.data[4];
    }
    set canOnlineRefund(v) {
        this.setterImpl(4, v, 'canOnlineRefund');
    }
    /**
     *  This member should get manager notifications? If no shiftModelRight-item is send then for owner this values is assumed to be "true" and for default member "false".
     *
     * @type {boolean}
     */
    get canGetManagerNotifications() {
        return this.data[5];
    }
    set canGetManagerNotifications(v) {
        this.setterImpl(5, v, 'canGetManagerNotifications');
    }
    /**
     *  The id of the shift-model for which this item describes rights. Can be undefined in which case "shiftModelParentName" has to be defined.
     *
     * @type {Id}
     */
    get shiftModelId() {
        return this.shiftModelIdWrapper;
    }
    set shiftModelId(v) {
        this.setterImpl(6, v, 'shiftModelId', () => { this.shiftModelIdWrapper = v; });
    }
    /**
     *  Parent name of shift-models for which this items describes rights. Can be undefined in which case "shiftModelId" has to be defined.
     *
     * @type {string}
     */
    get shiftModelParentName() {
        return this.data[7];
    }
    set shiftModelParentName(v) {
        this.setterImpl(7, v, 'shiftModelParentName');
    }
    _fixIds(_idReplacements) {
        this.data[6] = Meta.getReplacedId(this.data[6], _idReplacements);
        this.shiftModelIdWrapper = Id.create(this.data[6]);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 8);
            data[1] = false;
            data[2] = false;
            data[3] = false;
            data[4] = false;
            data[5] = false;
        }
        // propagate new raw data to children
        if (!Meta.isSameId(data ? data[6] : null, this.shiftModelIdWrapper))
            this.shiftModelIdWrapper = data && data[6] ? Id.create(data[6]) : null;
    }
    get dni() {
        return '367';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '367', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class SchedulingApiAccountingPeriodsBase extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'accountingPeriods');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'accountingPeriods',
            id: 'ACCOUNTING_PERIODS',
            primitiveType: PApiPrimitiveTypes.ApiList,
            show: function () {
                console.error('AttributeInfo for /scheduling -> ACCOUNTING_PERIODS is not implemented yet. Please create a Jira issue in the current Sprint: https://drplano.atlassian.net/secure/CreateIssueDetails!init.jspa?pid=10003&issuetype=10101&summary=' + encodeURI('AttributeInfo for /scheduling -> ACCOUNTING_PERIODS is not implemented yet') + '&assignee=557058%3Ae58fd015-3e1d-44b8-9131-aef274b1c571');
                return true;
            },
            canEdit: () => false,
            readMode: () => true,
        });
    }
    wrapItem(item, _generateMissingData) {
        const newWrapper = new SchedulingApiAccountingPeriod(this.api);
        newWrapper._updateRawData(item, _generateMissingData);
        return newWrapper;
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return false;
    }
    createInstance(removeDestroyedItems) {
        return new SchedulingApiAccountingPeriods(this.api, removeDestroyedItems);
    }
    get dni() {
        return '17';
    }
    createNewItem(id = null) {
        const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('accountingPeriods');
        return newItem;
    }
}
export class SchedulingApiAccountingPeriodBase extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiAccountingPeriod);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'accountingPeriod',
            id: 'ACCOUNTING_PERIOD',
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoStart = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'start',
            id: 'ACCOUNTING_PERIOD_START',
            primitiveType: PApiPrimitiveTypes.Date,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoEnd = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'end',
            id: 'ACCOUNTING_PERIOD_END',
            primitiveType: PApiPrimitiveTypes.DateExclusiveEnd,
            canEdit: () => false,
            readMode: () => true,
        });
        this.expectedMemberDataWrapper = new SchedulingApiAccountingPeriodExpectedMemberData(this.api, false);
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
        this.expectedMemberDataWrapper.parent = this;
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  Start of the accounting period (inclusive).
     *
     * @type {Date}
     */
    get start() {
        return this.data[1];
    }
    set startTestSetter(v) {
        this.setterImpl(1, v, 'start');
    }
    /**
     *  End of the accounting period (exclusive).
     *
     * @type {DateExclusiveEnd}
     */
    get end() {
        return this.data[2];
    }
    set endTestSetter(v) {
        this.setterImpl(2, v, 'end');
    }
    /**
     *  A list of expected member data. An item of this list has the same id as a member to whom that item belongs. Note, that this list only contains members for whom the requester has permission to read earnings.
     */
    get expectedMemberData() {
        return this.expectedMemberDataWrapper;
    }
    set expectedMemberDataTestSetter(v) {
        this.setterImpl(3, v.rawData, 'expectedMemberData', () => { this.expectedMemberDataWrapper = v; });
    }
    _fixIds(_idReplacements) {
        this.expectedMemberDataWrapper._fixIds(_idReplacements);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 4);
            if (data[3] === null)
                data[3] = Meta.createNewList();
        }
        // propagate new raw data to children
        this.expectedMemberDataWrapper._updateRawData(data ? data[3] : null, generateMissingData);
    }
    get dni() {
        return '375';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '375', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class SchedulingApiAccountingPeriodExpectedMemberDataBase extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'expectedMemberData');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'expectedMemberData',
            id: 'ACCOUNTING_PERIOD_EXPECTED_MEMBER_DATA',
            primitiveType: PApiPrimitiveTypes.ApiList,
            canEdit: () => false,
            readMode: () => true,
        });
    }
    wrapItem(item, _generateMissingData) {
        const newWrapper = new SchedulingApiAccountingPeriodExpectedMemberDataItem(this.api);
        newWrapper._updateRawData(item, _generateMissingData);
        return newWrapper;
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return false;
    }
    createInstance(removeDestroyedItems) {
        return new SchedulingApiAccountingPeriodExpectedMemberData(this.api, removeDestroyedItems);
    }
    get dni() {
        return '378';
    }
    createNewItem(id = null) {
        const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('expectedMemberData');
        return newItem;
    }
}
export class SchedulingApiAccountingPeriodExpectedMemberDataItem extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiAccountingPeriodExpectedMemberDataItem);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'accountingPeriodExpectedMemberDataItem',
            id: 'ACCOUNTING_PERIOD_EXPECTED_MEMBER_DATA_ITEM',
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoEarnings = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'earnings',
            id: 'ACCOUNTING_PERIOD_EXPECTED_MEMBER_DATA_ITEM_EARNINGS',
            primitiveType: PApiPrimitiveTypes.Currency,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoWorkingHours = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'workingHours',
            id: 'ACCOUNTING_PERIOD_EXPECTED_MEMBER_DATA_ITEM_WORKING_HOURS',
            primitiveType: PApiPrimitiveTypes.Hours,
            canEdit: () => false,
            readMode: () => true,
        });
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  The expected earnings of the member.
     *
     * @type {Currency}
     */
    get earnings() {
        return this.data[1];
    }
    set earningsTestSetter(v) {
        this.setterImpl(1, v, 'earnings');
    }
    /**
     *  The expected working hours of the member.
     *
     * @type {Hours}
     */
    get workingHours() {
        return this.data[2];
    }
    set workingHoursTestSetter(v) {
        this.setterImpl(2, v, 'workingHours');
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 3);
        }
        // propagate new raw data to children
    }
    get dni() {
        return '379';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '379', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class SchedulingApiMemosBase extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'memos');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'memos',
            id: 'MEMOS',
            primitiveType: PApiPrimitiveTypes.ApiList,
            canEdit: function () {
                if (!((this.api.rightsService.hasManagerRights))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
        });
    }
    wrapItem(item, _generateMissingData) {
        const newWrapper = new SchedulingApiMemo(this.api);
        newWrapper._updateRawData(item, _generateMissingData);
        return newWrapper;
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return false;
    }
    createInstance(removeDestroyedItems) {
        return new SchedulingApiMemos(this.api, removeDestroyedItems);
    }
    get dni() {
        return '18';
    }
    createNewItem(id = null) {
        const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('memos');
        return newItem;
    }
}
export class SchedulingApiMemo extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiMemo);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'memo',
            id: 'MEMO',
        });
        this.attributeInfoMessage = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'message',
            id: 'MEMO_MESSAGE',
            primitiveType: PApiPrimitiveTypes.string,
        });
        this.attributeInfoStart = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'start',
            id: 'MEMO_START',
            primitiveType: PApiPrimitiveTypes.Date,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(() => this.end, true, PApiPrimitiveTypes.Date, 'MEMO_END', undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoEnd = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'end',
            id: 'MEMO_END',
            primitiveType: PApiPrimitiveTypes.DateExclusiveEnd,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(() => this.start, true, PApiPrimitiveTypes.DateExclusiveEnd, 'MEMO_START', undefined);
                        return null;
                    },
                ];
            },
        });
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  Message of the memo.
     *
     * @type {string}
     */
    get message() {
        return this.data[1];
    }
    set message(v) {
        this.setterImpl(1, v, 'message');
    }
    /**
     *  Start time of memo (inclusive).
     *
     * @type {Date}
     */
    get start() {
        return this.data[2];
    }
    set start(v) {
        this.setterImpl(2, v, 'start');
    }
    /**
     *  End time of memo (exclusive).
     *
     * @type {DateExclusiveEnd}
     */
    get end() {
        return this.data[3];
    }
    set end(v) {
        this.setterImpl(3, v, 'end');
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 4);
        }
        // propagate new raw data to children
    }
    get dni() {
        return '382';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '382', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class SchedulingApiTodaysShiftDescriptionsBase extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'todaysShiftDescriptions');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'todaysShiftDescriptions',
            id: 'TODAYS_SHIFT_DESCRIPTIONS',
            primitiveType: PApiPrimitiveTypes.ApiList,
            show: function () {
                console.error('AttributeInfo for /scheduling -> TODAYS_SHIFT_DESCRIPTIONS is not implemented yet. Please create a Jira issue in the current Sprint: https://drplano.atlassian.net/secure/CreateIssueDetails!init.jspa?pid=10003&issuetype=10101&summary=' + encodeURI('AttributeInfo for /scheduling -> TODAYS_SHIFT_DESCRIPTIONS is not implemented yet') + '&assignee=557058%3Ae58fd015-3e1d-44b8-9131-aef274b1c571');
                return true;
            },
        });
    }
    wrapItem(item, _generateMissingData) {
        const newWrapper = new SchedulingApiTodaysShiftDescription(this.api);
        newWrapper._updateRawData(item, _generateMissingData);
        return newWrapper;
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return false;
    }
    createInstance(removeDestroyedItems) {
        return new SchedulingApiTodaysShiftDescriptions(this.api, removeDestroyedItems);
    }
    get dni() {
        return '19';
    }
    createNewItem(id = null) {
        const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('todaysShiftDescriptions');
        return newItem;
    }
}
export class SchedulingApiTodaysShiftDescriptionBase extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiTodaysShiftDescription);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'todaysShiftDescription',
            id: 'TODAYS_SHIFT_DESCRIPTION',
        });
        this.attributeInfoDescription = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'description',
            id: 'TODAYS_SHIFT_DESCRIPTION_DESCRIPTION',
            primitiveType: PApiPrimitiveTypes.string,
        });
        this.attributeInfoShiftStart = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'shiftStart',
            id: 'TODAYS_SHIFT_DESCRIPTION_SHIFT_START',
            primitiveType: PApiPrimitiveTypes.DateTime,
        });
        this.attributeInfoShiftEnd = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'shiftEnd',
            id: 'TODAYS_SHIFT_DESCRIPTION_SHIFT_END',
            primitiveType: PApiPrimitiveTypes.DateTime,
        });
        this.assignedMemberIdsWrapper = new SchedulingApiTodaysShiftDescriptionAssignedMemberIds(this.api, false);
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
        this.assignedMemberIdsWrapper.parent = this;
    }
    get id() {
        return this._id !== null ? this._id : ShiftId.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  Description of the shift.
     *
     * @type {string}
     */
    get description() {
        return this.data[1];
    }
    set description(v) {
        this.setterImpl(1, v, 'description');
    }
    /**
     *  Start of shift.
     *
     * @type {DateTime}
     */
    get shiftStart() {
        return this.data[2];
    }
    set shiftStart(v) {
        this.setterImpl(2, v, 'shiftStart');
    }
    /**
     *  End of shift.
     *
     * @type {DateTime}
     */
    get shiftEnd() {
        return this.data[3];
    }
    set shiftEnd(v) {
        this.setterImpl(3, v, 'shiftEnd');
    }
    /**
     *  A list of the assigned members' ids.
     */
    get assignedMemberIds() {
        return this.assignedMemberIdsWrapper;
    }
    set assignedMemberIdsTestSetter(v) {
        this.setterImpl(4, v.rawData, 'assignedMemberIds', () => { this.assignedMemberIdsWrapper = v; });
    }
    _fixIds(_idReplacements) {
        this.assignedMemberIdsWrapper._fixIds(_idReplacements);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : ShiftId.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 5);
            if (data[4] === null)
                data[4] = Meta.createNewList();
        }
        // propagate new raw data to children
        this.assignedMemberIdsWrapper._updateRawData(data ? data[4] : null, generateMissingData);
    }
    get dni() {
        return '386';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '386', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class SchedulingApiTodaysShiftDescriptionAssignedMemberIds extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'assignedMemberIds');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'assignedMemberIds',
            id: 'TODAYS_SHIFT_DESCRIPTION_ASSIGNED_MEMBER_IDS',
            primitiveType: PApiPrimitiveTypes.ApiList,
        });
        this.attributeInfoTodaysShiftDescriptionAssignedMemberId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'todaysShiftDescriptionAssignedMemberId',
            id: 'TODAYS_SHIFT_DESCRIPTION_ASSIGNED_MEMBER_ID',
            primitiveType: PApiPrimitiveTypes.Id,
        });
    }
    wrapItem(item, _generateMissingData) {
        return Id.create(item);
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return true;
    }
    createInstance(removeDestroyedItems) {
        return new SchedulingApiTodaysShiftDescriptionAssignedMemberIds(this.api, removeDestroyedItems);
    }
    get dni() {
        return '390';
    }
    createNewItem() {
        const newItemRaw = null;
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('assignedMemberIds');
        return newItem;
    }
}
export class SchedulingApiHolidaysBase extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'holidays');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'holidays',
            id: 'HOLIDAYS',
            primitiveType: PApiPrimitiveTypes.ApiList,
            show: function () {
                console.error('AttributeInfo for /scheduling -> HOLIDAYS is not implemented yet. Please create a Jira issue in the current Sprint: https://drplano.atlassian.net/secure/CreateIssueDetails!init.jspa?pid=10003&issuetype=10101&summary=' + encodeURI('AttributeInfo for /scheduling -> HOLIDAYS is not implemented yet') + '&assignee=557058%3Ae58fd015-3e1d-44b8-9131-aef274b1c571');
                return true;
            },
            canEdit: () => false,
            readMode: () => true,
        });
    }
    wrapItem(item, _generateMissingData) {
        const newWrapper = new SchedulingApiHoliday(this.api);
        newWrapper._updateRawData(item, _generateMissingData);
        return newWrapper;
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return false;
    }
    createInstance(removeDestroyedItems) {
        return new SchedulingApiHolidays(this.api, removeDestroyedItems);
    }
    get dni() {
        return '20';
    }
    createNewItem(id = null) {
        const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('holidays');
        return newItem;
    }
}
export class SchedulingApiHolidayBase extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiHoliday);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'holiday',
            id: 'HOLIDAY',
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoType = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'type',
            id: 'HOLIDAY_TYPE',
            primitiveType: PApiPrimitiveTypes.Enum,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoName = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'name',
            id: 'HOLIDAY_NAME',
            primitiveType: PApiPrimitiveTypes.string,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoFederalState = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'federalState',
            id: 'HOLIDAY_FEDERAL_STATE',
            primitiveType: PApiPrimitiveTypes.string,
            canEdit: () => false,
            readMode: () => true,
        });
        this.timeWrapper = new SchedulingApiHolidayTime(this.api);
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
        this.timeWrapper.parent = this;
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  Time of holiday.
     */
    get time() {
        return this.timeWrapper;
    }
    set timeTestSetter(v) {
        this.setterImpl(1, v.rawData, 'time', () => { this.timeWrapper = v; });
    }
    /**
     *  Type of the holiday.
     *
     * @type {SchedulingApiHolidayType}
     */
    get type() {
        return this.data[2];
    }
    set typeTestSetter(v) {
        this.setterImpl(2, v, 'type');
    }
    /**
     *  Name of holiday.
     *
     * @type {string}
     */
    get name() {
        return this.data[3];
    }
    set nameTestSetter(v) {
        this.setterImpl(3, v, 'name');
    }
    /**
     *  This is an empty string if this holiday is valid in whole Germany. Otherwise it contains the federal state to which it is associated. Possible values are "Baden-Württemberg", "Bayern", "Brandenburg", "Bremen", "Hamburg", "Hessen", "Mecklenburg-Vorpommern", "Niedersachsen", "Nordrhein-Westfalen", "Rheinland-Pfalz", "Saarland", "Sachsen", "Sachsen-Anhalt", "Schleswig-Holstein" and "Thüringen".
     *
     * @type {string}
     */
    get federalState() {
        return this.data[4];
    }
    set federalStateTestSetter(v) {
        this.setterImpl(4, v, 'federalState');
    }
    _fixIds(_idReplacements) {
        this.timeWrapper._fixIds(_idReplacements);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 5);
            if (data[1] === null)
                data[1] = Meta.createNewObject(true);
        }
        // propagate new raw data to children
        this.timeWrapper._updateRawData(data ? data[1] : null, generateMissingData);
    }
    get dni() {
        return '392';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '392', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class SchedulingApiHolidayTime extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiHolidayTime);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'time',
            id: 'HOLIDAY_TIME',
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoStart = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'start',
            id: 'HOLIDAY_TIME_START',
            primitiveType: PApiPrimitiveTypes.Date,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoEnd = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'end',
            id: 'HOLIDAY_TIME_END',
            primitiveType: PApiPrimitiveTypes.DateExclusiveEnd,
            canEdit: () => false,
            readMode: () => true,
        });
        this._updateRawData(Meta.createNewObject(true, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  Start time of holiday (inclusive).
     *
     * @type {Date}
     */
    get start() {
        return this.data[1];
    }
    set startTestSetter(v) {
        this.setterImpl(1, v, 'start');
    }
    /**
     *  End time of holiday (exclusive).
     *
     * @type {DateExclusiveEnd}
     */
    get end() {
        return this.data[2];
    }
    set endTestSetter(v) {
        this.setterImpl(2, v, 'end');
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 3);
        }
        // propagate new raw data to children
    }
    get dni() {
        return '393';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '393', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export var SchedulingApiHolidayType;
(function (SchedulingApiHolidayType) {
    SchedulingApiHolidayType[SchedulingApiHolidayType["SCHOOL_HOLIDAYS"] = 1] = "SCHOOL_HOLIDAYS";
    SchedulingApiHolidayType[SchedulingApiHolidayType["NATIONAL_HOLIDAY"] = 2] = "NATIONAL_HOLIDAY";
    SchedulingApiHolidayType[SchedulingApiHolidayType["FESTIVE_DAY"] = 3] = "FESTIVE_DAY";
})(SchedulingApiHolidayType || (SchedulingApiHolidayType = {}));
export class SchedulingApiPossibleTaxes extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'possibleTaxes');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'possibleTaxes',
            id: 'POSSIBLE_TAXES',
            primitiveType: PApiPrimitiveTypes.ApiList,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoPossibleTax = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'possibleTax',
            id: 'POSSIBLE_TAX',
            primitiveType: PApiPrimitiveTypes.number,
            canEdit: () => false,
            readMode: () => true,
        });
    }
    wrapItem(item, _generateMissingData) {
        return item;
    }
    containsPrimitives() {
        return true;
    }
    containsIds() {
        return false;
    }
    createInstance(removeDestroyedItems) {
        return new SchedulingApiPossibleTaxes(this.api, removeDestroyedItems);
    }
    get dni() {
        return '21';
    }
    createNewItem() {
        const newItemRaw = null;
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('possibleTaxes');
        return newItem;
    }
}
export class SchedulingApiSchedulePreferences extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiSchedulePreferences);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'schedulePreferences',
            id: 'SCHEDULE_PREFERENCES',
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoDesiredShiftDist = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'desiredShiftDist',
            id: 'SCHEDULE_PREFERENCES_DESIRED_SHIFT_DIST',
            primitiveType: PApiPrimitiveTypes.Duration,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoFatalShiftDist = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'fatalShiftDist',
            id: 'SCHEDULE_PREFERENCES_FATAL_SHIFT_DIST',
            primitiveType: PApiPrimitiveTypes.Duration,
            canEdit: () => false,
            readMode: () => true,
        });
        this.prioritiesWrapper = new SchedulingApiSchedulePreferencesPriorities(this.api);
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
        this.prioritiesWrapper.parent = this;
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  The priorities for each criteria.
     */
    get priorities() {
        return this.prioritiesWrapper;
    }
    set prioritiesTestSetter(v) {
        this.setterImpl(1, v.rawData, 'priorities', () => { this.prioritiesWrapper = v; });
    }
    /**
     *  Fatal shift distance in milliseconds.
     *
     * @type {Duration}
     */
    get desiredShiftDist() {
        return this.data[2];
    }
    set desiredShiftDistTestSetter(v) {
        this.setterImpl(2, v, 'desiredShiftDist');
    }
    /**
     *  Desired shift distance in milliseconds.
     *
     * @type {Duration}
     */
    get fatalShiftDist() {
        return this.data[3];
    }
    set fatalShiftDistTestSetter(v) {
        this.setterImpl(3, v, 'fatalShiftDist');
    }
    _fixIds(_idReplacements) {
        this.prioritiesWrapper._fixIds(_idReplacements);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 4);
            if (data[1] === null)
                data[1] = Meta.createNewObject(false);
        }
        // propagate new raw data to children
        this.prioritiesWrapper._updateRawData(data ? data[1] : null, generateMissingData);
    }
    get dni() {
        return '22';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '22', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class SchedulingApiSchedulePreferencesPriorities extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiSchedulePreferencesPriorities);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'priorities',
            id: 'SCHEDULE_PREFERENCES_PRIORITIES',
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoShiftPref = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'shiftPref',
            id: 'SCHEDULE_PREFERENCES_PRIORITIES_SHIFT_PREF',
            primitiveType: PApiPrimitiveTypes.number,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoDesiredEarnings = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'desiredEarnings',
            id: 'SCHEDULE_PREFERENCES_PRIORITIES_DESIRED_EARNINGS',
            primitiveType: PApiPrimitiveTypes.number,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoShiftsTooClose = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'shiftsTooClose',
            id: 'SCHEDULE_PREFERENCES_PRIORITIES_SHIFTS_TOO_CLOSE',
            primitiveType: PApiPrimitiveTypes.number,
            canEdit: () => false,
            readMode: () => true,
        });
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  Range: [0,3]. Priority of the shift preference constrain hit.
     *
     * @type {number}
     */
    get shiftPref() {
        return this.data[1];
    }
    set shiftPrefTestSetter(v) {
        this.setterImpl(1, v, 'shiftPref');
    }
    /**
     *  Range: [0,3]. Priority of the desired earnings constrain hit.
     *
     * @type {number}
     */
    get desiredEarnings() {
        return this.data[2];
    }
    set desiredEarningsTestSetter(v) {
        this.setterImpl(2, v, 'desiredEarnings');
    }
    /**
     *  Range: [0,3]. Priority of the shifts too close constrain hit.
     *
     * @type {number}
     */
    get shiftsTooClose() {
        return this.data[3];
    }
    set shiftsTooCloseTestSetter(v) {
        this.setterImpl(3, v, 'shiftsTooClose');
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 4);
        }
        // propagate new raw data to children
    }
    get dni() {
        return '400';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '400', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class SchedulingApiCustomBookableMailsBase extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'customBookableMails');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'customBookableMails',
            id: 'CUSTOM_BOOKABLE_MAILS',
            primitiveType: PApiPrimitiveTypes.ApiList,
            canEdit: function () {
                if (!(((this.api.rightsService.canReadAndWriteBookingSystemSettings)))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.canReadAndWriteBookingSystemSettings)))) {
                    return true;
                }
                return false;
            },
        });
    }
    wrapItem(item, _generateMissingData) {
        const newWrapper = new SchedulingApiCustomBookableMail(this.api);
        newWrapper._updateRawData(item, _generateMissingData);
        return newWrapper;
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return false;
    }
    createInstance(removeDestroyedItems) {
        return new SchedulingApiCustomBookableMails(this.api, removeDestroyedItems);
    }
    get dni() {
        return '23';
    }
    createNewItem(id = null) {
        const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('customBookableMails');
        return newItem;
    }
}
export class SchedulingApiCustomBookableMail extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiCustomBookableMail);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'customBookableMail',
            id: 'CUSTOM_BOOKABLE_MAIL',
        });
        this.attributeInfoName = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'name',
            id: 'CUSTOM_BOOKABLE_MAIL_NAME',
            primitiveType: PApiPrimitiveTypes.string,
        });
        this.attributeInfoEventType = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'eventType',
            id: 'CUSTOM_BOOKABLE_MAIL_EVENT_TYPE',
            primitiveType: PApiPrimitiveTypes.Enum,
        });
        this.attributeInfoSendToBookingPerson = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'sendToBookingPerson',
            id: 'CUSTOM_BOOKABLE_MAIL_SEND_TO_BOOKING_PERSON',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoSendToParticipants = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'sendToParticipants',
            id: 'CUSTOM_BOOKABLE_MAIL_SEND_TO_PARTICIPANTS',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoSubjectTemplate = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'subjectTemplate',
            id: 'CUSTOM_BOOKABLE_MAIL_SUBJECT_TEMPLATE',
            primitiveType: PApiPrimitiveTypes.string,
        });
        this.attributeInfoTextTemplate = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'textTemplate',
            id: 'CUSTOM_BOOKABLE_MAIL_TEXT_TEMPLATE',
            primitiveType: PApiPrimitiveTypes.string,
        });
        this.attributeInfoReplyTo = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'replyTo',
            id: 'CUSTOM_BOOKABLE_MAIL_REPLY_TO',
            primitiveType: PApiPrimitiveTypes.Email,
        });
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  Template name.
     *
     * @type {string}
     */
    get name() {
        return this.data[1];
    }
    set name(v) {
        this.setterImpl(1, v, 'name');
    }
    /**
     *  Event-type for which this email should be used.
     *
     * @type {SchedulingApiCustomBookableMailEventType}
     */
    get eventType() {
        return this.data[2];
    }
    set eventType(v) {
        this.setterImpl(2, v, 'eventType');
    }
    /**
     *  Should this mail be send to the booking person?
     *
     * @type {boolean}
     */
    get sendToBookingPerson() {
        return this.data[3];
    }
    set sendToBookingPerson(v) {
        this.setterImpl(3, v, 'sendToBookingPerson');
    }
    /**
     *  Should this mail be send to participants of the bookings? Note that for bookings where no individual participant information are available backend will fallback to send mail to the booking person when this is true.
     *
     * @type {boolean}
     */
    get sendToParticipants() {
        return this.data[4];
    }
    set sendToParticipants(v) {
        this.setterImpl(4, v, 'sendToParticipants');
    }
    /**
     * (Detail)  Template for email's subject.
     *
     * @type {string}
     */
    get subjectTemplate() {
        return this.data[5];
    }
    set subjectTemplate(v) {
        this.setterImpl(5, v, 'subjectTemplate');
    }
    /**
     * (Detail)  Template for email's text. It is assumed that line-breaks are represented by the exact string "<br>".
     *
     * @type {string}
     */
    get textTemplate() {
        return this.data[6];
    }
    set textTemplate(v) {
        this.setterImpl(6, v, 'textTemplate');
    }
    /**
     * (Detail)  Email address being set as reply-to field when sending this email.
     *
     * @type {Email}
     */
    get replyTo() {
        return this.data[7];
    }
    set replyTo(v) {
        this.setterImpl(7, v, 'replyTo');
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 8);
            data[3] = false;
            data[4] = false;
        }
        // propagate new raw data to children
    }
    get dni() {
        return '458';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '458', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export var SchedulingApiCustomBookableMailEventType;
(function (SchedulingApiCustomBookableMailEventType) {
    SchedulingApiCustomBookableMailEventType[SchedulingApiCustomBookableMailEventType["INQUIRY_ARRIVAL_NOTICE"] = 1] = "INQUIRY_ARRIVAL_NOTICE";
    SchedulingApiCustomBookableMailEventType[SchedulingApiCustomBookableMailEventType["INQUIRY_DECLINED"] = 2] = "INQUIRY_DECLINED";
    SchedulingApiCustomBookableMailEventType[SchedulingApiCustomBookableMailEventType["BOOKED"] = 3] = "BOOKED";
    SchedulingApiCustomBookableMailEventType[SchedulingApiCustomBookableMailEventType["COURSE_REMINDER"] = 4] = "COURSE_REMINDER";
    SchedulingApiCustomBookableMailEventType[SchedulingApiCustomBookableMailEventType["BOOKING_CANCELED"] = 5] = "BOOKING_CANCELED";
    SchedulingApiCustomBookableMailEventType[SchedulingApiCustomBookableMailEventType["PARTICIPATED"] = 6] = "PARTICIPATED";
    SchedulingApiCustomBookableMailEventType[SchedulingApiCustomBookableMailEventType["PAYMENT_PARTIAL"] = 7] = "PAYMENT_PARTIAL";
    SchedulingApiCustomBookableMailEventType[SchedulingApiCustomBookableMailEventType["PAYMENT_COMPLETE"] = 8] = "PAYMENT_COMPLETE";
    SchedulingApiCustomBookableMailEventType[SchedulingApiCustomBookableMailEventType["ONLINE_PAYMENT_FAILED"] = 9] = "ONLINE_PAYMENT_FAILED";
    SchedulingApiCustomBookableMailEventType[SchedulingApiCustomBookableMailEventType["REFUNDED"] = 10] = "REFUNDED";
    SchedulingApiCustomBookableMailEventType[SchedulingApiCustomBookableMailEventType["REFUND_FAILED"] = 11] = "REFUND_FAILED";
    SchedulingApiCustomBookableMailEventType[SchedulingApiCustomBookableMailEventType["AMOUNT_TO_PAY_CHANGED"] = 12] = "AMOUNT_TO_PAY_CHANGED";
    SchedulingApiCustomBookableMailEventType[SchedulingApiCustomBookableMailEventType["DATE_CHANGED"] = 13] = "DATE_CHANGED";
    SchedulingApiCustomBookableMailEventType[SchedulingApiCustomBookableMailEventType["PAYMENT_METHOD_CHANGED"] = 14] = "PAYMENT_METHOD_CHANGED";
    SchedulingApiCustomBookableMailEventType[SchedulingApiCustomBookableMailEventType["VOUCHER_NEW_ITEM"] = 15] = "VOUCHER_NEW_ITEM";
})(SchedulingApiCustomBookableMailEventType || (SchedulingApiCustomBookableMailEventType = {}));
export class SchedulingApiNotificationSettings extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiNotificationSettings);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'notificationSettings',
            id: 'NOTIFICATION_SETTINGS',
        });
        this.pushTokensWrapper = new SchedulingApiNotificationSettingsPushTokens(this.api, false);
        this.settingsForDeviceTypesWrapper = new SchedulingApiNotificationSettingsSettingsForDeviceTypes(this.api, false);
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
        this.pushTokensWrapper.parent = this;
        this.settingsForDeviceTypesWrapper.parent = this;
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  A list of the push-tokens registered for this user. This list is read-only. To modify this user's push-tokens use the "/push_token" api.
     */
    get pushTokens() {
        return this.pushTokensWrapper;
    }
    set pushTokensTestSetter(v) {
        this.setterImpl(1, v.rawData, 'pushTokens', () => { this.pushTokensWrapper = v; });
    }
    /**
     *  A list of settings for each available device type. Send when data="notificationSettings".
     */
    get settingsForDeviceTypes() {
        return this.settingsForDeviceTypesWrapper;
    }
    set settingsForDeviceTypesTestSetter(v) {
        this.setterImpl(2, v.rawData, 'settingsForDeviceTypes', () => { this.settingsForDeviceTypesWrapper = v; });
    }
    _fixIds(_idReplacements) {
        this.pushTokensWrapper._fixIds(_idReplacements);
        this.settingsForDeviceTypesWrapper._fixIds(_idReplacements);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 3);
            if (data[1] === null)
                data[1] = Meta.createNewList();
            if (data[2] === null)
                data[2] = Meta.createNewList();
        }
        // propagate new raw data to children
        this.pushTokensWrapper._updateRawData(data ? data[1] : null, generateMissingData);
        this.settingsForDeviceTypesWrapper._updateRawData(data ? data[2] : null, generateMissingData);
    }
    get dni() {
        return '24';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '24', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class SchedulingApiNotificationSettingsPushTokens extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'pushTokens');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'pushTokens',
            id: 'NOTIFICATION_SETTINGS_PUSH_TOKENS',
            primitiveType: PApiPrimitiveTypes.ApiList,
        });
    }
    wrapItem(item, _generateMissingData) {
        const newWrapper = new SchedulingApiNotificationSettingsPushToken(this.api);
        newWrapper._updateRawData(item, _generateMissingData);
        return newWrapper;
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return false;
    }
    createInstance(removeDestroyedItems) {
        return new SchedulingApiNotificationSettingsPushTokens(this.api, removeDestroyedItems);
    }
    get dni() {
        return '466';
    }
    createNewItem(id = null) {
        const newItemRaw = Meta.createNewObject(true, !!id ? id.rawData : null);
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('pushTokens');
        return newItem;
    }
}
export class SchedulingApiNotificationSettingsPushToken extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiNotificationSettingsPushToken);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'notificationSettingsPushToken',
            id: 'NOTIFICATION_SETTINGS_PUSH_TOKEN',
        });
        this.attributeInfoToken = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'token',
            id: 'NOTIFICATION_SETTINGS_PUSH_TOKEN_TOKEN',
            primitiveType: PApiPrimitiveTypes.string,
        });
        this.attributeInfoType = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'type',
            id: 'NOTIFICATION_SETTINGS_PUSH_TOKEN_TYPE',
            primitiveType: PApiPrimitiveTypes.Enum,
        });
        this.attributeInfoAction = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'action',
            id: 'NOTIFICATION_SETTINGS_PUSH_TOKEN_ACTION',
            primitiveType: PApiPrimitiveTypes.Enum,
        });
        this._updateRawData(Meta.createNewObject(true, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  The token.
     *
     * @type {string}
     */
    get token() {
        return this.data[1];
    }
    set token(v) {
        this.setterImpl(1, v, 'token');
    }
    set type(v) {
        this.setterImpl(2, v, 'type');
    }
    /**
     *  The action to be executed for this push-token.
     *
     * @type {SchedulingApiPushTokenAction}
     */
    get action() {
        return this.data[3];
    }
    set action(v) {
        this.setterImpl(3, v, 'action');
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 4);
        }
        // propagate new raw data to children
    }
    get dni() {
        return '468';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '468', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export var SchedulingApiPushTokenType;
(function (SchedulingApiPushTokenType) {
    SchedulingApiPushTokenType[SchedulingApiPushTokenType["WEB"] = 1] = "WEB";
    SchedulingApiPushTokenType[SchedulingApiPushTokenType["ANDROID"] = 2] = "ANDROID";
    SchedulingApiPushTokenType[SchedulingApiPushTokenType["IOS"] = 3] = "IOS";
})(SchedulingApiPushTokenType || (SchedulingApiPushTokenType = {}));
export var SchedulingApiPushTokenAction;
(function (SchedulingApiPushTokenAction) {
    SchedulingApiPushTokenAction[SchedulingApiPushTokenAction["CREATE"] = 1] = "CREATE";
    SchedulingApiPushTokenAction[SchedulingApiPushTokenAction["REMOVE"] = 2] = "REMOVE";
    SchedulingApiPushTokenAction[SchedulingApiPushTokenAction["ENABLE"] = 3] = "ENABLE";
    SchedulingApiPushTokenAction[SchedulingApiPushTokenAction["DISABLE"] = 4] = "DISABLE";
})(SchedulingApiPushTokenAction || (SchedulingApiPushTokenAction = {}));
export class SchedulingApiNotificationSettingsSettingsForDeviceTypes extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'settingsForDeviceTypes');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'settingsForDeviceTypes',
            id: 'NOTIFICATION_SETTINGS_SETTINGS_FOR_DEVICE_TYPES',
            primitiveType: PApiPrimitiveTypes.ApiList,
            show: function () {
                console.error('AttributeInfo for /scheduling -> NOTIFICATION_SETTINGS_SETTINGS_FOR_DEVICE_TYPES is not implemented yet. Please create a Jira issue in the current Sprint: https://drplano.atlassian.net/secure/CreateIssueDetails!init.jspa?pid=10003&issuetype=10101&summary=' + encodeURI('AttributeInfo for /scheduling -> NOTIFICATION_SETTINGS_SETTINGS_FOR_DEVICE_TYPES is not implemented yet') + '&assignee=557058%3Ae58fd015-3e1d-44b8-9131-aef274b1c571');
                return true;
            },
        });
    }
    wrapItem(item, _generateMissingData) {
        const newWrapper = new SchedulingApiNotificationSettingsSettingsForDeviceType(this.api);
        newWrapper._updateRawData(item, _generateMissingData);
        return newWrapper;
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return false;
    }
    createInstance(removeDestroyedItems) {
        return new SchedulingApiNotificationSettingsSettingsForDeviceTypes(this.api, removeDestroyedItems);
    }
    get dni() {
        return '467';
    }
    createNewItem(id = null) {
        const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('settingsForDeviceTypes');
        return newItem;
    }
}
export class SchedulingApiNotificationSettingsSettingsForDeviceType extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiNotificationSettingsSettingsForDeviceType);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'notificationSettingsSettingsForDeviceType',
            id: 'NOTIFICATION_SETTINGS_SETTINGS_FOR_DEVICE_TYPE',
            show: function () {
                console.error('AttributeInfo for /scheduling -> NOTIFICATION_SETTINGS_SETTINGS_FOR_DEVICE_TYPE is not implemented yet. Please create a Jira issue in the current Sprint: https://drplano.atlassian.net/secure/CreateIssueDetails!init.jspa?pid=10003&issuetype=10101&summary=' + encodeURI('AttributeInfo for /scheduling -> NOTIFICATION_SETTINGS_SETTINGS_FOR_DEVICE_TYPE is not implemented yet') + '&assignee=557058%3Ae58fd015-3e1d-44b8-9131-aef274b1c571');
                return true;
            },
        });
        this.attributeInfoDeviceType = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'deviceType',
            id: 'NOTIFICATION_SETTINGS_SETTINGS_FOR_DEVICE_TYPE_DEVICE_TYPE',
            primitiveType: PApiPrimitiveTypes.Enum,
            canEdit: () => false,
            readMode: () => true,
        });
        this.notificationGroupsWrapper = new SchedulingApiNotificationSettingsSettingsForDeviceTypeNotificationGroups(this.api, false);
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
        this.notificationGroupsWrapper.parent = this;
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  A list of all notification groups.
     */
    get notificationGroups() {
        return this.notificationGroupsWrapper;
    }
    set notificationGroupsTestSetter(v) {
        this.setterImpl(1, v.rawData, 'notificationGroups', () => { this.notificationGroupsWrapper = v; });
    }
    /**
     *  For which device type does this item define settings? Read-only.
     *
     * @type {SchedulingApiNotificationSettingsDeviceType}
     */
    get deviceType() {
        return this.data[2];
    }
    set deviceTypeTestSetter(v) {
        this.setterImpl(2, v, 'deviceType');
    }
    _fixIds(_idReplacements) {
        this.notificationGroupsWrapper._fixIds(_idReplacements);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 3);
            if (data[1] === null)
                data[1] = Meta.createNewList();
        }
        // propagate new raw data to children
        this.notificationGroupsWrapper._updateRawData(data ? data[1] : null, generateMissingData);
    }
    get dni() {
        return '472';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '472', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class SchedulingApiNotificationSettingsSettingsForDeviceTypeNotificationGroups extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'notificationGroups');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'notificationGroups',
            id: 'NOTIFICATION_SETTINGS_SETTINGS_FOR_DEVICE_TYPE_NOTIFICATION_GROUPS',
            primitiveType: PApiPrimitiveTypes.ApiList,
        });
    }
    wrapItem(item, _generateMissingData) {
        const newWrapper = new SchedulingApiNotificationSettingsSettingsForDeviceTypeNotificationGroup(this.api);
        newWrapper._updateRawData(item, _generateMissingData);
        return newWrapper;
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return false;
    }
    createInstance(removeDestroyedItems) {
        return new SchedulingApiNotificationSettingsSettingsForDeviceTypeNotificationGroups(this.api, removeDestroyedItems);
    }
    get dni() {
        return '473';
    }
    createNewItem(id = null) {
        const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('notificationGroups');
        return newItem;
    }
}
export class SchedulingApiNotificationSettingsSettingsForDeviceTypeNotificationGroup extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiNotificationSettingsSettingsForDeviceTypeNotificationGroup);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'notificationSettingsSettingsForDeviceTypeNotificationGroup',
            id: 'NOTIFICATION_SETTINGS_SETTINGS_FOR_DEVICE_TYPE_NOTIFICATION_GROUP',
        });
        this.attributeInfoEnabled = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'enabled',
            id: 'NOTIFICATION_SETTINGS_SETTINGS_FOR_DEVICE_TYPE_NOTIFICATION_GROUP_ENABLED',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoRecommendedToReceive = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'recommendedToReceive',
            id: 'NOTIFICATION_SETTINGS_SETTINGS_FOR_DEVICE_TYPE_NOTIFICATION_GROUP_IS_RECOMMENDED_TO_RECEIVE',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoGroup = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'group',
            id: 'NOTIFICATION_SETTINGS_SETTINGS_FOR_DEVICE_TYPE_NOTIFICATION_GROUP_GROUP',
            primitiveType: PApiPrimitiveTypes.Enum,
        });
        this.attributeInfoTitle = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'title',
            id: 'NOTIFICATION_SETTINGS_SETTINGS_FOR_DEVICE_TYPE_NOTIFICATION_GROUP_TITLE',
            primitiveType: PApiPrimitiveTypes.Enum,
        });
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  Is notifications for this group enabled?
     *
     * @type {boolean}
     */
    get enabled() {
        return this.data[1];
    }
    set enabled(v) {
        this.setterImpl(1, v, 'enabled');
    }
    /**
     *  When "true" it is recommended that this group is enabled at least for one device type.
     *
     * @type {boolean}
     */
    get recommendedToReceive() {
        return this.data[2];
    }
    set recommendedToReceive(v) {
        this.setterImpl(2, v, 'recommendedToReceive');
    }
    /**
     *  The notification group. Read-only.
     *
     * @type {SchedulingApiNotificationSettingsNotificationGroup}
     */
    get group() {
        return this.data[3];
    }
    set group(v) {
        this.setterImpl(3, v, 'group');
    }
    /**
     *  The title of this notification group. Read-only.
     *
     * @type {SchedulingApiNotificationSettingsNotificationTitle}
     */
    get title() {
        return this.data[4];
    }
    set title(v) {
        this.setterImpl(4, v, 'title');
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 5);
            data[1] = false;
            data[2] = false;
        }
        // propagate new raw data to children
    }
    get dni() {
        return '475';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '475', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export var SchedulingApiNotificationSettingsNotificationGroup;
(function (SchedulingApiNotificationSettingsNotificationGroup) {
    SchedulingApiNotificationSettingsNotificationGroup[SchedulingApiNotificationSettingsNotificationGroup["SHIFTS_ASSIGNMENT_PROCESS_GENERAL"] = 1] = "SHIFTS_ASSIGNMENT_PROCESS_GENERAL";
    SchedulingApiNotificationSettingsNotificationGroup[SchedulingApiNotificationSettingsNotificationGroup["SHIFTS_ASSIGNMENT_PROCESS_REMINDER"] = 2] = "SHIFTS_ASSIGNMENT_PROCESS_REMINDER";
    SchedulingApiNotificationSettingsNotificationGroup[SchedulingApiNotificationSettingsNotificationGroup["SHIFTS_ASSIGNMENT_PROCESS_REPORTS"] = 3] = "SHIFTS_ASSIGNMENT_PROCESS_REPORTS";
    SchedulingApiNotificationSettingsNotificationGroup[SchedulingApiNotificationSettingsNotificationGroup["SHIFTS_ASSIGNMENT_CHANGED"] = 4] = "SHIFTS_ASSIGNMENT_CHANGED";
    SchedulingApiNotificationSettingsNotificationGroup[SchedulingApiNotificationSettingsNotificationGroup["SHIFTS_ASSIGNMENT_REMINDER"] = 5] = "SHIFTS_ASSIGNMENT_REMINDER";
    SchedulingApiNotificationSettingsNotificationGroup[SchedulingApiNotificationSettingsNotificationGroup["SHIFTS_COURSE_CANCELED"] = 6] = "SHIFTS_COURSE_CANCELED";
    SchedulingApiNotificationSettingsNotificationGroup[SchedulingApiNotificationSettingsNotificationGroup["TIME_STAMP_NOT_STAMPED"] = 7] = "TIME_STAMP_NOT_STAMPED";
    SchedulingApiNotificationSettingsNotificationGroup[SchedulingApiNotificationSettingsNotificationGroup["TIME_STAMP_INFORM_OWNER_MEMBER_NOT_USED"] = 8] = "TIME_STAMP_INFORM_OWNER_MEMBER_NOT_USED";
    SchedulingApiNotificationSettingsNotificationGroup[SchedulingApiNotificationSettingsNotificationGroup["COURSE_NOT_REACHED_MIN_PARTICIPANT_COUNT"] = 9] = "COURSE_NOT_REACHED_MIN_PARTICIPANT_COUNT";
    SchedulingApiNotificationSettingsNotificationGroup[SchedulingApiNotificationSettingsNotificationGroup["COURSE_REACHED_MIN_PARTICIPANT_COUNT"] = 10] = "COURSE_REACHED_MIN_PARTICIPANT_COUNT";
    SchedulingApiNotificationSettingsNotificationGroup[SchedulingApiNotificationSettingsNotificationGroup["COURSE_INQUIRY_ARRIVED"] = 11] = "COURSE_INQUIRY_ARRIVED";
    SchedulingApiNotificationSettingsNotificationGroup[SchedulingApiNotificationSettingsNotificationGroup["COURSE_INQUIRY_DECLINED"] = 12] = "COURSE_INQUIRY_DECLINED";
    SchedulingApiNotificationSettingsNotificationGroup[SchedulingApiNotificationSettingsNotificationGroup["COURSE_BOOKED"] = 13] = "COURSE_BOOKED";
    SchedulingApiNotificationSettingsNotificationGroup[SchedulingApiNotificationSettingsNotificationGroup["COURSE_BOOKING_CANCELED_BY_MEMBER"] = 14] = "COURSE_BOOKING_CANCELED_BY_MEMBER";
    SchedulingApiNotificationSettingsNotificationGroup[SchedulingApiNotificationSettingsNotificationGroup["COURSE_BOOKING_CANCELED_BY_BOOKING_PERSON"] = 15] = "COURSE_BOOKING_CANCELED_BY_BOOKING_PERSON";
    SchedulingApiNotificationSettingsNotificationGroup[SchedulingApiNotificationSettingsNotificationGroup["COURSE_BOOKING_CANCELED_MANUAL_REFUND_NEEDED"] = 16] = "COURSE_BOOKING_CANCELED_MANUAL_REFUND_NEEDED";
    SchedulingApiNotificationSettingsNotificationGroup[SchedulingApiNotificationSettingsNotificationGroup["COURSE_INFORM_BOOKING_COMMENT"] = 17] = "COURSE_INFORM_BOOKING_COMMENT";
    SchedulingApiNotificationSettingsNotificationGroup[SchedulingApiNotificationSettingsNotificationGroup["ONLINE_PAYMENT_FAILED"] = 18] = "ONLINE_PAYMENT_FAILED";
    SchedulingApiNotificationSettingsNotificationGroup[SchedulingApiNotificationSettingsNotificationGroup["ONLINE_REFUNDED_BY_MEMBER"] = 19] = "ONLINE_REFUNDED_BY_MEMBER";
    SchedulingApiNotificationSettingsNotificationGroup[SchedulingApiNotificationSettingsNotificationGroup["ONLINE_REFUND_FAILED"] = 20] = "ONLINE_REFUND_FAILED";
    SchedulingApiNotificationSettingsNotificationGroup[SchedulingApiNotificationSettingsNotificationGroup["VOUCHER_NEW_ITEM"] = 21] = "VOUCHER_NEW_ITEM";
    SchedulingApiNotificationSettingsNotificationGroup[SchedulingApiNotificationSettingsNotificationGroup["SHIFT_EXCHANGE_GENERAL"] = 22] = "SHIFT_EXCHANGE_GENERAL";
    SchedulingApiNotificationSettingsNotificationGroup[SchedulingApiNotificationSettingsNotificationGroup["SHIFT_EXCHANGE_REMINDER"] = 23] = "SHIFT_EXCHANGE_REMINDER";
    SchedulingApiNotificationSettingsNotificationGroup[SchedulingApiNotificationSettingsNotificationGroup["SHIFT_EXCHANGE_ITEM_CREATED"] = 24] = "SHIFT_EXCHANGE_ITEM_CREATED";
    SchedulingApiNotificationSettingsNotificationGroup[SchedulingApiNotificationSettingsNotificationGroup["SHIFT_EXCHANGE_ITEM_SUCCESSFUL"] = 25] = "SHIFT_EXCHANGE_ITEM_SUCCESSFUL";
    SchedulingApiNotificationSettingsNotificationGroup[SchedulingApiNotificationSettingsNotificationGroup["SHIFT_EXCHANGE_ITEM_SUCCESSFUL_WITH_WARNINGS"] = 26] = "SHIFT_EXCHANGE_ITEM_SUCCESSFUL_WITH_WARNINGS";
    SchedulingApiNotificationSettingsNotificationGroup[SchedulingApiNotificationSettingsNotificationGroup["SHIFT_EXCHANGE_ITEM_FAILED"] = 27] = "SHIFT_EXCHANGE_ITEM_FAILED";
})(SchedulingApiNotificationSettingsNotificationGroup || (SchedulingApiNotificationSettingsNotificationGroup = {}));
export var SchedulingApiNotificationSettingsNotificationTitle;
(function (SchedulingApiNotificationSettingsNotificationTitle) {
    SchedulingApiNotificationSettingsNotificationTitle[SchedulingApiNotificationSettingsNotificationTitle["TITLE_SHIFT_EXCHANGE"] = 1] = "TITLE_SHIFT_EXCHANGE";
    SchedulingApiNotificationSettingsNotificationTitle[SchedulingApiNotificationSettingsNotificationTitle["TITLE_BOOKING_SYSTEM"] = 2] = "TITLE_BOOKING_SYSTEM";
    SchedulingApiNotificationSettingsNotificationTitle[SchedulingApiNotificationSettingsNotificationTitle["TITLE_TIME_STAMP"] = 3] = "TITLE_TIME_STAMP";
    SchedulingApiNotificationSettingsNotificationTitle[SchedulingApiNotificationSettingsNotificationTitle["TITLE_SHIFTS"] = 4] = "TITLE_SHIFTS";
})(SchedulingApiNotificationSettingsNotificationTitle || (SchedulingApiNotificationSettingsNotificationTitle = {}));
export var SchedulingApiNotificationSettingsDeviceType;
(function (SchedulingApiNotificationSettingsDeviceType) {
    SchedulingApiNotificationSettingsDeviceType[SchedulingApiNotificationSettingsDeviceType["MAIL"] = 1] = "MAIL";
    SchedulingApiNotificationSettingsDeviceType[SchedulingApiNotificationSettingsDeviceType["APP_PUSH_NOTIFICATION"] = 2] = "APP_PUSH_NOTIFICATION";
    SchedulingApiNotificationSettingsDeviceType[SchedulingApiNotificationSettingsDeviceType["WEB_PUSH_NOTIFICATION"] = 3] = "WEB_PUSH_NOTIFICATION";
})(SchedulingApiNotificationSettingsDeviceType || (SchedulingApiNotificationSettingsDeviceType = {}));
export class SchedulingApiVoucherSettings extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiVoucherSettings);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'voucherSettings',
            id: 'VOUCHER_SETTINGS',
            show: function () {
                console.error('AttributeInfo for /scheduling -> VOUCHER_SETTINGS is not implemented yet. Please create a Jira issue in the current Sprint: https://drplano.atlassian.net/secure/CreateIssueDetails!init.jspa?pid=10003&issuetype=10101&summary=' + encodeURI('AttributeInfo for /scheduling -> VOUCHER_SETTINGS is not implemented yet') + '&assignee=557058%3Ae58fd015-3e1d-44b8-9131-aef274b1c571');
                return true;
            },
            canEdit: function () {
                if (!(((this.api.rightsService.canReadAndWriteBookingSystemSettings)))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.canReadAndWriteBookingSystemSettings)))) {
                    return true;
                }
                return false;
            },
        });
        this.attributeInfoIsVoucherSaleEnabled = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'isVoucherSaleEnabled',
            id: 'VOUCHER_SETTINGS_IS_VOUCHER_SALE_ENABLED',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoVoucherMinPrice = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'voucherMinPrice',
            id: 'VOUCHER_SETTINGS_VOUCHER_MIN_PRICE',
            primitiveType: PApiPrimitiveTypes.Currency,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Currency, undefined);
                        return null;
                    },
                    () => {
                        return this.api.validators.min(0, false, PApiPrimitiveTypes.Currency, undefined, undefined);
                        return null;
                    },
                    () => {
                        return this.api.validators.max(() => this.voucherMaxPrice, false, PApiPrimitiveTypes.Currency, 'VOUCHER_SETTINGS_VOUCHER_MAX_PRICE', undefined);
                        return null;
                    },
                    () => {
                        return this.api.validators.maxDecimalPlacesCount(0, PApiPrimitiveTypes.Currency, undefined);
                    },
                ];
            },
        });
        this.attributeInfoVoucherMaxPrice = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'voucherMaxPrice',
            id: 'VOUCHER_SETTINGS_VOUCHER_MAX_PRICE',
            primitiveType: PApiPrimitiveTypes.Currency,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Currency, undefined);
                        return null;
                    },
                    () => {
                        return this.api.validators.min(() => this.voucherMinPrice, false, PApiPrimitiveTypes.Currency, 'VOUCHER_SETTINGS_VOUCHER_MIN_PRICE', undefined);
                        return null;
                    },
                    () => {
                        return this.api.validators.maxDecimalPlacesCount(0, PApiPrimitiveTypes.Currency, undefined);
                    },
                ];
            },
        });
        this.attributeInfoVoucherHomepageDescriptionText = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'voucherHomepageDescriptionText',
            id: 'VOUCHER_SETTINGS_VOUCHER_HOMEPAGE_DESCRIPTION_TEXT',
            primitiveType: PApiPrimitiveTypes.string,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.string, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoVoucherExpirationDuration = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'voucherExpirationDuration',
            id: 'VOUCHER_SETTINGS_VOUCHER_EXPIRATION_DURATION',
            primitiveType: PApiPrimitiveTypes.Years,
        });
        this.attributeInfoVoucherMailReplyTo = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'voucherMailReplyTo',
            id: 'VOUCHER_SETTINGS_VOUCHER_MAIL_REPLY_TO',
            primitiveType: PApiPrimitiveTypes.Email,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Email, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoVoucherCodePrefix = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'voucherCodePrefix',
            id: 'VOUCHER_SETTINGS_VOUCHER_CODE_PREFIX',
            primitiveType: PApiPrimitiveTypes.string,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.string, undefined);
                        return null;
                    },
                    () => {
                        return this.api.validators.maxLength(20, PApiPrimitiveTypes.string, undefined);
                    },
                ];
            },
        });
        this.attributeInfoVoucherCodeLength = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'voucherCodeLength',
            id: 'VOUCHER_SETTINGS_VOUCHER_CODE_LENGTH',
            primitiveType: PApiPrimitiveTypes.Integer,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Integer, undefined);
                        return null;
                    },
                    () => {
                        return this.api.validators.max(50, true, PApiPrimitiveTypes.Integer, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoVoucherCodeOnlyContainsDigits = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'voucherCodeOnlyContainsDigits',
            id: 'VOUCHER_SETTINGS_VOUCHER_CODE_ONLY_CONTAINS_DIGITS',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  Is voucher sale enabled?
     *
     * @type {boolean}
     */
    get isVoucherSaleEnabled() {
        return this.data[1];
    }
    set isVoucherSaleEnabled(v) {
        this.setterImpl(1, v, 'isVoucherSaleEnabled');
    }
    /**
     *  Minimal voucher sale value. This value must be an integer.
     *
     * @type {Currency}
     */
    get voucherMinPrice() {
        return this.data[2];
    }
    set voucherMinPrice(v) {
        this.setterImpl(2, v, 'voucherMinPrice');
    }
    /**
     *  Maximal voucher sale value. This value must be an integer.
     *
     * @type {Currency}
     */
    get voucherMaxPrice() {
        return this.data[3];
    }
    set voucherMaxPrice(v) {
        this.setterImpl(3, v, 'voucherMaxPrice');
    }
    /**
     *  The html text which will be shown on the booking plugin.
     *
     * @type {string}
     */
    get voucherHomepageDescriptionText() {
        return this.data[4];
    }
    set voucherHomepageDescriptionText(v) {
        this.setterImpl(4, v, 'voucherHomepageDescriptionText');
    }
    /**
     *  The expiration duration of the vouchers.
     *
     * @type {Years}
     */
    get voucherExpirationDuration() {
        return this.data[5];
    }
    set voucherExpirationDuration(v) {
        this.setterImpl(5, v, 'voucherExpirationDuration');
    }
    /**
     *  Email address being set as reply-to field when sending email to voucher booking person.
     *
     * @type {Email}
     */
    get voucherMailReplyTo() {
        return this.data[6];
    }
    set voucherMailReplyTo(v) {
        this.setterImpl(6, v, 'voucherMailReplyTo');
    }
    /**
     *  An optional prefix being added before the generated code.
     *
     * @type {string}
     */
    get voucherCodePrefix() {
        return this.data[7];
    }
    set voucherCodePrefix(v) {
        this.setterImpl(7, v, 'voucherCodePrefix');
    }
    /**
     *  The length of the generated code. Should be greater equal 9. This value does not include the "voucherCodePrefix".
     *
     * @type {Integer}
     */
    get voucherCodeLength() {
        return this.data[8];
    }
    set voucherCodeLength(v) {
        this.setterImpl(8, v, 'voucherCodeLength');
    }
    /**
     *  Should the generated code only contain digits? If "false" it will also contain alphabetic characters.
     *
     * @type {boolean}
     */
    get voucherCodeOnlyContainsDigits() {
        return this.data[9];
    }
    set voucherCodeOnlyContainsDigits(v) {
        this.setterImpl(9, v, 'voucherCodeOnlyContainsDigits');
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 10);
            data[1] = false;
            data[9] = false;
        }
        // propagate new raw data to children
    }
    get dni() {
        return '25';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '25', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class SchedulingApiVouchersBase extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'vouchers');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'vouchers',
            id: 'VOUCHERS',
            primitiveType: PApiPrimitiveTypes.ApiList,
            show: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            canEdit: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return true;
                }
                return false;
            },
        });
    }
    wrapItem(item, _generateMissingData) {
        const newWrapper = new SchedulingApiVoucher(this.api);
        newWrapper._updateRawData(item, _generateMissingData);
        return newWrapper;
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return false;
    }
    createInstance(removeDestroyedItems) {
        return new SchedulingApiVouchers(this.api, removeDestroyedItems);
    }
    get dni() {
        return '26';
    }
    createNewItem(id = null) {
        const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('vouchers');
        return newItem;
    }
}
export class SchedulingApiVoucherBase extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiVoucher);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'voucher',
            id: 'VOUCHER',
        });
        this.attributeInfoFirstName = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'firstName',
            id: 'VOUCHER_FIRST_NAME',
            primitiveType: PApiPrimitiveTypes.string,
        });
        this.attributeInfoLastName = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'lastName',
            id: 'VOUCHER_LAST_NAME',
            primitiveType: PApiPrimitiveTypes.string,
        });
        this.attributeInfoBookingNumber = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'bookingNumber',
            id: 'VOUCHER_BOOKING_NUMBER',
            primitiveType: PApiPrimitiveTypes.Integer,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoCode = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'code',
            id: 'VOUCHER_CODE',
            primitiveType: PApiPrimitiveTypes.string,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoCurrentValue = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'currentValue',
            id: 'VOUCHER_CURRENT_VALUE',
            primitiveType: PApiPrimitiveTypes.Currency,
        });
        this.attributeInfoDateOfBooking = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'dateOfBooking',
            id: 'VOUCHER_DATE_OF_BOOKING',
            primitiveType: PApiPrimitiveTypes.DateTime,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoPrice = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'price',
            id: 'VOUCHER_PRICE',
            primitiveType: PApiPrimitiveTypes.Currency,
        });
        this.attributeInfoCurrentlyPaid = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'currentlyPaid',
            id: 'VOUCHER_CURRENTLY_PAID',
            primitiveType: PApiPrimitiveTypes.Currency,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoEmail = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'email',
            id: 'VOUCHER_EMAIL',
            primitiveType: PApiPrimitiveTypes.Email,
        });
        this.attributeInfoExpirationDate = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'expirationDate',
            id: 'VOUCHER_EXPIRATION_DATE',
            primitiveType: PApiPrimitiveTypes.DateTime,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoForDescription = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'forDescription',
            id: 'VOUCHER_FOR_DESCRIPTION',
            primitiveType: PApiPrimitiveTypes.string,
        });
        this.attributeInfoPaidBeforeTransactionListIntroduction = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'paidBeforeTransactionListIntroduction',
            id: 'VOUCHER_PAID_BEFORE_TRANSACTION_LIST_INTRODUCTION',
            primitiveType: PApiPrimitiveTypes.Currency,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoRefundLimitDueToOnlineBalance = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'refundLimitDueToOnlineBalance',
            id: 'VOUCHER_ACCOUNT_REFUND_LIMIT_DUE_TO_ONLINE_BALANCE',
            primitiveType: PApiPrimitiveTypes.Currency,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoIsAnonymized = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'isAnonymized',
            id: 'VOUCHER_IS_ANONYMIZED',
            primitiveType: PApiPrimitiveTypes.boolean,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoTestingDeferredPaymentToken = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'testingDeferredPaymentToken',
            id: 'VOUCHER_TESTING_DEFERRED_PAYMENT_TOKEN',
            primitiveType: PApiPrimitiveTypes.string,
            show: function () {
                return true;
            },
            canEdit: () => false,
            readMode: () => true,
        });
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  First name of voucher owner.
     *
     * @type {string}
     */
    get firstName() {
        return this.data[1];
    }
    set firstName(v) {
        this.setterImpl(1, v, 'firstName');
    }
    /**
     *  Last name of voucher owner.
     *
     * @type {string}
     */
    get lastName() {
        return this.data[2];
    }
    set lastName(v) {
        this.setterImpl(2, v, 'lastName');
    }
    /**
     *  The booking number of this voucher.
     *
     * @type {Integer}
     */
    get bookingNumber() {
        return this.data[3];
    }
    set bookingNumberTestSetter(v) {
        this.setterImpl(3, v, 'bookingNumber');
    }
    /**
     *  Code of voucher.
     *
     * @type {string}
     */
    get code() {
        return this.data[4];
    }
    set codeTestSetter(v) {
        this.setterImpl(4, v, 'code');
    }
    /**
     *  Current value of this voucher.
     *
     * @type {Currency}
     */
    get currentValue() {
        return this.data[5];
    }
    set currentValue(v) {
        this.setterImpl(5, v, 'currentValue');
    }
    /**
     *  When was this voucher sold?
     *
     * @type {DateTime}
     */
    get dateOfBooking() {
        return this.data[6];
    }
    set dateOfBookingTestSetter(v) {
        this.setterImpl(6, v, 'dateOfBooking');
    }
    /**
     *  Initial value of this voucher for which it was sold.
     *
     * @type {Currency}
     */
    get price() {
        return this.data[7];
    }
    set price(v) {
        this.setterImpl(7, v, 'price');
    }
    /**
     *  How much has currently been paid by the booking person.
     *
     * @type {Currency}
     */
    get currentlyPaid() {
        return this.data[8];
    }
    set currentlyPaidTestSetter(v) {
        this.setterImpl(8, v, 'currentlyPaid');
    }
    /**
     * (Detail)  Email of voucher owner.
     *
     * @type {Email}
     */
    get email() {
        return this.data[9];
    }
    set email(v) {
        this.setterImpl(9, v, 'email');
    }
    /**
     * (Detail)  When will this voucher expire. Read-only.
     *
     * @type {DateTime}
     */
    get expirationDate() {
        return this.data[10];
    }
    set expirationDateTestSetter(v) {
        this.setterImpl(10, v, 'expirationDate');
    }
    /**
     * (Detail)  An optional text describing for what or whom this voucher is.
     *
     * @type {string}
     */
    get forDescription() {
        return this.data[11];
    }
    set forDescription(v) {
        this.setterImpl(11, v, 'forDescription');
    }
    /**
     * (Detail)  The amount which was paid before we introduced the detailed transaction list for each bookable. Ignore it when it is "null".
     *
     * @type {Currency}
     */
    get paidBeforeTransactionListIntroduction() {
        return this.data[12];
    }
    set paidBeforeTransactionListIntroductionTestSetter(v) {
        this.setterImpl(12, v, 'paidBeforeTransactionListIntroduction');
    }
    /**
     * (Detail)  The max refund value when limited by online balance. This value is send to everyone who can trigger online refunds. Thus as a security measure it is only send when online balance limits the refund amount to not leak the online balance to unauthorized users. Otherwise "null" is returned.
     *
     * @type {Currency}
     */
    get refundLimitDueToOnlineBalance() {
        return this.data[13];
    }
    set refundLimitDueToOnlineBalanceTestSetter(v) {
        this.setterImpl(13, v, 'refundLimitDueToOnlineBalance');
    }
    /**
     * (Detail)  Is this booking anonymized?
     *
     * @type {boolean}
     */
    get isAnonymized() {
        return this.data[14];
    }
    set isAnonymizedTestSetter(v) {
        this.setterImpl(14, v, 'isAnonymized');
    }
    /**
     * (Detail)  A token for deferred Payments. Only for testing.
     *
     * @type {string}
     */
    get testingDeferredPaymentToken() {
        return this.data[15];
    }
    set testingDeferredPaymentTokenTestSetter(v) {
        this.setterImpl(15, v, 'testingDeferredPaymentToken');
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 16);
            data[14] = false;
        }
        // propagate new raw data to children
    }
    get dni() {
        return '522';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '522', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class SchedulingApiTransactionsBase extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'transactions');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'transactions',
            id: 'TRANSACTIONS',
            primitiveType: PApiPrimitiveTypes.ApiList,
            show: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) || (this.api.rightsService.requesterIs(AuthenticatedApiRole.ADMIN)) || (this.api.rightsService.requesterIs(AuthenticatedApiRole.SUPER_ADMIN)) || (this.api.currentlyDetailedLoaded instanceof SchedulingApiBooking) || (this.api.currentlyDetailedLoaded instanceof SchedulingApiVoucher) || (this.api.currentlyDetailedLoaded instanceof SchedulingApiTransaction)))) {
                    return false;
                }
                return true;
            },
            canEdit: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) || (this.api.rightsService.requesterIs(AuthenticatedApiRole.ADMIN)) || (this.api.rightsService.requesterIs(AuthenticatedApiRole.SUPER_ADMIN)) || (this.api.currentlyDetailedLoaded instanceof SchedulingApiBooking && this.api.rightsService.userCanWriteBooking(this.api.currentlyDetailedLoaded))))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) || (this.api.rightsService.requesterIs(AuthenticatedApiRole.ADMIN)) || (this.api.rightsService.requesterIs(AuthenticatedApiRole.SUPER_ADMIN))))) {
                    return true;
                }
                return false;
            },
        });
    }
    wrapItem(item, _generateMissingData) {
        const newWrapper = new SchedulingApiTransaction(this.api);
        newWrapper._updateRawData(item, _generateMissingData);
        return newWrapper;
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return false;
    }
    createInstance(removeDestroyedItems) {
        return new SchedulingApiTransactions(this.api, removeDestroyedItems);
    }
    get dni() {
        return '27';
    }
    createNewItem(id = null) {
        const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('transactions');
        return newItem;
    }
}
export class SchedulingApiTransactionBase extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiTransaction);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'transaction',
            id: 'TRANSACTION',
        });
        this.attributeInfoType = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'type',
            id: 'TRANSACTION_TYPE',
            primitiveType: PApiPrimitiveTypes.Enum,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Enum, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoDateTime = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'dateTime',
            id: 'TRANSACTION_DATE_TIME',
            primitiveType: PApiPrimitiveTypes.DateTime,
            canEdit: () => false,
            readMode: () => true,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.DateTime, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoPaymentMethodType = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'paymentMethodType',
            id: 'TRANSACTION_PAYMENT_METHOD_TYPE',
            primitiveType: PApiPrimitiveTypes.Enum,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Enum, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoMiscPaymentMethodName = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'miscPaymentMethodName',
            id: 'TRANSACTION_MISC_PAYMENT_METHOD_NAME',
            primitiveType: PApiPrimitiveTypes.string,
            show: function () {
                if (!((this.paymentMethodType === SchedulingApiTransactionPaymentMethodType.MISC))) {
                    return false;
                }
                return true;
            },
            validations: function () {
                return [
                    () => {
                        if (((this.paymentMethodType === SchedulingApiTransactionPaymentMethodType.MISC))) {
                            return this.api.validators.required(PApiPrimitiveTypes.string, undefined);
                        }
                        else {
                            return this.api.validators.ensureNull(PApiPrimitiveTypes.string, undefined);
                        }
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoDrPlanoFeeNet = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'drPlanoFeeNet',
            id: 'TRANSACTION_DR_PLANO_FEE_NET',
            primitiveType: PApiPrimitiveTypes.Currency,
            canEdit: () => false,
            readMode: () => true,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Currency, undefined);
                        return null;
                    },
                    () => {
                        return this.api.validators.min(0, true, PApiPrimitiveTypes.Currency, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoBalanceChange = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'balanceChange',
            id: 'TRANSACTION_BALANCE_CHANGE',
            primitiveType: PApiPrimitiveTypes.Currency,
            canEdit: () => false,
            readMode: () => true,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Currency, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoOfferName = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'offerName',
            id: 'TRANSACTION_OFFER_NAME',
            primitiveType: PApiPrimitiveTypes.string,
            show: function () {
                if (!((!!this.offerName))) {
                    return false;
                }
                return true;
            },
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoBookingNumber = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'bookingNumber',
            id: 'TRANSACTION_BOOKING_NUMBER',
            primitiveType: PApiPrimitiveTypes.Integer,
            show: function () {
                if (!((!!this.bookingNumber))) {
                    return false;
                }
                return true;
            },
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoReferencedPerson = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'referencedPerson',
            id: 'TRANSACTION_REFERENCED_PERSON',
            primitiveType: PApiPrimitiveTypes.string,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoBookingId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'bookingId',
            id: 'TRANSACTION_BOOKING_ID',
            primitiveType: PApiPrimitiveTypes.Id,
            show: function () {
                return true;
            },
        });
        this.attributeInfoVoucherId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'voucherId',
            id: 'TRANSACTION_VOUCHER_ID',
            primitiveType: PApiPrimitiveTypes.Id,
            show: function () {
                return true;
            },
        });
        this.attributeInfoShiftModelId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'shiftModelId',
            id: 'TRANSACTION_SHIFT_MODEL_ID',
            primitiveType: PApiPrimitiveTypes.Id,
            show: function () {
                return true;
            },
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoFailedChildId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'failedChildId',
            id: 'TRANSACTION_FAILED_CHILD_ID',
            primitiveType: PApiPrimitiveTypes.Id,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoTestingPspReference = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'testingPspReference',
            id: 'TRANSACTION_TESTING_PSP_REFERENCE',
            primitiveType: PApiPrimitiveTypes.string,
            show: function () {
                return true;
            },
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoTestingOriginalPspReference = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'testingOriginalPspReference',
            id: 'TRANSACTION_TESTING_ORIGINAL_PSP_REFERENCE',
            primitiveType: PApiPrimitiveTypes.string,
            show: function () {
                return true;
            },
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoTestingTransferFundsAmount = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'testingTransferFundsAmount',
            id: 'TRANSACTION_TESTING_TRANSFER_FUNDS_AMOUNT',
            primitiveType: PApiPrimitiveTypes.Currency,
            show: function () {
                return true;
            },
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoTestingTransferFundsPSP = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'testingTransferFundsPSP',
            id: 'TRANSACTION_TESTING_TRANSFER_FUNDS_PSP',
            primitiveType: PApiPrimitiveTypes.string,
            show: function () {
                return true;
            },
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoTestingTransferFundsState = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'testingTransferFundsState',
            id: 'TRANSACTION_TESTING_TRANSFER_FUNDS_STATE',
            primitiveType: PApiPrimitiveTypes.Enum,
            show: function () {
                return true;
            },
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoTestingIsSettled = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'testingIsSettled',
            id: 'TRANSACTION_TESTING_IS_SETTLED',
            primitiveType: PApiPrimitiveTypes.boolean,
            show: function () {
                return true;
            },
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoAbsAmount = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'absAmount',
            id: 'TRANSACTION_ABS_AMOUNT',
            primitiveType: PApiPrimitiveTypes.Currency,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Currency, undefined);
                        return null;
                    },
                    () => {
                        if (((this.type !== SchedulingApiTransactionType.PAYOUT) && (this.type !== SchedulingApiTransactionType.PAYOUT_FAILED))) {
                            return this.api.validators.max(10000, true, PApiPrimitiveTypes.Currency, undefined, 'Der eingegebene Betrag ist außergewöhnlich hoch. Falls er mit Sicherheit richtig ist, dann melde dich bitte bei uns für die Weiterbearbeitung.');
                        }
                        return null;
                    },
                    () => {
                        return this.api.validators.min(0, false, PApiPrimitiveTypes.Currency, undefined, undefined);
                        return null;
                    },
                    () => {
                        if (((this.type === SchedulingApiTransactionType.REFUND))) {
                            return this.api.validators.max(this.bookable.currentlyPaid, true, PApiPrimitiveTypes.Currency, undefined, 'Dein Kunde hat insgesamt ${max} eingezahlt. Du kannst nicht mehr als das zurückzahlen.');
                        }
                        return null;
                    },
                    () => {
                        if (((this.type === SchedulingApiTransactionType.REFUND && this.paymentMethodType === SchedulingApiTransactionPaymentMethodType.ONLINE_PAYMENT))) {
                            return this.api.validators.max(this.bookable.refundLimitDueToOnlineBalance, true, PApiPrimitiveTypes.Currency, undefined, 'Du kannst max. ${max} zurückerstatten, da das <a href="client/sales/transactions" target="_blank" rel="noopener">Online-Guthaben</a> des gesamten Accounts abzüglich Gebühren für mehr nicht ausreicht.');
                        }
                        return null;
                    },
                    () => {
                        if (((this.type === SchedulingApiTransactionType.REFUND && this.paymentMethodType === SchedulingApiTransactionPaymentMethodType.ONLINE_PAYMENT))) {
                            return this.api.validators.max(+this.bookable.transactions.filterBy(item => !item.isNewItem()).onlineRefundableAmount.toFixed(2), true, PApiPrimitiveTypes.Currency, undefined, 'Du kannst max. ${max} zurückerstatten, da das Online-Guthaben dieser Buchung für mehr nicht ausreicht.');
                        }
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoChildChargebackId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'childChargebackId',
            id: 'TRANSACTION_CHILD_CHARGEBACK_ID',
            primitiveType: PApiPrimitiveTypes.Id,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoChildChargebackReversedId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'childChargebackReversedId',
            id: 'TRANSACTION_CHILD_CHARGEBACK_REVERSED_ID',
            primitiveType: PApiPrimitiveTypes.Id,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoChildSecondChargebackId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'childSecondChargebackId',
            id: 'TRANSACTION_CHILD_SECOND_CHARGEBACK_ID',
            primitiveType: PApiPrimitiveTypes.Id,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoVatPercent = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'vatPercent',
            id: 'TRANSACTION_VAT_PERCENT',
            primitiveType: PApiPrimitiveTypes.number,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoInternalComment = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'internalComment',
            id: 'TRANSACTION_INTERNAL_COMMENT',
            primitiveType: PApiPrimitiveTypes.string,
        });
        this.attributeInfoBalance = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'balance',
            id: 'TRANSACTION_BALANCE',
            primitiveType: PApiPrimitiveTypes.Currency,
            show: function () {
                if (!((this.paymentMethodType === SchedulingApiTransactionPaymentMethodType.ONLINE_PAYMENT))) {
                    return false;
                }
                return true;
            },
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoCreatorId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'creatorId',
            id: 'TRANSACTION_CREATOR_ID',
            primitiveType: PApiPrimitiveTypes.Id,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoBankAccountHint = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'bankAccountHint',
            id: 'TRANSACTION_BANK_ACCOUNT_HINT',
            primitiveType: PApiPrimitiveTypes.string,
            show: function () {
                if (!(((this.type === SchedulingApiTransactionType.PAYOUT) || (this.type === SchedulingApiTransactionType.PAYOUT_FAILED) || (this.type === SchedulingApiTransactionType.AUTO_DEBIT) || (this.type === SchedulingApiTransactionType.AUTO_DEBIT_FAILED)))) {
                    return false;
                }
                return true;
            },
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoBankDescription = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'bankDescription',
            id: 'TRANSACTION_BANK_DESCRIPTION',
            primitiveType: PApiPrimitiveTypes.string,
            show: function () {
                if (!((this.paymentMethodType === SchedulingApiTransactionPaymentMethodType.ONLINE_PAYMENT) && (this.type !== SchedulingApiTransactionType.DR_PLANO_FEE_VAT))) {
                    return false;
                }
                return true;
            },
            canEdit: () => false,
            readMode: () => true,
            validations: function () {
                return [
                    () => {
                        if (((this.paymentMethodType === SchedulingApiTransactionPaymentMethodType.ONLINE_PAYMENT) && (this.type !== SchedulingApiTransactionType.DR_PLANO_FEE_VAT))) {
                            return this.api.validators.required(PApiPrimitiveTypes.string, undefined);
                        }
                        else {
                            return this.api.validators.ensureNull(PApiPrimitiveTypes.string, undefined);
                        }
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoParentId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'parentId',
            id: 'TRANSACTION_PARENT_ID',
            primitiveType: PApiPrimitiveTypes.Id,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoFailedReason = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'failedReason',
            id: 'TRANSACTION_FAILED_REASON',
            primitiveType: PApiPrimitiveTypes.string,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoDrPlanoFeeVatDeprecated = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'drPlanoFeeVatDeprecated',
            id: 'TRANSACTION_DR_PLANO_FEE_VAT_DEPRECATED',
            primitiveType: PApiPrimitiveTypes.Currency,
            canEdit: () => false,
            readMode: () => true,
        });
        this.bookingIdWrapper = null;
        this.voucherIdWrapper = null;
        this.shiftModelIdWrapper = null;
        this.failedChildIdWrapper = null;
        this.childChargebackIdWrapper = null;
        this.childChargebackReversedIdWrapper = null;
        this.childSecondChargebackIdWrapper = null;
        this.creatorIdWrapper = null;
        this.parentIdWrapper = null;
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  The type of this transaction
     *
     * @type {SchedulingApiTransactionType}
     */
    get type() {
        return this.data[1];
    }
    set type(v) {
        this.setterImpl(1, v, 'type');
    }
    /**
     *  The date-time of this transaction.
     *
     * @type {DateTime}
     */
    get dateTime() {
        return this.data[2];
    }
    set dateTimeTestSetter(v) {
        this.setterImpl(2, v, 'dateTime');
    }
    /**
     *  The payment-method type of the transaction. See "shiftModel.coursePaymentMethods.type".
     *
     * @type {SchedulingApiTransactionPaymentMethodType}
     */
    get paymentMethodType() {
        return this.data[3];
    }
    set paymentMethodType(v) {
        this.setterImpl(3, v, 'paymentMethodType');
    }
    /**
     *  The MISC payment-method name. Only send for "paymentMethodType" == MISC.
     *
     * @type {string}
     */
    get miscPaymentMethodName() {
        return this.data[4];
    }
    set miscPaymentMethodName(v) {
        this.setterImpl(4, v, 'miscPaymentMethodName');
    }
    /**
     *  The fee we are taking for the transaction. This is always zero or a positive number. Note that this does not include any VAT as we will subtract whole VAT at the end of the month using a VAT transaction.
     *
     * @type {Currency}
     */
    get drPlanoFeeNet() {
        return this.data[5];
    }
    set drPlanoFeeNetTestSetter(v) {
        this.setterImpl(5, v, 'drPlanoFeeNet');
    }
    /**
     *  The amount which will be settled on the online-payment account. Can be zero, positive or negative.
     *
     * @type {Currency}
     */
    get balanceChange() {
        return this.data[6];
    }
    set balanceChangeTestSetter(v) {
        this.setterImpl(6, v, 'balanceChange');
    }
    /**
     *  The name of the offer. Either a translation of the word "Gutschein" or the course-title.
     *
     * @type {string}
     */
    get offerName() {
        return this.data[7];
    }
    set offerNameTestSetter(v) {
        this.setterImpl(7, v, 'offerName');
    }
    /**
     *  The booking number of the booking/voucher.
     *
     * @type {Integer}
     */
    get bookingNumber() {
        return this.data[8];
    }
    set bookingNumberTestSetter(v) {
        this.setterImpl(8, v, 'bookingNumber');
    }
    /**
     *  The name of the referenced person who payed/received this transaction. For type PAYOUT, PAYOUT_FAILED, AUTO_DEBIT and AUTO_DEBIT_FAILED this will return the string "Dr. Plano".
     *
     * @type {string}
     */
    get referencedPerson() {
        return this.data[9];
    }
    set referencedPersonTestSetter(v) {
        this.setterImpl(9, v, 'referencedPerson');
    }
    /**
     *  The id of the booking to which this transaction belongs. Can be "null".
     *
     * @type {Id}
     */
    get bookingId() {
        return this.bookingIdWrapper;
    }
    set bookingId(v) {
        this.setterImpl(10, v, 'bookingId', () => { this.bookingIdWrapper = v; });
    }
    /**
     *  The id of the voucher to which this transaction belongs. Can be "null".
     *
     * @type {Id}
     */
    get voucherId() {
        return this.voucherIdWrapper;
    }
    set voucherId(v) {
        this.setterImpl(11, v, 'voucherId', () => { this.voucherIdWrapper = v; });
    }
    /**
     *  The id of the shift-model to which this transaction belongs. Can be "null".
     *
     * @type {Id}
     */
    get shiftModelId() {
        return this.shiftModelIdWrapper;
    }
    set shiftModelIdTestSetter(v) {
        this.setterImpl(12, v, 'shiftModelId', () => { this.shiftModelIdWrapper = v; });
    }
    /**
     *  The id of a failed child transaction item. E.g. this is a PAYMENT item and there exists a corresponding PAYMENT_FAILED child item. Then this value contains the id of the PAYMENT_FAILED item. Note that a payment with chargebacks will have multiple failed children. In that case this value will be the id of one of the chargeback items. In that case, rather use "childChargebackId", "childChargebackReversedId" and "childSecondChargebackId".
     *
     * @type {Id}
     */
    get failedChildId() {
        return this.failedChildIdWrapper;
    }
    set failedChildIdTestSetter(v) {
        this.setterImpl(13, v, 'failedChildId', () => { this.failedChildIdWrapper = v; });
    }
    /**
     *  Adyens PSP reference of the transaction. This is only send in testing mode.
     *
     * @type {string}
     */
    get testingPspReference() {
        return this.data[14];
    }
    set testingPspReferenceTestSetter(v) {
        this.setterImpl(14, v, 'testingPspReference');
    }
    /**
     *  Adyens original PSP reference of the transaction. This is only send in testing mode.
     *
     * @type {string}
     */
    get testingOriginalPspReference() {
        return this.data[15];
    }
    set testingOriginalPspReferenceTestSetter(v) {
        this.setterImpl(15, v, 'testingOriginalPspReference');
    }
    /**
     *  The TransferFunds-Amount for this transaction. This is only send in testing mode.
     *
     * @type {Currency}
     */
    get testingTransferFundsAmount() {
        return this.data[16];
    }
    set testingTransferFundsAmountTestSetter(v) {
        this.setterImpl(16, v, 'testingTransferFundsAmount');
    }
    /**
     *  The TransferFunds-PSP for this transaction. This is only send in testing mode.
     *
     * @type {string}
     */
    get testingTransferFundsPSP() {
        return this.data[17];
    }
    set testingTransferFundsPSPTestSetter(v) {
        this.setterImpl(17, v, 'testingTransferFundsPSP');
    }
    /**
     *  The TransferFunds-State for this transaction. This is only send in testing mode.
     *
     * @type {SchedulingApiTransactionTransferFundsState}
     */
    get testingTransferFundsState() {
        return this.data[18];
    }
    set testingTransferFundsStateTestSetter(v) {
        this.setterImpl(18, v, 'testingTransferFundsState');
    }
    /**
     *  True if the transaction is settled as defined by TransactionLogic.isSettled(false). This is only send in testing mode.
     *
     * @type {boolean}
     */
    get testingIsSettled() {
        return this.data[19];
    }
    set testingIsSettledTestSetter(v) {
        this.setterImpl(19, v, 'testingIsSettled');
    }
    /**
     *  The absolute amount of the transaction. Set this value when creating a new transaction.
     *
     * @type {Currency}
     */
    get absAmount() {
        return this.data[20];
    }
    set absAmount(v) {
        this.setterImpl(20, v, 'absAmount');
    }
    /**
     *  The id of the child chargeback transaction if it exists.
     *
     * @type {Id}
     */
    get childChargebackId() {
        return this.childChargebackIdWrapper;
    }
    set childChargebackIdTestSetter(v) {
        this.setterImpl(21, v, 'childChargebackId', () => { this.childChargebackIdWrapper = v; });
    }
    /**
     *  The id of the child chargeback-reversed transaction if it exists.
     *
     * @type {Id}
     */
    get childChargebackReversedId() {
        return this.childChargebackReversedIdWrapper;
    }
    set childChargebackReversedIdTestSetter(v) {
        this.setterImpl(22, v, 'childChargebackReversedId', () => { this.childChargebackReversedIdWrapper = v; });
    }
    /**
     *  The id of the child second-chargeback transaction if it exists.
     *
     * @type {Id}
     */
    get childSecondChargebackId() {
        return this.childSecondChargebackIdWrapper;
    }
    set childSecondChargebackIdTestSetter(v) {
        this.setterImpl(23, v, 'childSecondChargebackId', () => { this.childSecondChargebackIdWrapper = v; });
    }
    /**
     *  The vat percent. Only given for "DR_PLANO_FEE_VAT" transactions.
     *
     * @type {number}
     */
    get vatPercent() {
        return this.data[24];
    }
    set vatPercentTestSetter(v) {
        this.setterImpl(24, v, 'vatPercent');
    }
    /**
     * (Detail)  An internal comment used by the client.
     *
     * @type {string}
     */
    get internalComment() {
        return this.data[25];
    }
    set internalComment(v) {
        this.setterImpl(25, v, 'internalComment');
    }
    /**
     * (Detail)  Current balance of the online-payment account.
     *
     * @type {Currency}
     */
    get balance() {
        return this.data[26];
    }
    set balanceTestSetter(v) {
        this.setterImpl(26, v, 'balance');
    }
    /**
     * (Detail)  The id of the member who has created this transaction.
     *
     * @type {Id}
     */
    get creatorId() {
        return this.creatorIdWrapper;
    }
    set creatorIdTestSetter(v) {
        this.setterImpl(27, v, 'creatorId', () => { this.creatorIdWrapper = v; });
    }
    /**
     * (Detail)  An bank account hint for online-payment transactions. E.g. the last characters of an IBAN number "***05432". Can be "null".
     *
     * @type {string}
     */
    get bankAccountHint() {
        return this.data[28];
    }
    set bankAccountHintTestSetter(v) {
        this.setterImpl(28, v, 'bankAccountHint');
    }
    /**
     * (Detail)  The bank description shown in the bank account. Can be "null".
     *
     * @type {string}
     */
    get bankDescription() {
        return this.data[29];
    }
    set bankDescriptionTestSetter(v) {
        this.setterImpl(29, v, 'bankDescription');
    }
    /**
     * (Detail)  The id of the parent transaction.
     *
     * @type {Id}
     */
    get parentId() {
        return this.parentIdWrapper;
    }
    set parentIdTestSetter(v) {
        this.setterImpl(30, v, 'parentId', () => { this.parentIdWrapper = v; });
    }
    /**
     * (Detail)  The fail reason String, or null if the transaction didn't fail.
     *
     * @type {string}
     */
    get failedReason() {
        return this.data[31];
    }
    set failedReasonTestSetter(v) {
        this.setterImpl(31, v, 'failedReason');
    }
    /**
     * (Detail)  Absolute vat amount added to the fee we take for this transaction. This value is deprecated as we dont take VAT directly anymore with the transaction but we have now a special DR_PLANO_FEE_VAT transaction which we create at the end of each month. For new transactions this value will always be 0.
     *
     * @type {Currency}
     */
    get drPlanoFeeVatDeprecated() {
        return this.data[32];
    }
    set drPlanoFeeVatDeprecatedTestSetter(v) {
        this.setterImpl(32, v, 'drPlanoFeeVatDeprecated');
    }
    _fixIds(_idReplacements) {
        this.data[10] = Meta.getReplacedId(this.data[10], _idReplacements);
        this.bookingIdWrapper = Id.create(this.data[10]);
        this.data[11] = Meta.getReplacedId(this.data[11], _idReplacements);
        this.voucherIdWrapper = Id.create(this.data[11]);
        this.data[12] = Meta.getReplacedId(this.data[12], _idReplacements);
        this.shiftModelIdWrapper = Id.create(this.data[12]);
        this.data[13] = Meta.getReplacedId(this.data[13], _idReplacements);
        this.failedChildIdWrapper = Id.create(this.data[13]);
        this.data[21] = Meta.getReplacedId(this.data[21], _idReplacements);
        this.childChargebackIdWrapper = Id.create(this.data[21]);
        this.data[22] = Meta.getReplacedId(this.data[22], _idReplacements);
        this.childChargebackReversedIdWrapper = Id.create(this.data[22]);
        this.data[23] = Meta.getReplacedId(this.data[23], _idReplacements);
        this.childSecondChargebackIdWrapper = Id.create(this.data[23]);
        this.data[27] = Meta.getReplacedId(this.data[27], _idReplacements);
        this.creatorIdWrapper = Id.create(this.data[27]);
        this.data[30] = Meta.getReplacedId(this.data[30], _idReplacements);
        this.parentIdWrapper = Id.create(this.data[30]);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 33);
            data[19] = false;
        }
        // propagate new raw data to children
        if (!Meta.isSameId(data ? data[10] : null, this.bookingIdWrapper))
            this.bookingIdWrapper = data && data[10] ? Id.create(data[10]) : null;
        if (!Meta.isSameId(data ? data[11] : null, this.voucherIdWrapper))
            this.voucherIdWrapper = data && data[11] ? Id.create(data[11]) : null;
        if (!Meta.isSameId(data ? data[12] : null, this.shiftModelIdWrapper))
            this.shiftModelIdWrapper = data && data[12] ? Id.create(data[12]) : null;
        if (!Meta.isSameId(data ? data[13] : null, this.failedChildIdWrapper))
            this.failedChildIdWrapper = data && data[13] ? Id.create(data[13]) : null;
        if (!Meta.isSameId(data ? data[21] : null, this.childChargebackIdWrapper))
            this.childChargebackIdWrapper = data && data[21] ? Id.create(data[21]) : null;
        if (!Meta.isSameId(data ? data[22] : null, this.childChargebackReversedIdWrapper))
            this.childChargebackReversedIdWrapper = data && data[22] ? Id.create(data[22]) : null;
        if (!Meta.isSameId(data ? data[23] : null, this.childSecondChargebackIdWrapper))
            this.childSecondChargebackIdWrapper = data && data[23] ? Id.create(data[23]) : null;
        if (!Meta.isSameId(data ? data[27] : null, this.creatorIdWrapper))
            this.creatorIdWrapper = data && data[27] ? Id.create(data[27]) : null;
        if (!Meta.isSameId(data ? data[30] : null, this.parentIdWrapper))
            this.parentIdWrapper = data && data[30] ? Id.create(data[30]) : null;
    }
    get dni() {
        return '489';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '489', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export var SchedulingApiTransactionType;
(function (SchedulingApiTransactionType) {
    SchedulingApiTransactionType[SchedulingApiTransactionType["PAYMENT"] = 1] = "PAYMENT";
    SchedulingApiTransactionType[SchedulingApiTransactionType["PAYMENT_FAILED"] = 2] = "PAYMENT_FAILED";
    SchedulingApiTransactionType[SchedulingApiTransactionType["REFUND"] = 3] = "REFUND";
    SchedulingApiTransactionType[SchedulingApiTransactionType["REFUND_FAILED"] = 4] = "REFUND_FAILED";
    SchedulingApiTransactionType[SchedulingApiTransactionType["PAYOUT"] = 5] = "PAYOUT";
    SchedulingApiTransactionType[SchedulingApiTransactionType["PAYOUT_FAILED"] = 6] = "PAYOUT_FAILED";
    SchedulingApiTransactionType[SchedulingApiTransactionType["CHARGEBACK"] = 7] = "CHARGEBACK";
    SchedulingApiTransactionType[SchedulingApiTransactionType["CHARGEBACK_REVERSED"] = 8] = "CHARGEBACK_REVERSED";
    SchedulingApiTransactionType[SchedulingApiTransactionType["SECOND_CHARGEBACK"] = 9] = "SECOND_CHARGEBACK";
    SchedulingApiTransactionType[SchedulingApiTransactionType["AUTO_DEBIT"] = 10] = "AUTO_DEBIT";
    SchedulingApiTransactionType[SchedulingApiTransactionType["AUTO_DEBIT_FAILED"] = 11] = "AUTO_DEBIT_FAILED";
    SchedulingApiTransactionType[SchedulingApiTransactionType["DR_PLANO_FEE_VAT"] = 12] = "DR_PLANO_FEE_VAT";
})(SchedulingApiTransactionType || (SchedulingApiTransactionType = {}));
export var SchedulingApiTransactionPaymentMethodType;
(function (SchedulingApiTransactionPaymentMethodType) {
    SchedulingApiTransactionPaymentMethodType[SchedulingApiTransactionPaymentMethodType["ONLINE_PAYMENT"] = 1] = "ONLINE_PAYMENT";
    SchedulingApiTransactionPaymentMethodType[SchedulingApiTransactionPaymentMethodType["PAYPAL"] = 2] = "PAYPAL";
    SchedulingApiTransactionPaymentMethodType[SchedulingApiTransactionPaymentMethodType["MISC"] = 3] = "MISC";
    SchedulingApiTransactionPaymentMethodType[SchedulingApiTransactionPaymentMethodType["POS"] = 4] = "POS";
})(SchedulingApiTransactionPaymentMethodType || (SchedulingApiTransactionPaymentMethodType = {}));
export var SchedulingApiTransactionTransferFundsState;
(function (SchedulingApiTransactionTransferFundsState) {
    SchedulingApiTransactionTransferFundsState[SchedulingApiTransactionTransferFundsState["OUTSTANDING"] = 1] = "OUTSTANDING";
    SchedulingApiTransactionTransferFundsState[SchedulingApiTransactionTransferFundsState["PENDING"] = 2] = "PENDING";
    SchedulingApiTransactionTransferFundsState[SchedulingApiTransactionTransferFundsState["SUCCESSFUL"] = 3] = "SUCCESSFUL";
})(SchedulingApiTransactionTransferFundsState || (SchedulingApiTransactionTransferFundsState = {}));
export class SchedulingApiWarningsBase extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'warnings');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'warnings',
            id: 'WARNINGS',
            primitiveType: PApiPrimitiveTypes.ApiList,
            canEdit: () => false,
            readMode: () => true,
        });
    }
    wrapItem(item, _generateMissingData) {
        const newWrapper = new SchedulingApiWarning(this.api);
        newWrapper._updateRawData(item, _generateMissingData);
        return newWrapper;
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return false;
    }
    createInstance(removeDestroyedItems) {
        return new SchedulingApiWarnings(this.api, removeDestroyedItems);
    }
    get dni() {
        return '28';
    }
    createNewItem(id = null) {
        const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('warnings');
        return newItem;
    }
}
export class SchedulingApiWarningBase extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiWarning);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'warning',
            id: 'WARNING',
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoText = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'text',
            id: 'WARNING_TEXT',
            primitiveType: PApiPrimitiveTypes.string,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoSeverity = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'severity',
            id: 'WARNING_SEVERITY',
            primitiveType: PApiPrimitiveTypes.Enum,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoConcernsMemberId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'concernsMemberId',
            id: 'WARNING_CONCERNS_MEMBER_ID',
            primitiveType: PApiPrimitiveTypes.Id,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoForSwapOfferId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'forSwapOfferId',
            id: 'WARNING_FOR_SWAP_OFFER_ID',
            primitiveType: PApiPrimitiveTypes.Id,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoForSwapOfferNewItemId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'forSwapOfferNewItemId',
            id: 'WARNING_FOR_SWAP_OFFER_NEW_ITEM_ID',
            primitiveType: PApiPrimitiveTypes.Integer,
            canEdit: () => false,
            readMode: () => true,
        });
        this.concernsMemberIdWrapper = null;
        this.forSwapOfferIdWrapper = null;
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  Text of this warning
     *
     * @type {string}
     */
    get text() {
        return this.data[1];
    }
    set textTestSetter(v) {
        this.setterImpl(1, v, 'text');
    }
    /**
     *  Severity level of this warning.
     *
     * @type {SchedulingApiWarningSeverity}
     */
    get severity() {
        return this.data[2];
    }
    set severityTestSetter(v) {
        this.setterImpl(2, v, 'severity');
    }
    /**
     *  Which member is concerned by this warning?
     *
     * @type {Id}
     */
    get concernsMemberId() {
        return this.concernsMemberIdWrapper;
    }
    set concernsMemberIdTestSetter(v) {
        this.setterImpl(3, v, 'concernsMemberId', () => { this.concernsMemberIdWrapper = v; });
    }
    /**
     *  To which swap offer does this warning belong?
     *
     * @type {Id}
     */
    get forSwapOfferId() {
        return this.forSwapOfferIdWrapper;
    }
    set forSwapOfferIdTestSetter(v) {
        this.setterImpl(4, v, 'forSwapOfferId', () => { this.forSwapOfferIdWrapper = v; });
    }
    /**
     *  To which swap offer newItemId does this warning belong?
     *
     * @type {Integer}
     */
    get forSwapOfferNewItemId() {
        return this.data[5];
    }
    set forSwapOfferNewItemIdTestSetter(v) {
        this.setterImpl(5, v, 'forSwapOfferNewItemId');
    }
    _fixIds(_idReplacements) {
        this.data[3] = Meta.getReplacedId(this.data[3], _idReplacements);
        this.concernsMemberIdWrapper = Id.create(this.data[3]);
        this.data[4] = Meta.getReplacedId(this.data[4], _idReplacements);
        this.forSwapOfferIdWrapper = Id.create(this.data[4]);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 6);
        }
        // propagate new raw data to children
        if (!Meta.isSameId(data ? data[3] : null, this.concernsMemberIdWrapper))
            this.concernsMemberIdWrapper = data && data[3] ? Id.create(data[3]) : null;
        if (!Meta.isSameId(data ? data[4] : null, this.forSwapOfferIdWrapper))
            this.forSwapOfferIdWrapper = data && data[4] ? Id.create(data[4]) : null;
    }
    get dni() {
        return '538';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '538', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export var SchedulingApiWarningSeverity;
(function (SchedulingApiWarningSeverity) {
    SchedulingApiWarningSeverity[SchedulingApiWarningSeverity["INFO"] = 1] = "INFO";
    SchedulingApiWarningSeverity[SchedulingApiWarningSeverity["WARNING"] = 2] = "WARNING";
    SchedulingApiWarningSeverity[SchedulingApiWarningSeverity["FATAL"] = 3] = "FATAL";
})(SchedulingApiWarningSeverity || (SchedulingApiWarningSeverity = {}));
export class SchedulingApiEvaluation extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiEvaluation);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'evaluation',
            id: 'EVALUATION',
            show: function () {
                console.error('AttributeInfo for /scheduling -> EVALUATION is not implemented yet. Please create a Jira issue in the current Sprint: https://drplano.atlassian.net/secure/CreateIssueDetails!init.jspa?pid=10003&issuetype=10101&summary=' + encodeURI('AttributeInfo for /scheduling -> EVALUATION is not implemented yet') + '&assignee=557058%3Ae58fd015-3e1d-44b8-9131-aef274b1c571');
                return true;
            },
            canEdit: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return true;
                }
                return false;
            },
        });
        this.attributeInfoGenerate = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'generate',
            id: 'EVALUATION_GENERATE',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  Should a report be generated? Currently this report is being send by email to the requester.
     *
     * @type {boolean}
     */
    get generate() {
        return this.data[1];
    }
    set generate(v) {
        this.setterImpl(1, v, 'generate');
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 2);
            data[1] = false;
        }
        // propagate new raw data to children
    }
    get dni() {
        return '29';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '29', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class SchedulingApiAdyenAccountBase extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiAdyenAccount);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'adyenAccount',
            id: 'ADYEN_ACCOUNT',
            show: function () {
                if (!(((this.api.rightsService.canReadAndWriteBookingSystemSettings)))) {
                    return false;
                }
                return true;
            },
        });
        this.attributeInfoBalance = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'balance',
            id: 'ADYEN_ACCOUNT_BALANCE',
            primitiveType: PApiPrimitiveTypes.Currency,
            show: function () {
                console.error('AttributeInfo for /scheduling -> ADYEN_ACCOUNT_BALANCE is not implemented yet. Please create a Jira issue in the current Sprint: https://drplano.atlassian.net/secure/CreateIssueDetails!init.jspa?pid=10003&issuetype=10101&summary=' + encodeURI('AttributeInfo for /scheduling -> ADYEN_ACCOUNT_BALANCE is not implemented yet') + '&assignee=557058%3Ae58fd015-3e1d-44b8-9131-aef274b1c571');
                return true;
            },
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoAccountHolderState = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'accountHolderState',
            id: 'ADYEN_ACCOUNT_HOLDER_STATE',
            primitiveType: PApiPrimitiveTypes.Enum,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoAccountHolderPayoutState = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'accountHolderPayoutState',
            id: 'ADYEN_ACCOUNT_HOLDER_PAYOUT_STATE',
            primitiveType: PApiPrimitiveTypes.Enum,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoAccountHolderProcessingState = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'accountHolderProcessingState',
            id: 'ADYEN_ACCOUNT_HOLDER_PROCESSING_STATE',
            primitiveType: PApiPrimitiveTypes.Enum,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoOnboardingUrl = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'onboardingUrl',
            id: 'ADYEN_ACCOUNT_ONBOARDING_URL',
            primitiveType: PApiPrimitiveTypes.Url,
            show: function () {
                if (!(((this.api.rightsService.canReadAndWriteBookingSystemSettings)))) {
                    return false;
                }
                return true;
            },
            canEdit: function () {
                if (!((!this.adyenOnboardingButtonDisabled) && ((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return true;
                }
                return false;
            },
            vars: {
                cannotEditHint: () => { return !this.allCheckboxesAccepted ? 'Bevor du weitermachen kannst, musst du die Nutzungsbedingungen akzeptieren und die Checkboxen ankreuzen.' : (this.isClosedOrSuspended ? 'Dein Account ist zurzeit leider gesperrt! Falls du die Online-Zahlung wieder nutzen möchtest, melde dich bitte bei uns.' : 'Du hast leider keine Berechtigung hierfür. Wende dich bitte an deine Admins.'); },
            }
        });
        this.attributeInfoDeadlineDate = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'deadlineDate',
            id: 'ADYEN_ACCOUNT_DEADLINE_DATE',
            primitiveType: PApiPrimitiveTypes.DateTime,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoUpcomingDeadlineState = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'upcomingDeadlineState',
            id: 'ADYEN_ACCOUNT_UPCOMING_DEADLINE_STATE',
            primitiveType: PApiPrimitiveTypes.string,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoTestingDesiredDeposit = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'testingDesiredDeposit',
            id: 'ADYEN_ACCOUNT_TESTING_DESIRED_DEPOSIT',
            primitiveType: PApiPrimitiveTypes.Currency,
            show: function () {
                return true;
            },
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoTestingAccountHolderCode = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'testingAccountHolderCode',
            id: 'ADYEN_ACCOUNT_TESTING_ACCOUNT_HOLDER_CODE',
            primitiveType: PApiPrimitiveTypes.string,
            show: function () {
                return true;
            },
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoTestingAccountHolderPaymentAccount = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'testingAccountHolderPaymentAccount',
            id: 'ADYEN_ACCOUNT_TESTING_ACCOUNT_HOLDER_PAYMENT_ACCOUNT',
            primitiveType: PApiPrimitiveTypes.string,
            show: function () {
                return true;
            },
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoTestingLiablePaymentAccount = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'testingLiablePaymentAccount',
            id: 'ADYEN_ACCOUNT_TESTING_LIABLE_PAYMENT_ACCOUNT',
            primitiveType: PApiPrimitiveTypes.string,
            show: function () {
                return true;
            },
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoOnboardingActionRequiredOrPending = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'onboardingActionRequiredOrPending',
            id: 'ADYEN_ACCOUNT_ONBOARDING_ACTION_REQUIRED_OR_PENDING',
            primitiveType: PApiPrimitiveTypes.boolean,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoPayoutSchedule = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'payoutSchedule',
            id: 'ADYEN_ACCOUNT_PAYOUT_SCHEDULE',
            primitiveType: PApiPrimitiveTypes.Enum,
            show: function () {
                if (!((this.accountHolderState !== SchedulingApiAccountHolderState.NOT_INITIALIZED))) {
                    return false;
                }
                return true;
            },
            canEdit: function () {
                if (!((!this.adyenOnboardingButtonDisabled) && ((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return true;
                }
                return false;
            },
        });
        this.attributeInfoNextPayoutDate = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'nextPayoutDate',
            id: 'ADYEN_ACCOUNT_NEXT_PAYOUT_DATE',
            primitiveType: PApiPrimitiveTypes.DateTime,
            show: function () {
                if (!((this.accountHolderPayoutState === SchedulingApiAccountHolderPayoutState.PAYOUT_ALLOWED) && ((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            canEdit: () => false,
            readMode: () => true,
        });
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  Current online payment account balance.
     *
     * @type {Currency}
     */
    get balance() {
        return this.data[1];
    }
    set balanceTestSetter(v) {
        this.setterImpl(1, v, 'balance');
    }
    /**
     *  AccountHolder State for Adyen
     *
     * @type {SchedulingApiAccountHolderState}
     */
    get accountHolderState() {
        return this.data[2];
    }
    set accountHolderStateTestSetter(v) {
        this.setterImpl(2, v, 'accountHolderState');
    }
    /**
     *  AccountHolder-Payout State for Adyen
     *
     * @type {SchedulingApiAccountHolderPayoutState}
     */
    get accountHolderPayoutState() {
        return this.data[3];
    }
    set accountHolderPayoutStateTestSetter(v) {
        this.setterImpl(3, v, 'accountHolderPayoutState');
    }
    /**
     *  AccountHolder-Processing State for Adyen
     *
     * @type {SchedulingApiAccountHolderProcessingState}
     */
    get accountHolderProcessingState() {
        return this.data[4];
    }
    set accountHolderProcessingStateTestSetter(v) {
        this.setterImpl(4, v, 'accountHolderProcessingState');
    }
    /**
     *  Onboarding URL for Adyen, only used as a response. Set "generate" to trigger url generation. Returns "not created" if the AdyenAccount was not yet created.
     *
     * @type {Url}
     */
    get onboardingUrl() {
        return this.data[5];
    }
    set onboardingUrl(v) {
        this.setterImpl(5, v, 'onboardingUrl');
    }
    /**
     *  Deadline Date. The account has time until this date to take actions to prevent his account from getting banned etc.
     *
     * @type {DateTime}
     */
    get deadlineDate() {
        return this.data[6];
    }
    set deadlineDateTestSetter(v) {
        this.setterImpl(6, v, 'deadlineDate');
    }
    /**
     *  Next state, thats coming, when the deadline passed without action.
     *
     * @type {string}
     */
    get upcomingDeadlineState() {
        return this.data[7];
    }
    set upcomingDeadlineStateTestSetter(v) {
        this.setterImpl(7, v, 'upcomingDeadlineState');
    }
    /**
     *  What is the current desired deposit? Only send in test environment.
     *
     * @type {Currency}
     */
    get testingDesiredDeposit() {
        return this.data[8];
    }
    set testingDesiredDepositTestSetter(v) {
        this.setterImpl(8, v, 'testingDesiredDeposit');
    }
    /**
     *  Adyen sub-merchants account-holder-code.
     *
     * @type {string}
     */
    get testingAccountHolderCode() {
        return this.data[9];
    }
    set testingAccountHolderCodeTestSetter(v) {
        this.setterImpl(9, v, 'testingAccountHolderCode');
    }
    /**
     *  Adyen sub-merchants account-holder payment account.
     *
     * @type {string}
     */
    get testingAccountHolderPaymentAccount() {
        return this.data[10];
    }
    set testingAccountHolderPaymentAccountTestSetter(v) {
        this.setterImpl(10, v, 'testingAccountHolderPaymentAccount');
    }
    /**
     *  our Adyen Liable-Account's payment account.
     *
     * @type {string}
     */
    get testingLiablePaymentAccount() {
        return this.data[11];
    }
    set testingLiablePaymentAccountTestSetter(v) {
        this.setterImpl(11, v, 'testingLiablePaymentAccount');
    }
    /**
     *  Indicates whether there is an Action required regarding Onboarding or it is in Pending process
     *
     * @type {boolean}
     */
    get onboardingActionRequiredOrPending() {
        return this.data[12];
    }
    set onboardingActionRequiredOrPendingTestSetter(v) {
        this.setterImpl(12, v, 'onboardingActionRequiredOrPending');
    }
    /**
     *  AccountHolder-Payout-Schedule for this Adyen Account Holder
     *
     * @type {SchedulingApiAccountHolderPayoutSchedule}
     */
    get payoutSchedule() {
        return this.data[13];
    }
    set payoutSchedule(v) {
        this.setterImpl(13, v, 'payoutSchedule');
    }
    /**
     *  The next PayoutDate for this Adyen-AccountHolder. If this date would be in the past, return start of current day. May be null when payout is disabled
     *
     * @type {DateTime}
     */
    get nextPayoutDate() {
        return this.data[14];
    }
    set nextPayoutDateTestSetter(v) {
        this.setterImpl(14, v, 'nextPayoutDate');
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 15);
            data[12] = false;
        }
        // propagate new raw data to children
    }
    get dni() {
        return '32';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '32', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export var SchedulingApiAccountHolderState;
(function (SchedulingApiAccountHolderState) {
    SchedulingApiAccountHolderState[SchedulingApiAccountHolderState["NOT_INITIALIZED"] = 1] = "NOT_INITIALIZED";
    SchedulingApiAccountHolderState[SchedulingApiAccountHolderState["INITIAL_ONBOARDING"] = 2] = "INITIAL_ONBOARDING";
    SchedulingApiAccountHolderState[SchedulingApiAccountHolderState["INACTIVE"] = 3] = "INACTIVE";
    SchedulingApiAccountHolderState[SchedulingApiAccountHolderState["ACTIVE"] = 4] = "ACTIVE";
    SchedulingApiAccountHolderState[SchedulingApiAccountHolderState["SUSPENDED"] = 5] = "SUSPENDED";
    SchedulingApiAccountHolderState[SchedulingApiAccountHolderState["CLOSED"] = 6] = "CLOSED";
})(SchedulingApiAccountHolderState || (SchedulingApiAccountHolderState = {}));
export var SchedulingApiAccountHolderPayoutState;
(function (SchedulingApiAccountHolderPayoutState) {
    SchedulingApiAccountHolderPayoutState[SchedulingApiAccountHolderPayoutState["PAYOUT_ALLOWED"] = 1] = "PAYOUT_ALLOWED";
    SchedulingApiAccountHolderPayoutState[SchedulingApiAccountHolderPayoutState["PAYOUT_DISABLED"] = 2] = "PAYOUT_DISABLED";
})(SchedulingApiAccountHolderPayoutState || (SchedulingApiAccountHolderPayoutState = {}));
export var SchedulingApiAccountHolderProcessingState;
(function (SchedulingApiAccountHolderProcessingState) {
    SchedulingApiAccountHolderProcessingState[SchedulingApiAccountHolderProcessingState["PROCESSING_ALLOWED"] = 1] = "PROCESSING_ALLOWED";
    SchedulingApiAccountHolderProcessingState[SchedulingApiAccountHolderProcessingState["PROCESSING_DISABLED"] = 2] = "PROCESSING_DISABLED";
})(SchedulingApiAccountHolderProcessingState || (SchedulingApiAccountHolderProcessingState = {}));
export var SchedulingApiAccountHolderPayoutSchedule;
(function (SchedulingApiAccountHolderPayoutSchedule) {
    SchedulingApiAccountHolderPayoutSchedule[SchedulingApiAccountHolderPayoutSchedule["WEEKLY"] = 1] = "WEEKLY";
    SchedulingApiAccountHolderPayoutSchedule[SchedulingApiAccountHolderPayoutSchedule["BIWEEKLY"] = 2] = "BIWEEKLY";
    SchedulingApiAccountHolderPayoutSchedule[SchedulingApiAccountHolderPayoutSchedule["MONTHLY"] = 3] = "MONTHLY";
})(SchedulingApiAccountHolderPayoutSchedule || (SchedulingApiAccountHolderPayoutSchedule = {}));
export class SchedulingApiReCaptchaWhiteListedHostNames extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'reCaptchaWhiteListedHostNames');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'reCaptchaWhiteListedHostNames',
            id: 'RE_CAPTCHA_WHITE_LISTED_HOST_NAMES',
            primitiveType: PApiPrimitiveTypes.ApiList,
            show: function () {
                return true;
            },
            canEdit: function () {
                if (!(((this.api.rightsService.canReadAndWriteBookingSystemSettings)))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.canReadAndWriteBookingSystemSettings)))) {
                    return true;
                }
                return false;
            },
        });
        this.attributeInfoReCaptchaWhiteListedHostName = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'reCaptchaWhiteListedHostName',
            id: 'RE_CAPTCHA_WHITE_LISTED_HOST_NAME',
            primitiveType: PApiPrimitiveTypes.Url,
        });
    }
    wrapItem(item, _generateMissingData) {
        return item;
    }
    containsPrimitives() {
        return true;
    }
    containsIds() {
        return false;
    }
    createInstance(removeDestroyedItems) {
        return new SchedulingApiReCaptchaWhiteListedHostNames(this.api, removeDestroyedItems);
    }
    get dni() {
        return '34';
    }
    createNewItem() {
        const newItemRaw = null;
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('reCaptchaWhiteListedHostNames');
        return newItem;
    }
}
export class SchedulingApiMailsSentToBookingPerson extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'mailsSentToBookingPerson');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'mailsSentToBookingPerson',
            id: 'MAILS_SENT_TO_BOOKING_PERSON',
            primitiveType: PApiPrimitiveTypes.ApiList,
            show: function () {
                return true;
            },
        });
    }
    wrapItem(item, _generateMissingData) {
        const newWrapper = new SchedulingApiMailSentToBookingPerson(this.api);
        newWrapper._updateRawData(item, _generateMissingData);
        return newWrapper;
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return false;
    }
    createInstance(removeDestroyedItems) {
        return new SchedulingApiMailsSentToBookingPerson(this.api, removeDestroyedItems);
    }
    get dni() {
        return '35';
    }
    createNewItem(id = null) {
        const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('mailsSentToBookingPerson');
        return newItem;
    }
}
export class SchedulingApiMailSentToBookingPersonBase extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiMailSentToBookingPerson);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'mailSentToBookingPerson',
            id: 'MAIL_SENT_TO_BOOKING_PERSON',
        });
        this.attributeInfoDateTime = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'dateTime',
            id: 'MAIL_SENT_TO_BOOKING_PERSON_DATE_TIME',
            primitiveType: PApiPrimitiveTypes.DateTime,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoEventType = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'eventType',
            id: 'MAIL_SENT_TO_BOOKING_PERSON_EVENT_TYPE',
            primitiveType: PApiPrimitiveTypes.Enum,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoRecipientEmail = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'recipientEmail',
            id: 'MAIL_SENT_TO_BOOKING_PERSON_RECIPIENT_EMAIL',
            primitiveType: PApiPrimitiveTypes.Email,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoSubject = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'subject',
            id: 'MAIL_SENT_TO_BOOKING_PERSON_SUBJECT',
            primitiveType: PApiPrimitiveTypes.string,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoText = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'text',
            id: 'MAIL_SENT_TO_BOOKING_PERSON_TEXT',
            primitiveType: PApiPrimitiveTypes.string,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoResendRequesterId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'resendRequesterId',
            id: 'MAIL_SENT_TO_BOOKING_PERSON_RESEND_REQUESTER_ID',
            primitiveType: PApiPrimitiveTypes.Id,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoResend = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'resend',
            id: 'MAIL_SENT_TO_BOOKING_PERSON_RESEND',
            primitiveType: PApiPrimitiveTypes.boolean,
            canEdit: function () {
                if (!((this.api.currentlyDetailedLoaded.attributeInfoThis.canEdit) && (!this.api.currentlyDetailedLoaded.isAnonymized))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
        });
        this.resendRequesterIdWrapper = null;
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  When was this mail sent?
     *
     * @type {DateTime}
     */
    get dateTime() {
        return this.data[1];
    }
    set dateTimeTestSetter(v) {
        this.setterImpl(1, v, 'dateTime');
    }
    /**
     *  The event which triggered this mail.
     *
     * @type {SchedulingApiCustomBookableMailEventType}
     */
    get eventType() {
        return this.data[2];
    }
    set eventTypeTestSetter(v) {
        this.setterImpl(2, v, 'eventType');
    }
    /**
     *  The recipient mail address.
     *
     * @type {Email}
     */
    get recipientEmail() {
        return this.data[3];
    }
    set recipientEmailTestSetter(v) {
        this.setterImpl(3, v, 'recipientEmail');
    }
    /**
     *  Subject of the mail.
     *
     * @type {string}
     */
    get subject() {
        return this.data[4];
    }
    set subjectTestSetter(v) {
        this.setterImpl(4, v, 'subject');
    }
    /**
     *  Text of the mail. Note that this will contain html code as we send html mails.
     *
     * @type {string}
     */
    get text() {
        return this.data[5];
    }
    set textTestSetter(v) {
        this.setterImpl(5, v, 'text');
    }
    /**
     *  If this mail is a manually triggered resend, then this returns the member-id who requester the resend.
     *
     * @type {Id}
     */
    get resendRequesterId() {
        return this.resendRequesterIdWrapper;
    }
    set resendRequesterIdTestSetter(v) {
        this.setterImpl(6, v, 'resendRequesterId', () => { this.resendRequesterIdWrapper = v; });
    }
    /**
     *  Set this to "true" to trigger a resend of the mail. Note that the mail will be send to booking-persons current mail address.
     *
     * @type {boolean}
     */
    get resend() {
        return this.data[7];
    }
    set resend(v) {
        this.setterImpl(7, v, 'resend');
    }
    _fixIds(_idReplacements) {
        this.data[6] = Meta.getReplacedId(this.data[6], _idReplacements);
        this.resendRequesterIdWrapper = Id.create(this.data[6]);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 8);
            data[7] = false;
        }
        // propagate new raw data to children
        if (!Meta.isSameId(data ? data[6] : null, this.resendRequesterIdWrapper))
            this.resendRequesterIdWrapper = data && data[6] ? Id.create(data[6]) : null;
    }
    get dni() {
        return '567';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '567', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class SchedulingApiMessages extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiMessages);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'messages',
            id: 'MESSAGES',
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoRemovedDuplicateReCaptchaWhiteListedHostName = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'removedDuplicateReCaptchaWhiteListedHostName',
            id: 'MESSAGES_REMOVED_DUPLICATE_RE_CAPTCHA_WHITE_LISTED_HOST_NAME',
            primitiveType: PApiPrimitiveTypes.boolean,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoOnlineRefundInfo = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'onlineRefundInfo',
            id: 'MESSAGES_ONLINE_REFUND_INFO',
            primitiveType: PApiPrimitiveTypes.Enum,
            canEdit: () => false,
            readMode: () => true,
        });
        this.customBookableMailsInfoWrapper = new SchedulingApiMessagesCustomBookableMailsInfo(this.api);
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
        this.customBookableMailsInfoWrapper.parent = this;
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  When adding a white-listed host-name, has backend automatically removed it again because it was a duplicate value?
     *
     * @type {boolean}
     */
    get removedDuplicateReCaptchaWhiteListedHostName() {
        return this.data[1];
    }
    set removedDuplicateReCaptchaWhiteListedHostNameTestSetter(v) {
        this.setterImpl(1, v, 'removedDuplicateReCaptchaWhiteListedHostName');
    }
    /**
     *  Tells if an online refund could be executed or not.
     *
     * @type {SchedulingApiOnlineRefundInfo}
     */
    get onlineRefundInfo() {
        return this.data[2];
    }
    set onlineRefundInfoTestSetter(v) {
        this.setterImpl(2, v, 'onlineRefundInfo');
    }
    /**
     *  This object contains information about send custom-bookable-mails.
     */
    get customBookableMailsInfo() {
        return this.customBookableMailsInfoWrapper;
    }
    set customBookableMailsInfoTestSetter(v) {
        this.setterImpl(3, v.rawData, 'customBookableMailsInfo', () => { this.customBookableMailsInfoWrapper = v; });
    }
    _fixIds(_idReplacements) {
        this.customBookableMailsInfoWrapper._fixIds(_idReplacements);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 4);
            data[1] = false;
            if (data[3] === null)
                data[3] = Meta.createNewObject(false);
        }
        // propagate new raw data to children
        this.customBookableMailsInfoWrapper._updateRawData(data ? data[3] : null, generateMissingData);
    }
    get dni() {
        return '36';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '36', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export var SchedulingApiOnlineRefundInfo;
(function (SchedulingApiOnlineRefundInfo) {
    SchedulingApiOnlineRefundInfo[SchedulingApiOnlineRefundInfo["ONLINE_REFUND_FAILED"] = 1] = "ONLINE_REFUND_FAILED";
    SchedulingApiOnlineRefundInfo[SchedulingApiOnlineRefundInfo["ONLINE_REFUND_PARTIALLY"] = 2] = "ONLINE_REFUND_PARTIALLY";
    SchedulingApiOnlineRefundInfo[SchedulingApiOnlineRefundInfo["ONLINE_REFUND_SUCCESSFUL"] = 3] = "ONLINE_REFUND_SUCCESSFUL";
})(SchedulingApiOnlineRefundInfo || (SchedulingApiOnlineRefundInfo = {}));
export class SchedulingApiMessagesCustomBookableMailsInfo extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiMessagesCustomBookableMailsInfo);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'customBookableMailsInfo',
            id: 'MESSAGES_CUSTOM_BOOKABLE_MAILS_INFO',
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoAffectedShiftModelId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'affectedShiftModelId',
            id: 'MESSAGES_CUSTOM_BOOKABLE_MAILS_INFO_AFFECTED_SHIFT_MODEL_ID',
            primitiveType: PApiPrimitiveTypes.Id,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoEventTriggered = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'eventTriggered',
            id: 'MESSAGES_CUSTOM_BOOKABLE_MAILS_INFO_EVENT_TRIGGERED',
            primitiveType: PApiPrimitiveTypes.boolean,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoEmailSendToBookingPerson = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'emailSendToBookingPerson',
            id: 'MESSAGES_CUSTOM_BOOKABLE_MAILS_INFO_EMAIL_SEND_TO_BOOKING_PERSON',
            primitiveType: PApiPrimitiveTypes.boolean,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoEmailSendToParticipants = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'emailSendToParticipants',
            id: 'MESSAGES_CUSTOM_BOOKABLE_MAILS_INFO_EMAIL_SEND_TO_PARTICIPANTS',
            primitiveType: PApiPrimitiveTypes.boolean,
            canEdit: () => false,
            readMode: () => true,
        });
        this.affectedShiftModelIdWrapper = null;
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  The shift-model for which custom-bookable-mail events were triggered. If events for multiple shift-models have been triggered this returns the last shift-model.
     *
     * @type {Id}
     */
    get affectedShiftModelId() {
        return this.affectedShiftModelIdWrapper;
    }
    set affectedShiftModelIdTestSetter(v) {
        this.setterImpl(1, v, 'affectedShiftModelId', () => { this.affectedShiftModelIdWrapper = v; });
    }
    /**
     *  Was a custom-bookable-mail event triggered?
     *
     * @type {boolean}
     */
    get eventTriggered() {
        return this.data[2];
    }
    set eventTriggeredTestSetter(v) {
        this.setterImpl(2, v, 'eventTriggered');
    }
    /**
     *  Was an email send to booking person?
     *
     * @type {boolean}
     */
    get emailSendToBookingPerson() {
        return this.data[3];
    }
    set emailSendToBookingPersonTestSetter(v) {
        this.setterImpl(3, v, 'emailSendToBookingPerson');
    }
    /**
     *  Was an email send to participants?
     *
     * @type {boolean}
     */
    get emailSendToParticipants() {
        return this.data[4];
    }
    set emailSendToParticipantsTestSetter(v) {
        this.setterImpl(4, v, 'emailSendToParticipants');
    }
    _fixIds(_idReplacements) {
        this.data[1] = Meta.getReplacedId(this.data[1], _idReplacements);
        this.affectedShiftModelIdWrapper = Id.create(this.data[1]);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 5);
            data[2] = false;
            data[3] = false;
            data[4] = false;
        }
        // propagate new raw data to children
        if (!Meta.isSameId(data ? data[1] : null, this.affectedShiftModelIdWrapper))
            this.affectedShiftModelIdWrapper = data && data[1] ? Id.create(data[1]) : null;
    }
    get dni() {
        return '561';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '561', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class SchedulingApiShiftChangeSelectorBase extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiShiftChangeSelector);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'shiftChangeSelector',
            id: 'SHIFT_CHANGE_SELECTOR',
        });
        this.attributeInfoShiftModelId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'shiftModelId',
            id: 'SHIFT_CHANGE_SELECTOR_SHIFT_MODEL_ID',
            primitiveType: PApiPrimitiveTypes.Id,
        });
        this.attributeInfoShiftsOfShiftModelId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'shiftsOfShiftModelId',
            id: 'SHIFT_CHANGE_SELECTOR_SHIFTS_OF_SHIFT_MODEL_ID',
            primitiveType: PApiPrimitiveTypes.Id,
        });
        this.attributeInfoShiftsOfShiftModelVersion = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'shiftsOfShiftModelVersion',
            id: 'SHIFT_CHANGE_SELECTOR_SHIFTS_OF_SHIFT_MODEL_VERSION',
            primitiveType: PApiPrimitiveTypes.Integer,
        });
        this.attributeInfoShiftsOfSeriesId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'shiftsOfSeriesId',
            id: 'SHIFT_CHANGE_SELECTOR_SHIFTS_OF_SERIES_ID',
            primitiveType: PApiPrimitiveTypes.Integer,
        });
        this.attributeInfoShiftsOfPacketIndex = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'shiftsOfPacketIndex',
            id: 'SHIFT_CHANGE_SELECTOR_SHIFTS_OF_PACKET_INDEX',
            primitiveType: PApiPrimitiveTypes.Integer,
        });
        this.attributeInfoStart = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'start',
            id: 'SHIFT_CHANGE_SELECTOR_START',
            primitiveType: PApiPrimitiveTypes.Date,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min((this.api.currentlyDetailedLoaded instanceof SchedulingApiShift) ? +this.api.pMoment.m(this.api.currentlyDetailedLoaded.id.start).add(-5, 'months') :
                            +this.api.pMoment.monthsFromNow(-5), true, PApiPrimitiveTypes.Date, undefined, undefined);
                        return null;
                    },
                    () => {
                        return this.api.validators.max(() => this.end, false, PApiPrimitiveTypes.Date, 'SHIFT_CHANGE_SELECTOR_END', undefined);
                        return null;
                    },
                    () => {
                        return this.api.validators.notUndefined(PApiPrimitiveTypes.Date, undefined);
                    },
                ];
            },
        });
        this.attributeInfoEnd = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'end',
            id: 'SHIFT_CHANGE_SELECTOR_END',
            primitiveType: PApiPrimitiveTypes.DateExclusiveEnd,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(() => this.start, false, PApiPrimitiveTypes.DateExclusiveEnd, 'SHIFT_CHANGE_SELECTOR_START', undefined);
                        return null;
                    },
                    () => {
                        return this.api.validators.max((this.api.currentlyDetailedLoaded instanceof SchedulingApiShift) ? +this.api.pMoment.m(this.api.currentlyDetailedLoaded.id.start).add(12, 'months') :
                            +this.api.pMoment.monthsFromNow(12), true, PApiPrimitiveTypes.DateExclusiveEnd, undefined, undefined);
                        return null;
                    },
                    () => {
                        return this.api.validators.notUndefined(PApiPrimitiveTypes.DateExclusiveEnd, undefined);
                    },
                ];
            },
        });
        this.shiftModelIdWrapper = null;
        this.shiftsOfShiftModelIdWrapper = null;
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  The model id to which the changes should be applied.
     *
     * @type {Id}
     */
    get shiftModelId() {
        return this.shiftModelIdWrapper;
    }
    set shiftModelId(v) {
        this.setterImpl(1, v, 'shiftModelId', () => { this.shiftModelIdWrapper = v; });
    }
    /**
     *  The model id whose shifts the changes should be applied to.
     *
     * @type {Id}
     */
    get shiftsOfShiftModelId() {
        return this.shiftsOfShiftModelIdWrapper;
    }
    set shiftsOfShiftModelId(v) {
        this.setterImpl(2, v, 'shiftsOfShiftModelId', () => { this.shiftsOfShiftModelIdWrapper = v; });
    }
    /**
     *  The model version whose shifts the changes should be applied to.
     *
     * @type {Integer}
     */
    get shiftsOfShiftModelVersion() {
        return this.data[3];
    }
    set shiftsOfShiftModelVersion(v) {
        this.setterImpl(3, v, 'shiftsOfShiftModelVersion');
    }
    /**
     *  The series id whose shifts the changes should be applied to.
     *
     * @type {Integer}
     */
    get shiftsOfSeriesId() {
        return this.data[4];
    }
    set shiftsOfSeriesId(v) {
        this.setterImpl(4, v, 'shiftsOfSeriesId');
    }
    /**
     *  The packet index whose shifts the changes should be applied to.
     *
     * @type {Integer}
     */
    get shiftsOfPacketIndex() {
        return this.data[5];
    }
    set shiftsOfPacketIndex(v) {
        this.setterImpl(5, v, 'shiftsOfPacketIndex');
    }
    /**
     *  The start of the time interval from where the shifts should be modified. When "null" all shifts into the past will be modified.
     *
     * @type {Date}
     */
    get start() {
        return this.data[6];
    }
    set start(v) {
        this.setterImpl(6, v, 'start');
    }
    /**
     *  The end of the time interval from where the shifts should be modified. When "null" all shifts in the future will be modified.
     *
     * @type {DateExclusiveEnd}
     */
    get end() {
        return this.data[7];
    }
    set end(v) {
        this.setterImpl(7, v, 'end');
    }
    _fixIds(_idReplacements) {
        this.data[1] = Meta.getReplacedId(this.data[1], _idReplacements);
        this.shiftModelIdWrapper = Id.create(this.data[1]);
        this.data[2] = Meta.getReplacedId(this.data[2], _idReplacements);
        this.shiftsOfShiftModelIdWrapper = Id.create(this.data[2]);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 8);
        }
        // propagate new raw data to children
        if (!Meta.isSameId(data ? data[1] : null, this.shiftModelIdWrapper))
            this.shiftModelIdWrapper = data && data[1] ? Id.create(data[1]) : null;
        if (!Meta.isSameId(data ? data[2] : null, this.shiftsOfShiftModelIdWrapper))
            this.shiftsOfShiftModelIdWrapper = data && data[2] ? Id.create(data[2]) : null;
    }
    get dni() {
        return '37';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '37', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class SchedulingApiAutomaticBookingCancellationSettings extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SchedulingApiAutomaticBookingCancellationSettings);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'automaticBookingCancellationSettings',
            id: 'AUTOMATIC_BOOKING_CANCELLATION_SETTINGS',
            show: function () {
                if (!((this.api.currentlyDetailedLoaded instanceof SchedulingApiShift && this.api.currentlyDetailedLoaded.model.isCourse))) {
                    return false;
                }
                return true;
            },
        });
        this.attributeInfoNoCancellationFees = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'noCancellationFees',
            id: 'AUTOMATIC_BOOKING_CANCELLATION_SETTINGS_NO_CANCELLATION_FEES',
            primitiveType: PApiPrimitiveTypes.boolean,
            show: function () {
                if (!((this.api.affectedShiftsApi.data.bookingsCanceledCount > 0))) {
                    return false;
                }
                return true;
            },
        });
        this.attributeInfoAutomaticOnlineRefund = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'automaticOnlineRefund',
            id: 'AUTOMATIC_BOOKING_CANCELLATION_SETTINGS_AUTOMATIC_ONLINE_REFUND',
            primitiveType: PApiPrimitiveTypes.boolean,
            show: function () {
                if (!((this.parent.isOnlinePaymentAvailable) && (this.api.affectedShiftsApi.data.bookingsCanceledCount + this.api.affectedShiftsApi.data.bookingsDeclinedCount > 0))) {
                    return false;
                }
                return true;
            },
            canEdit: function () {
                if (!((this.api.rightsService.userCanOnlineRefund(this.api.currentlyDetailedLoaded.model)))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
            vars: {
                cannotEditHint: 'Du hast keine Berechtigung, Online-Rückerstattungen an Kunden zu veranlassen. Wende dich bitte an deine Personalleitung, falls das geändert werden soll.',
            }
        });
        this.attributeInfoTransactionInternalComment = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'transactionInternalComment',
            id: 'AUTOMATIC_BOOKING_CANCELLATION_SETTINGS_TRANSACTION_INTERNAL_COMMENT',
            primitiveType: PApiPrimitiveTypes.string,
            show: function () {
                if (!((this.automaticOnlineRefund))) {
                    return false;
                }
                return true;
            },
        });
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  If "true" no cancellation-fees will be set for the automatically cancelled bookings. If "false" then cancellation-fees defined by the bookings cancellation-policy will be added to the booking.
     *
     * @type {boolean}
     */
    get noCancellationFees() {
        return this.data[1];
    }
    set noCancellationFees(v) {
        this.setterImpl(1, v, 'noCancellationFees');
    }
    /**
     *  Should automatically any online open-amount for the booking be refunded?
     *
     * @type {boolean}
     */
    get automaticOnlineRefund() {
        return this.data[2];
    }
    set automaticOnlineRefund(v) {
        this.setterImpl(2, v, 'automaticOnlineRefund');
    }
    /**
     *  If automatic online refund should be done then this defines the internal comment to be set for the created transactions.
     *
     * @type {string}
     */
    get transactionInternalComment() {
        return this.data[3];
    }
    set transactionInternalComment(v) {
        this.setterImpl(3, v, 'transactionInternalComment');
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 4);
            data[1] = false;
            data[2] = false;
        }
        // propagate new raw data to children
    }
    get dni() {
        return '38';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '38', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
//# sourceMappingURL=scheduling-api.service.ag.js.map