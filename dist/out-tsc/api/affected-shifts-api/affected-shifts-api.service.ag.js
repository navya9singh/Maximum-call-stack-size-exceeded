var _a, _b, _c, _d;
import { __decorate, __metadata } from "tslib";
import { Injectable, NgZone, Injector } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Router } from '@angular/router';
import { ApiBase } from '@plano/shared/api/base/api-base';
import { Id } from '@plano/shared/api/base/id';
import { Meta } from '@plano/shared/api/base/meta';
import { ApiAttributeInfo } from '@plano/shared/api/base/api-attribute-info';
import { PApiPrimitiveTypes } from '@plano/shared/api/base/generated-types.ag';
import { ShiftId, ApiListWrapper, ApiObjectWrapper } from '@plano/shared/api';
import { ApiErrorService } from '@plano/shared/api/api-error.service';
import { AffectedShiftsApiShifts } from '@plano/shared/api';
import { AffectedShiftsApiShift } from '@plano/shared/api';
/**
 * This service enables access to the api "affected_shifts".
 * This file is auto generated by de.sage.scheduler.api_generator.ApiGenerator.
 */
// constants
class Consts {
    constructor() {
        this.SHIFTS = 1;
        this.BOOKINGS_CANCELED_COUNT = 2;
        this.BOOKINGS_DECLINED_COUNT = 3;
        this.SHIFT_START = 1;
        this.SHIFT_END = 2;
        this.SHIFT_ASSIGNED_MEMBER_IDS = 3;
        this.SHIFT_NEEDED_MEMBERS_COUNT = 4;
        this.SHIFT_IS_COURSE_CANCELED = 5;
        this.SHIFT_IS_COURSE_ONLINE = 6;
        this.SHIFT_MIN_COURSE_PARTICIPANT_COUNT = 7;
        this.SHIFT_MAX_COURSE_PARTICIPANT_COUNT = 8;
        this.SHIFT_CURRENT_COURSE_PARTICIPANT_COUNT = 9;
    }
}
let AffectedShiftsApiService = class AffectedShiftsApiService extends ApiBase {
    constructor(h, router, apiE, zone, injector) {
        super(h, router, apiE, zone, injector, 'affected_shifts');
        this.consts = new Consts();
        this.dataWrapper = new AffectedShiftsApiRoot(this);
    }
    version() {
        return 'd2cae532b6c8edea4aeadb7fd524c681,ef61221c724096ec9771da9826c58e53';
    }
    get data() {
        return this.dataWrapper;
    }
    getRootWrapper() {
        return this.dataWrapper;
    }
    recreateRootWrapper() {
        this.dataWrapper = new AffectedShiftsApiRoot(this);
    }
};
AffectedShiftsApiService = __decorate([
    Injectable({
        providedIn: 'root',
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof HttpClient !== "undefined" && HttpClient) === "function" ? _a : Object, typeof (_b = typeof Router !== "undefined" && Router) === "function" ? _b : Object, ApiErrorService, typeof (_c = typeof NgZone !== "undefined" && NgZone) === "function" ? _c : Object, typeof (_d = typeof Injector !== "undefined" && Injector) === "function" ? _d : Object])
], AffectedShiftsApiService);
export { AffectedShiftsApiService };
export class AffectedShiftsApiRoot extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, AffectedShiftsApiRoot);
        this.api = api;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: '',
            id: 'ROOT',
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoBookingsCanceledCount = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'bookingsCanceledCount',
            id: 'BOOKINGS_CANCELED_COUNT',
            primitiveType: PApiPrimitiveTypes.Integer,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoBookingsDeclinedCount = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'bookingsDeclinedCount',
            id: 'BOOKINGS_DECLINED_COUNT',
            primitiveType: PApiPrimitiveTypes.Integer,
            canEdit: () => false,
            readMode: () => true,
        });
        this.shiftsWrapper = new AffectedShiftsApiShifts(this.api, false);
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
        this.shiftsWrapper.parent = this;
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  List of affected shifts. This list only returns the shifts which are in the interval defined by the query-parameters "start" and "end".
     */
    get shifts() {
        return this.shiftsWrapper;
    }
    set shiftsTestSetter(v) {
        this.setterImpl(1, v.rawData, 'shifts', () => { this.shiftsWrapper = v; });
    }
    /**
     *  How many bookings will be canceled? Those will have the previous state "BOOKED". Always sends 0 when "action" query-parameter is "other". This value is not affected by the query parameters "start" and "end".
     *
     * @type {Integer}
     */
    get bookingsCanceledCount() {
        return this.data[2];
    }
    set bookingsCanceledCountTestSetter(v) {
        this.setterImpl(2, v, 'bookingsCanceledCount');
    }
    /**
     *  How many bookings will be declined? Those will have the previous state "INQUIRY". Always sends 0 when "action" query-parameter is "other". This value is not affected by the query parameters "start" and "end".
     *
     * @type {Integer}
     */
    get bookingsDeclinedCount() {
        return this.data[3];
    }
    set bookingsDeclinedCountTestSetter(v) {
        this.setterImpl(3, v, 'bookingsDeclinedCount');
    }
    _fixIds(_idReplacements) {
        this.shiftsWrapper._fixIds(_idReplacements);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 4);
            if (data[1] === null)
                data[1] = Meta.createNewList();
        }
        // propagate new raw data to children
        this.shiftsWrapper._updateRawData(data ? data[1] : null, generateMissingData);
    }
    get dni() {
        return '1';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '1', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class AffectedShiftsApiShiftsBase extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'shifts');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'shifts',
            id: 'SHIFTS',
            primitiveType: PApiPrimitiveTypes.ApiList,
            canEdit: () => false,
            readMode: () => true,
        });
    }
    wrapItem(item, _generateMissingData) {
        const newWrapper = new AffectedShiftsApiShift(this.api);
        newWrapper._updateRawData(item, _generateMissingData);
        return newWrapper;
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return false;
    }
    createInstance(removeDestroyedItems) {
        return new AffectedShiftsApiShifts(this.api, removeDestroyedItems);
    }
    get dni() {
        return '2';
    }
    createNewItem(id = null) {
        const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('shifts');
        return newItem;
    }
}
export class AffectedShiftsApiShiftBase extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, AffectedShiftsApiShift);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'shift',
            id: 'SHIFT',
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoStart = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'start',
            id: 'SHIFT_START',
            primitiveType: PApiPrimitiveTypes.DateTime,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoEnd = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'end',
            id: 'SHIFT_END',
            primitiveType: PApiPrimitiveTypes.DateTime,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoNeededMembersCount = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'neededMembersCount',
            id: 'SHIFT_NEEDED_MEMBERS_COUNT',
            primitiveType: PApiPrimitiveTypes.Integer,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoIsCourseCanceled = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'isCourseCanceled',
            id: 'SHIFT_IS_COURSE_CANCELED',
            primitiveType: PApiPrimitiveTypes.boolean,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoIsCourseOnline = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'isCourseOnline',
            id: 'SHIFT_IS_COURSE_ONLINE',
            primitiveType: PApiPrimitiveTypes.boolean,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoMinCourseParticipantCount = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'minCourseParticipantCount',
            id: 'SHIFT_MIN_COURSE_PARTICIPANT_COUNT',
            primitiveType: PApiPrimitiveTypes.Integer,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoMaxCourseParticipantCount = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'maxCourseParticipantCount',
            id: 'SHIFT_MAX_COURSE_PARTICIPANT_COUNT',
            primitiveType: PApiPrimitiveTypes.Integer,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoCurrentCourseParticipantCount = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'currentCourseParticipantCount',
            id: 'SHIFT_CURRENT_COURSE_PARTICIPANT_COUNT',
            primitiveType: PApiPrimitiveTypes.Integer,
            canEdit: () => false,
            readMode: () => true,
        });
        this.assignedMemberIdsWrapper = new AffectedShiftsApiShiftAssignedMemberIds(this.api, false);
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
        this.assignedMemberIdsWrapper.parent = this;
    }
    get id() {
        return this._id !== null ? this._id : ShiftId.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  Start of shift (inclusive).
     *
     * @type {DateTime}
     */
    get start() {
        return this.data[1];
    }
    set startTestSetter(v) {
        this.setterImpl(1, v, 'start');
    }
    /**
     *  End of shift (exclusive).
     *
     * @type {DateTime}
     */
    get end() {
        return this.data[2];
    }
    set endTestSetter(v) {
        this.setterImpl(2, v, 'end');
    }
    /**
     *  A list of the assigned members' ids.
     */
    get assignedMemberIds() {
        return this.assignedMemberIdsWrapper;
    }
    set assignedMemberIdsTestSetter(v) {
        this.setterImpl(3, v.rawData, 'assignedMemberIds', () => { this.assignedMemberIdsWrapper = v; });
    }
    /**
     *  How many members should be assigned to this shift?
     *
     * @type {Integer}
     */
    get neededMembersCount() {
        return this.data[4];
    }
    set neededMembersCountTestSetter(v) {
        this.setterImpl(4, v, 'neededMembersCount');
    }
    /**
     *  Is the course canceled?
     *
     * @type {boolean}
     */
    get isCourseCanceled() {
        return this.data[5];
    }
    set isCourseCanceledTestSetter(v) {
        this.setterImpl(5, v, 'isCourseCanceled');
    }
    /**
     *  Is the course online?
     *
     * @type {boolean}
     */
    get isCourseOnline() {
        return this.data[6];
    }
    set isCourseOnlineTestSetter(v) {
        this.setterImpl(6, v, 'isCourseOnline');
    }
    /**
     *  Minimal course participant count.
     *
     * @type {Integer}
     */
    get minCourseParticipantCount() {
        return this.data[7];
    }
    set minCourseParticipantCountTestSetter(v) {
        this.setterImpl(7, v, 'minCourseParticipantCount');
    }
    /**
     *  Maximal course participant count.
     *
     * @type {Integer}
     */
    get maxCourseParticipantCount() {
        return this.data[8];
    }
    set maxCourseParticipantCountTestSetter(v) {
        this.setterImpl(8, v, 'maxCourseParticipantCount');
    }
    /**
     *  Current course participant count? Being determined by bookings.
     *
     * @type {Integer}
     */
    get currentCourseParticipantCount() {
        return this.data[9];
    }
    set currentCourseParticipantCountTestSetter(v) {
        this.setterImpl(9, v, 'currentCourseParticipantCount');
    }
    _fixIds(_idReplacements) {
        this.assignedMemberIdsWrapper._fixIds(_idReplacements);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : ShiftId.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 10);
            if (data[3] === null)
                data[3] = Meta.createNewList();
            data[5] = false;
            data[6] = false;
        }
        // propagate new raw data to children
        this.assignedMemberIdsWrapper._updateRawData(data ? data[3] : null, generateMissingData);
    }
    get dni() {
        return '5';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '5', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class AffectedShiftsApiShiftAssignedMemberIds extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'assignedMemberIds');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'assignedMemberIds',
            id: 'SHIFT_ASSIGNED_MEMBER_IDS',
            primitiveType: PApiPrimitiveTypes.ApiList,
            show: function () {
                console.error('AttributeInfo for /affected_shifts -> SHIFT_ASSIGNED_MEMBER_IDS is not implemented yet. Please create a Jira issue in the current Sprint: https://drplano.atlassian.net/secure/CreateIssueDetails!init.jspa?pid=10003&issuetype=10101&summary=' + encodeURI('AttributeInfo for /affected_shifts -> SHIFT_ASSIGNED_MEMBER_IDS is not implemented yet') + '&assignee=557058%3Ae58fd015-3e1d-44b8-9131-aef274b1c571');
                return true;
            },
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoShiftAssignedMemberId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'shiftAssignedMemberId',
            id: 'SHIFT_ASSIGNED_MEMBER_ID',
            primitiveType: PApiPrimitiveTypes.Id,
            canEdit: () => false,
            readMode: () => true,
        });
    }
    wrapItem(item, _generateMissingData) {
        return Id.create(item);
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return true;
    }
    createInstance(removeDestroyedItems) {
        return new AffectedShiftsApiShiftAssignedMemberIds(this.api, removeDestroyedItems);
    }
    get dni() {
        return '8';
    }
    createNewItem() {
        const newItemRaw = null;
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('assignedMemberIds');
        return newItem;
    }
}
//# sourceMappingURL=affected-shifts-api.service.ag.js.map