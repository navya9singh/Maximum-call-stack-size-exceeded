var _a, _b, _c, _d;
import { __decorate, __metadata } from "tslib";
import { Injectable, NgZone, Injector } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Router } from '@angular/router';
import { ApiBase } from '@plano/shared/api/base/api-base';
import { Id } from '@plano/shared/api/base/id';
import { Meta } from '@plano/shared/api/base/meta';
import { ApiAttributeInfo } from '@plano/shared/api/base/api-attribute-info';
import { PApiPrimitiveTypes } from '@plano/shared/api/base/generated-types.ag';
import { ApiObjectWrapper } from '@plano/shared/api';
import { ApiErrorService } from '@plano/shared/api/api-error.service';
/**
 * This service enables access to the api "register_test_account".
 * This file is auto generated by de.sage.scheduler.api_generator.ApiGenerator.
 */
// constants
class Consts {
    constructor() {
        this.OWNER_GENDER = 1;
        this.OWNER_FIRST_NAME = 2;
        this.OWNER_LAST_NAME = 3;
        this.OWNER_EMAIL = 4;
        this.OWNER_PHONE = 5;
        this.OWNER_PASSWORD = 6;
        this.COMPANY = 7;
        this.POSTAL_CODE = 8;
        this.COUNTRY = 9;
        this.HOW_DO_YOU_KNOW = 10;
        this.HOW_DO_YOU_KNOW_TEXT = 11;
    }
}
let RegisterTestAccountApiService = class RegisterTestAccountApiService extends ApiBase {
    constructor(h, router, apiE, zone, injector) {
        super(h, router, apiE, zone, injector, 'register_test_account');
        this.consts = new Consts();
        this.dataWrapper = new RegisterTestAccountApiRoot(this);
    }
    version() {
        return '03546e3bfc4fddd8b395cc395ddd182e,2fb0510cd975bd4914b7e9c7bcc64e96';
    }
    get data() {
        return this.dataWrapper;
    }
    getRootWrapper() {
        return this.dataWrapper;
    }
    recreateRootWrapper() {
        this.dataWrapper = new RegisterTestAccountApiRoot(this);
    }
};
RegisterTestAccountApiService = __decorate([
    Injectable({
        providedIn: 'root',
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof HttpClient !== "undefined" && HttpClient) === "function" ? _a : Object, typeof (_b = typeof Router !== "undefined" && Router) === "function" ? _b : Object, ApiErrorService, typeof (_c = typeof NgZone !== "undefined" && NgZone) === "function" ? _c : Object, typeof (_d = typeof Injector !== "undefined" && Injector) === "function" ? _d : Object])
], RegisterTestAccountApiService);
export { RegisterTestAccountApiService };
export class RegisterTestAccountApiRoot extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, RegisterTestAccountApiRoot);
        this.api = api;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: '',
            id: 'ROOT',
        });
        this.attributeInfoOwnerGender = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'ownerGender',
            id: 'OWNER_GENDER',
            primitiveType: PApiPrimitiveTypes.Enum,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Enum, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoOwnerFirstName = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'ownerFirstName',
            id: 'OWNER_FIRST_NAME',
            primitiveType: PApiPrimitiveTypes.string,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.string, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoOwnerLastName = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'ownerLastName',
            id: 'OWNER_LAST_NAME',
            primitiveType: PApiPrimitiveTypes.string,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.string, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoOwnerEmail = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'ownerEmail',
            id: 'OWNER_EMAIL',
            primitiveType: PApiPrimitiveTypes.Email,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Email, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoOwnerPhone = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'ownerPhone',
            id: 'OWNER_PHONE',
            primitiveType: PApiPrimitiveTypes.Tel,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Tel, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoOwnerPassword = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'ownerPassword',
            id: 'OWNER_PASSWORD',
            primitiveType: PApiPrimitiveTypes.Password,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Password, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoCompany = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'company',
            id: 'COMPANY',
            primitiveType: PApiPrimitiveTypes.string,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.string, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoPostalCode = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'postalCode',
            id: 'POSTAL_CODE',
            primitiveType: PApiPrimitiveTypes.PostalCode,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.PostalCode, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoCountry = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'country',
            id: 'COUNTRY',
            primitiveType: PApiPrimitiveTypes.Enum,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Enum, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoHowDoYouKnow = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'howDoYouKnow',
            id: 'HOW_DO_YOU_KNOW',
            primitiveType: PApiPrimitiveTypes.Enum,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Enum, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoHowDoYouKnowText = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'howDoYouKnowText',
            id: 'HOW_DO_YOU_KNOW_TEXT',
            primitiveType: PApiPrimitiveTypes.string,
            show: function () {
                if (!((this.howDoYouKnow === RegisterTestAccountApiHowDoYouKnow.OTHER))) {
                    return false;
                }
                return true;
            },
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.string, undefined);
                        return null;
                    },
                ];
            },
        });
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    set ownerGender(v) {
        this.setterImpl(1, v, 'ownerGender');
    }
    set ownerFirstName(v) {
        this.setterImpl(2, v, 'ownerFirstName');
    }
    set ownerLastName(v) {
        this.setterImpl(3, v, 'ownerLastName');
    }
    set ownerEmail(v) {
        this.setterImpl(4, v, 'ownerEmail');
    }
    set ownerPhone(v) {
        this.setterImpl(5, v, 'ownerPhone');
    }
    set ownerPassword(v) {
        this.setterImpl(6, v, 'ownerPassword');
    }
    set company(v) {
        this.setterImpl(7, v, 'company');
    }
    set postalCode(v) {
        this.setterImpl(8, v, 'postalCode');
    }
    set country(v) {
        this.setterImpl(9, v, 'country');
    }
    set howDoYouKnow(v) {
        this.setterImpl(10, v, 'howDoYouKnow');
    }
    /**
     *  only set when HOW_DO_YOU_KNOW==OTHER
     *
     * @type {string}
     */
    get howDoYouKnowText() {
        return this.data[11];
    }
    set howDoYouKnowText(v) {
        this.setterImpl(11, v, 'howDoYouKnowText');
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 12);
        }
        // propagate new raw data to children
    }
    get dni() {
        return '1';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '1', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export var RegisterTestAccountApiGender;
(function (RegisterTestAccountApiGender) {
    RegisterTestAccountApiGender[RegisterTestAccountApiGender["MALE"] = 1] = "MALE";
    RegisterTestAccountApiGender[RegisterTestAccountApiGender["FEMALE"] = 2] = "FEMALE";
    RegisterTestAccountApiGender[RegisterTestAccountApiGender["DIVERSE"] = 3] = "DIVERSE";
})(RegisterTestAccountApiGender || (RegisterTestAccountApiGender = {}));
export var RegisterTestAccountApiCountry;
(function (RegisterTestAccountApiCountry) {
    RegisterTestAccountApiCountry[RegisterTestAccountApiCountry["GERMANY"] = 1] = "GERMANY";
    RegisterTestAccountApiCountry[RegisterTestAccountApiCountry["AUSTRIA"] = 2] = "AUSTRIA";
    RegisterTestAccountApiCountry[RegisterTestAccountApiCountry["SWITZERLAND"] = 3] = "SWITZERLAND";
    RegisterTestAccountApiCountry[RegisterTestAccountApiCountry["NETHERLANDS"] = 4] = "NETHERLANDS";
    RegisterTestAccountApiCountry[RegisterTestAccountApiCountry["BELGIUM"] = 5] = "BELGIUM";
    RegisterTestAccountApiCountry[RegisterTestAccountApiCountry["UNITED_KINGDOM"] = 6] = "UNITED_KINGDOM";
    RegisterTestAccountApiCountry[RegisterTestAccountApiCountry["CZECH_REPUBLIC"] = 7] = "CZECH_REPUBLIC";
    RegisterTestAccountApiCountry[RegisterTestAccountApiCountry["SWEDEN"] = 8] = "SWEDEN";
    RegisterTestAccountApiCountry[RegisterTestAccountApiCountry["LUXEMBOURG"] = 9] = "LUXEMBOURG";
})(RegisterTestAccountApiCountry || (RegisterTestAccountApiCountry = {}));
export var RegisterTestAccountApiHowDoYouKnow;
(function (RegisterTestAccountApiHowDoYouKnow) {
    RegisterTestAccountApiHowDoYouKnow[RegisterTestAccountApiHowDoYouKnow["RECOMMENDATION"] = 1] = "RECOMMENDATION";
    RegisterTestAccountApiHowDoYouKnow[RegisterTestAccountApiHowDoYouKnow["INTERNET_SEARCH"] = 2] = "INTERNET_SEARCH";
    RegisterTestAccountApiHowDoYouKnow[RegisterTestAccountApiHowDoYouKnow["ASKED_BY_PLANO"] = 3] = "ASKED_BY_PLANO";
    RegisterTestAccountApiHowDoYouKnow[RegisterTestAccountApiHowDoYouKnow["SOCIAL_MEDIA_FACEBOOK"] = 4] = "SOCIAL_MEDIA_FACEBOOK";
    RegisterTestAccountApiHowDoYouKnow[RegisterTestAccountApiHowDoYouKnow["FAIR"] = 5] = "FAIR";
    RegisterTestAccountApiHowDoYouKnow[RegisterTestAccountApiHowDoYouKnow["OTHER"] = 6] = "OTHER";
})(RegisterTestAccountApiHowDoYouKnow || (RegisterTestAccountApiHowDoYouKnow = {}));
//# sourceMappingURL=register-test-account-api.service.ag.js.map