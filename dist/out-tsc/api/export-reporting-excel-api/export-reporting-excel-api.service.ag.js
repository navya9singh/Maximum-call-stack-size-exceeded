var _a, _b, _c, _d;
import { __decorate, __metadata } from "tslib";
import { Injectable, NgZone, Injector } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Router } from '@angular/router';
import { ApiBase } from '@plano/shared/api/base/api-base';
import { Id } from '@plano/shared/api/base/id';
import { Meta } from '@plano/shared/api/base/meta';
import { ApiAttributeInfo } from '@plano/shared/api/base/api-attribute-info';
import { PApiPrimitiveTypes } from '@plano/shared/api/base/generated-types.ag';
import { ApiListWrapper, ApiObjectWrapper } from '@plano/shared/api';
import { ApiErrorService } from '@plano/shared/api/api-error.service';
/**
 * This service enables access to the api "export_reporting_excel".
 * This file is auto generated by de.sage.scheduler.api_generator.ApiGenerator.
 */
// constants
class Consts {
    constructor() {
        this.WORKING_TIME_IDS = 1;
        this.ABSENCE_IDS = 2;
        this.MEMBER_IDS = 3;
        this.SHIFT_MODEL_IDS = 4;
    }
}
let ExportReportingExcelApiService = class ExportReportingExcelApiService extends ApiBase {
    constructor(h, router, apiE, zone, injector) {
        super(h, router, apiE, zone, injector, 'export_reporting_excel');
        this.consts = new Consts();
        this.dataWrapper = new ExportReportingExcelApiRoot(this);
    }
    version() {
        return 'a745a6329a3160050a6f45f7f26be98d,d35c3110c1c64b6400f702f64ac173e4';
    }
    get data() {
        return this.dataWrapper;
    }
    getRootWrapper() {
        return this.dataWrapper;
    }
    recreateRootWrapper() {
        this.dataWrapper = new ExportReportingExcelApiRoot(this);
    }
};
ExportReportingExcelApiService = __decorate([
    Injectable({
        providedIn: 'root',
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof HttpClient !== "undefined" && HttpClient) === "function" ? _a : Object, typeof (_b = typeof Router !== "undefined" && Router) === "function" ? _b : Object, ApiErrorService, typeof (_c = typeof NgZone !== "undefined" && NgZone) === "function" ? _c : Object, typeof (_d = typeof Injector !== "undefined" && Injector) === "function" ? _d : Object])
], ExportReportingExcelApiService);
export { ExportReportingExcelApiService };
export class ExportReportingExcelApiRoot extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, ExportReportingExcelApiRoot);
        this.api = api;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: '',
            id: 'ROOT',
        });
        this.workingTimeIdsWrapper = new ExportReportingExcelApiWorkingTimeIds(this.api, false);
        this.absenceIdsWrapper = new ExportReportingExcelApiAbsenceIds(this.api, false);
        this.memberIdsWrapper = new ExportReportingExcelApiMemberIds(this.api, false);
        this.shiftModelIdsWrapper = new ExportReportingExcelApiShiftModelIds(this.api, false);
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
        this.workingTimeIdsWrapper.parent = this;
        this.absenceIdsWrapper.parent = this;
        this.memberIdsWrapper.parent = this;
        this.shiftModelIdsWrapper.parent = this;
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  Id list of the working-times to be exported.
     */
    get workingTimeIds() {
        return this.workingTimeIdsWrapper;
    }
    set workingTimeIdsTestSetter(v) {
        this.setterImpl(1, v.rawData, 'workingTimeIds', () => { this.workingTimeIdsWrapper = v; });
    }
    /**
     *  Id list of the absences to be exported.
     */
    get absenceIds() {
        return this.absenceIdsWrapper;
    }
    set absenceIdsTestSetter(v) {
        this.setterImpl(2, v.rawData, 'absenceIds', () => { this.absenceIdsWrapper = v; });
    }
    /**
     *  Id list of the members to be exported.
     */
    get memberIds() {
        return this.memberIdsWrapper;
    }
    set memberIdsTestSetter(v) {
        this.setterImpl(3, v.rawData, 'memberIds', () => { this.memberIdsWrapper = v; });
    }
    /**
     *  Id list of the shift model to be exported.
     */
    get shiftModelIds() {
        return this.shiftModelIdsWrapper;
    }
    set shiftModelIdsTestSetter(v) {
        this.setterImpl(4, v.rawData, 'shiftModelIds', () => { this.shiftModelIdsWrapper = v; });
    }
    _fixIds(_idReplacements) {
        this.workingTimeIdsWrapper._fixIds(_idReplacements);
        this.absenceIdsWrapper._fixIds(_idReplacements);
        this.memberIdsWrapper._fixIds(_idReplacements);
        this.shiftModelIdsWrapper._fixIds(_idReplacements);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 5);
            if (data[1] === null)
                data[1] = Meta.createNewList();
            if (data[2] === null)
                data[2] = Meta.createNewList();
            if (data[3] === null)
                data[3] = Meta.createNewList();
            if (data[4] === null)
                data[4] = Meta.createNewList();
        }
        // propagate new raw data to children
        this.workingTimeIdsWrapper._updateRawData(data ? data[1] : null, generateMissingData);
        this.absenceIdsWrapper._updateRawData(data ? data[2] : null, generateMissingData);
        this.memberIdsWrapper._updateRawData(data ? data[3] : null, generateMissingData);
        this.shiftModelIdsWrapper._updateRawData(data ? data[4] : null, generateMissingData);
    }
    get dni() {
        return '1';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '1', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class ExportReportingExcelApiWorkingTimeIds extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'workingTimeIds');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'workingTimeIds',
            id: 'WORKING_TIME_IDS',
            primitiveType: PApiPrimitiveTypes.ApiList,
        });
        this.attributeInfoWorkingTimeId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'workingTimeId',
            id: 'WORKING_TIME_ID',
        });
    }
    wrapItem(item, _generateMissingData) {
        const newWrapper = new ExportReportingExcelApiWorkingTimeId(this.api);
        newWrapper._updateRawData(item, _generateMissingData);
        return newWrapper;
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return false;
    }
    createInstance(removeDestroyedItems) {
        return new ExportReportingExcelApiWorkingTimeIds(this.api, removeDestroyedItems);
    }
    get dni() {
        return '2';
    }
    createNewItem(id = null) {
        const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('workingTimeIds');
        return newItem;
    }
}
export class ExportReportingExcelApiWorkingTimeId extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, ExportReportingExcelApiWorkingTimeId);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'workingTimeId',
            id: 'WORKING_TIME_ID',
        });
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 1);
        }
        // propagate new raw data to children
    }
    get dni() {
        return '6';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '6', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class ExportReportingExcelApiAbsenceIds extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'absenceIds');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'absenceIds',
            id: 'ABSENCE_IDS',
            primitiveType: PApiPrimitiveTypes.ApiList,
        });
        this.attributeInfoAbsenceId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'absenceId',
            id: 'ABSENCE_ID',
        });
    }
    wrapItem(item, _generateMissingData) {
        const newWrapper = new ExportReportingExcelApiAbsenceId(this.api);
        newWrapper._updateRawData(item, _generateMissingData);
        return newWrapper;
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return false;
    }
    createInstance(removeDestroyedItems) {
        return new ExportReportingExcelApiAbsenceIds(this.api, removeDestroyedItems);
    }
    get dni() {
        return '3';
    }
    createNewItem(id = null) {
        const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('absenceIds');
        return newItem;
    }
}
export class ExportReportingExcelApiAbsenceId extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, ExportReportingExcelApiAbsenceId);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'absenceId',
            id: 'ABSENCE_ID',
        });
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 1);
        }
        // propagate new raw data to children
    }
    get dni() {
        return '7';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '7', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class ExportReportingExcelApiMemberIds extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'memberIds');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'memberIds',
            id: 'MEMBER_IDS',
            primitiveType: PApiPrimitiveTypes.ApiList,
        });
        this.attributeInfoMemberId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'memberId',
            id: 'MEMBER_ID',
            primitiveType: PApiPrimitiveTypes.Id,
        });
    }
    wrapItem(item, _generateMissingData) {
        return Id.create(item);
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return true;
    }
    createInstance(removeDestroyedItems) {
        return new ExportReportingExcelApiMemberIds(this.api, removeDestroyedItems);
    }
    get dni() {
        return '4';
    }
    createNewItem() {
        const newItemRaw = null;
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('memberIds');
        return newItem;
    }
}
export class ExportReportingExcelApiShiftModelIds extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'shiftModelIds');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'shiftModelIds',
            id: 'SHIFT_MODEL_IDS',
            primitiveType: PApiPrimitiveTypes.ApiList,
        });
        this.attributeInfoShiftModelId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'shiftModelId',
            id: 'SHIFT_MODEL_ID',
            primitiveType: PApiPrimitiveTypes.Id,
        });
    }
    wrapItem(item, _generateMissingData) {
        return Id.create(item);
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return true;
    }
    createInstance(removeDestroyedItems) {
        return new ExportReportingExcelApiShiftModelIds(this.api, removeDestroyedItems);
    }
    get dni() {
        return '5';
    }
    createNewItem() {
        const newItemRaw = null;
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('shiftModelIds');
        return newItem;
    }
}
//# sourceMappingURL=export-reporting-excel-api.service.ag.js.map