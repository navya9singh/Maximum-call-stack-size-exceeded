var _a, _b, _c, _d;
import { __decorate, __metadata } from "tslib";
import { Injectable, NgZone, Injector } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Router } from '@angular/router';
import { ApiBase } from '@plano/shared/api/base/api-base';
import { Id } from '@plano/shared/api/base/id';
import { Meta } from '@plano/shared/api/base/meta';
import { ApiAttributeInfo } from '@plano/shared/api/base/api-attribute-info';
import { PApiPrimitiveTypes } from '@plano/shared/api/base/generated-types.ag';
import { SchedulingApiAccountHolderState, ApiObjectWrapper, AuthenticatedApiRole } from '@plano/shared/api';
import { ApiErrorService } from '@plano/shared/api/api-error.service';
import { AccountApiRoot } from '@plano/shared/api';
/**
 * This service enables access to the api "account".
 * This file is auto generated by de.sage.scheduler.api_generator.ApiGenerator.
 */
// constants
class Consts {
    constructor() {
        this.COMPANY_NAME = 1;
        this.LOCATION_NAME = 2;
        this.LOCATION_STREET_AND_HOUSE_NUMBER = 3;
        this.LOCATION_POSTAL_CODE = 4;
        this.LOCATION_CITY = 5;
        this.LOCATION_COUNTRY = 6;
        this.LOCATION_HOMEPAGE = 7;
        this.CEO_FIRST_NAME = 8;
        this.CEO_LAST_NAME = 9;
        this.BILLING = 10;
        this.HRM_CONTACT_FIRST_NAME = 11;
        this.HRM_CONTACT_LAST_NAME = 12;
        this.HRM_CONTACT_EMAIL = 13;
        this.HRM_CONTACT_PHONE = 14;
        this.BOOKING_SYSTEM_CONTACT_FIRST_NAME = 15;
        this.BOOKING_SYSTEM_CONTACT_LAST_NAME = 16;
        this.BOOKING_SYSTEM_CONTACT_EMAIL = 17;
        this.BOOKING_SYSTEM_CONTACT_PHONE = 18;
        this.ACCOUNTING_PERIOD_START_DAY = 19;
        this.TERMS_URL = 20;
        this.DATA_PROTECTION_URL = 21;
        this.TERMS_OF_PARTICIPATION_URL = 22;
        this.CANCELLATION_POLICY_URL = 23;
        this.BOOKABLE_MAILS_SENDER_NAME = 24;
        this.AUTOMATIC_BOOKABLE_ANONYMIZATION_AFTER_PERIOD = 25;
        this.NEXT_AUTOMATIC_BOOKABLE_ANONYMIZATION = 26;
        this.AUTOMATIC_BOOKABLE_ANONYMIZATION_EXPORT_PASSWORD = 27;
        this.PAYOUT_NOTIFICATION_EXPORT_PASSWORD = 28;
        this.TYPE = 29;
        this.CUSTOMER_ID = 30;
        this.POS_SYSTEM_PASSWORD = 31;
        this.IS_PAYPAL_PLUS = 32;
        this.PAYPAL_ACCOUNT_EMAIL = 33;
        this.REQUEST_PAYPAL_AUTHORIZATION = 34;
        this.PAYPAL_AUTHORIZATION_URL = 35;
        this.PAYPAL_AUTHORIZATION_CODE = 36;
        this.DISCOUNT_CODE = 37;
        this.BILLING_BANK_ACCOUNT_OWNER = 1;
        this.BILLING_BANK_ACCOUNT_IBAN = 2;
        this.BILLING_BANK_ACCOUNT_BIC = 3;
        this.BILLING_VAT_NUMBER = 4;
        this.BILLING_CONTACT_FIRST_NAME = 5;
        this.BILLING_CONTACT_LAST_NAME = 6;
        this.BILLING_BILL_ADDRESS_IS_LOCATION_ADDRESS = 7;
        this.BILLING_CONTACT_EMAIL = 8;
        this.BILLING_CONTACT_PHONE = 9;
        this.BILLING_STREET_AND_HOUSE_NUMBER = 10;
        this.BILLING_POSTAL_CODE = 11;
        this.BILLING_CITY = 12;
        this.BILLING_COUNTRY = 13;
        this.BILLING_ACTIVE_MEMBERS_COUNT_FOR_NEXT_PRICING = 14;
        this.BILLING_BILLOMAT_CUSTOMER_PORTAL_URL = 15;
    }
}
let AccountApiService = class AccountApiService extends ApiBase {
    constructor(h, router, apiE, zone, injector) {
        super(h, router, apiE, zone, injector, 'account');
        this.consts = new Consts();
        this.dataWrapper = new AccountApiRoot(this);
    }
    version() {
        return '4174ec7266376425d0be7af47ad0577c,3f1808163bf84a93ae8a080e46031e6c';
    }
    get data() {
        return this.dataWrapper;
    }
    getRootWrapper() {
        return this.dataWrapper;
    }
    recreateRootWrapper() {
        this.dataWrapper = new AccountApiRoot(this);
    }
};
AccountApiService = __decorate([
    Injectable({
        providedIn: 'root',
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof HttpClient !== "undefined" && HttpClient) === "function" ? _a : Object, typeof (_b = typeof Router !== "undefined" && Router) === "function" ? _b : Object, ApiErrorService, typeof (_c = typeof NgZone !== "undefined" && NgZone) === "function" ? _c : Object, typeof (_d = typeof Injector !== "undefined" && Injector) === "function" ? _d : Object])
], AccountApiService);
export { AccountApiService };
export class AccountApiRootBase extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, AccountApiRoot);
        this.api = api;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: '',
            id: 'ROOT',
        });
        this.attributeInfoCompanyName = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'companyName',
            id: 'COMPANY_NAME',
            primitiveType: PApiPrimitiveTypes.string,
            show: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            canEdit: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return true;
                }
                return false;
            },
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.string, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoLocationName = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'locationName',
            id: 'LOCATION_NAME',
            primitiveType: PApiPrimitiveTypes.string,
            show: function () {
                if (!(((this.api.rightsService.canReadAndWriteBookingSystemSettings)))) {
                    return false;
                }
                return true;
            },
            canEdit: function () {
                if (!(((this.api.rightsService.canReadAndWriteBookingSystemSettings)))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.canReadAndWriteBookingSystemSettings)))) {
                    return true;
                }
                return false;
            },
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.string, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoLocationStreetAndHouseNumber = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'locationStreetAndHouseNumber',
            id: 'LOCATION_STREET_AND_HOUSE_NUMBER',
            primitiveType: PApiPrimitiveTypes.string,
            show: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            canEdit: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return true;
                }
                return false;
            },
            validations: function () {
                return [
                    () => {
                        if (((this.type === AccountApiType.PAID || this.type === AccountApiType.TERMINATED || this.transformingToPaidAccount))) {
                            return this.api.validators.required(PApiPrimitiveTypes.string, undefined);
                        }
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoLocationPostalCode = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'locationPostalCode',
            id: 'LOCATION_POSTAL_CODE',
            primitiveType: PApiPrimitiveTypes.PostalCode,
            show: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            canEdit: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return true;
                }
                return false;
            },
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.PostalCode, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoLocationCity = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'locationCity',
            id: 'LOCATION_CITY',
            primitiveType: PApiPrimitiveTypes.string,
            show: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            canEdit: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return true;
                }
                return false;
            },
            validations: function () {
                return [
                    () => {
                        if (((this.type === AccountApiType.PAID || this.type === AccountApiType.TERMINATED || this.transformingToPaidAccount))) {
                            return this.api.validators.required(PApiPrimitiveTypes.string, undefined);
                        }
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoLocationCountry = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'locationCountry',
            id: 'LOCATION_COUNTRY',
            primitiveType: PApiPrimitiveTypes.Enum,
            show: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoLocationHomepage = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'locationHomepage',
            id: 'LOCATION_HOMEPAGE',
            primitiveType: PApiPrimitiveTypes.Url,
            show: function () {
                if (!(((this.api.rightsService.canReadAndWriteBookingSystemSettings)))) {
                    return false;
                }
                return true;
            },
            canEdit: function () {
                if (!(((this.api.rightsService.canReadAndWriteBookingSystemSettings)))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.canReadAndWriteBookingSystemSettings)))) {
                    return true;
                }
                return false;
            },
        });
        this.attributeInfoCeoFirstName = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'ceoFirstName',
            id: 'CEO_FIRST_NAME',
            primitiveType: PApiPrimitiveTypes.string,
            show: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            canEdit: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return true;
                }
                return false;
            },
            validations: function () {
                return [
                    () => {
                        if (((this.type === AccountApiType.PAID || this.type === AccountApiType.TERMINATED || this.transformingToPaidAccount))) {
                            return this.api.validators.required(PApiPrimitiveTypes.string, undefined);
                        }
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoCeoLastName = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'ceoLastName',
            id: 'CEO_LAST_NAME',
            primitiveType: PApiPrimitiveTypes.string,
            show: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            canEdit: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return true;
                }
                return false;
            },
            validations: function () {
                return [
                    () => {
                        if (((this.type === AccountApiType.PAID || this.type === AccountApiType.TERMINATED || this.transformingToPaidAccount))) {
                            return this.api.validators.required(PApiPrimitiveTypes.string, undefined);
                        }
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoHrmContactFirstName = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'hrmContactFirstName',
            id: 'HRM_CONTACT_FIRST_NAME',
            primitiveType: PApiPrimitiveTypes.string,
            show: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            canEdit: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return true;
                }
                return false;
            },
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.string, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoHrmContactLastName = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'hrmContactLastName',
            id: 'HRM_CONTACT_LAST_NAME',
            primitiveType: PApiPrimitiveTypes.string,
            show: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            canEdit: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return true;
                }
                return false;
            },
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.string, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoHrmContactEmail = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'hrmContactEmail',
            id: 'HRM_CONTACT_EMAIL',
            primitiveType: PApiPrimitiveTypes.Email,
            show: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            canEdit: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return true;
                }
                return false;
            },
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Email, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoHrmContactPhone = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'hrmContactPhone',
            id: 'HRM_CONTACT_PHONE',
            primitiveType: PApiPrimitiveTypes.Tel,
            show: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            canEdit: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return true;
                }
                return false;
            },
        });
        this.attributeInfoBookingSystemContactFirstName = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'bookingSystemContactFirstName',
            id: 'BOOKING_SYSTEM_CONTACT_FIRST_NAME',
            primitiveType: PApiPrimitiveTypes.string,
            show: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            canEdit: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return true;
                }
                return false;
            },
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.string, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoBookingSystemContactLastName = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'bookingSystemContactLastName',
            id: 'BOOKING_SYSTEM_CONTACT_LAST_NAME',
            primitiveType: PApiPrimitiveTypes.string,
            show: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            canEdit: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return true;
                }
                return false;
            },
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.string, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoBookingSystemContactEmail = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'bookingSystemContactEmail',
            id: 'BOOKING_SYSTEM_CONTACT_EMAIL',
            primitiveType: PApiPrimitiveTypes.Email,
            show: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            canEdit: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return true;
                }
                return false;
            },
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Email, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoBookingSystemContactPhone = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'bookingSystemContactPhone',
            id: 'BOOKING_SYSTEM_CONTACT_PHONE',
            primitiveType: PApiPrimitiveTypes.Tel,
            show: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            canEdit: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return true;
                }
                return false;
            },
        });
        this.attributeInfoAccountingPeriodStartDay = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'accountingPeriodStartDay',
            id: 'ACCOUNTING_PERIOD_START_DAY',
            primitiveType: PApiPrimitiveTypes.Days,
            canEdit: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return true;
                }
                return false;
            },
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Days, undefined);
                        return null;
                    },
                    () => {
                        return this.api.validators.min(1, true, PApiPrimitiveTypes.Days, undefined, undefined);
                        return null;
                    },
                    () => {
                        return this.api.validators.max(28, true, PApiPrimitiveTypes.Days, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoTermsUrl = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'termsUrl',
            id: 'TERMS_URL',
            primitiveType: PApiPrimitiveTypes.Url,
            show: function () {
                if (!(((this.api.rightsService.canReadAndWriteBookingSystemSettings)))) {
                    return false;
                }
                return true;
            },
            canEdit: function () {
                if (!(((this.api.rightsService.canReadAndWriteBookingSystemSettings)))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.canReadAndWriteBookingSystemSettings)))) {
                    return true;
                }
                return false;
            },
        });
        this.attributeInfoDataProtectionUrl = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'dataProtectionUrl',
            id: 'DATA_PROTECTION_URL',
            primitiveType: PApiPrimitiveTypes.Url,
            show: function () {
                if (!(((this.api.rightsService.canReadAndWriteBookingSystemSettings)))) {
                    return false;
                }
                return true;
            },
            canEdit: function () {
                if (!(((this.api.rightsService.canReadAndWriteBookingSystemSettings)))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.canReadAndWriteBookingSystemSettings)))) {
                    return true;
                }
                return false;
            },
        });
        this.attributeInfoTermsOfParticipationUrl = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'termsOfParticipationUrl',
            id: 'TERMS_OF_PARTICIPATION_URL',
            primitiveType: PApiPrimitiveTypes.Url,
            show: function () {
                if (!(((this.api.rightsService.canReadAndWriteBookingSystemSettings)))) {
                    return false;
                }
                return true;
            },
            canEdit: function () {
                if (!(((this.api.rightsService.canReadAndWriteBookingSystemSettings)))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.canReadAndWriteBookingSystemSettings)))) {
                    return true;
                }
                return false;
            },
        });
        this.attributeInfoCancellationPolicyUrl = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'cancellationPolicyUrl',
            id: 'CANCELLATION_POLICY_URL',
            primitiveType: PApiPrimitiveTypes.Url,
            show: function () {
                if (!(((this.api.rightsService.canReadAndWriteBookingSystemSettings)))) {
                    return false;
                }
                return true;
            },
            canEdit: function () {
                if (!(((this.api.rightsService.canReadAndWriteBookingSystemSettings)))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.canReadAndWriteBookingSystemSettings)))) {
                    return true;
                }
                return false;
            },
        });
        this.attributeInfoBookableMailsSenderName = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'bookableMailsSenderName',
            id: 'BOOKABLE_MAILS_SENDER_NAME',
            primitiveType: PApiPrimitiveTypes.string,
            show: function () {
                if (!(((this.api.rightsService.canReadAndWriteBookingSystemSettings)))) {
                    return false;
                }
                return true;
            },
            canEdit: function () {
                if (!(((this.api.rightsService.canReadAndWriteBookingSystemSettings)))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.canReadAndWriteBookingSystemSettings)))) {
                    return true;
                }
                return false;
            },
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.string, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoAutomaticBookableAnonymizationAfterPeriod = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'automaticBookableAnonymizationAfterPeriod',
            id: 'AUTOMATIC_BOOKABLE_ANONYMIZATION_AFTER_PERIOD',
            primitiveType: PApiPrimitiveTypes.Months,
            show: function () {
                if (!(((this.api.rightsService.canReadAndWriteBookingSystemSettings)))) {
                    return false;
                }
                return true;
            },
            canEdit: function () {
                if (!(((this.api.rightsService.canReadAndWriteBookingSystemSettings)))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.canReadAndWriteBookingSystemSettings)))) {
                    return true;
                }
                return false;
            },
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(2, true, PApiPrimitiveTypes.Months, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoNextAutomaticBookableAnonymization = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'nextAutomaticBookableAnonymization',
            id: 'NEXT_AUTOMATIC_BOOKABLE_ANONYMIZATION',
            primitiveType: PApiPrimitiveTypes.DateTime,
            show: function () {
                if (!(((this.api.rightsService.canReadAndWriteBookingSystemSettings)))) {
                    return false;
                }
                return true;
            },
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoAutomaticBookableAnonymizationExportPassword = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'automaticBookableAnonymizationExportPassword',
            id: 'AUTOMATIC_BOOKABLE_ANONYMIZATION_EXPORT_PASSWORD',
            primitiveType: PApiPrimitiveTypes.Password,
            show: function () {
                if (!(((this.api.rightsService.canReadAndWriteBookingSystemSettings)))) {
                    return false;
                }
                return true;
            },
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoPayoutNotificationExportPassword = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'payoutNotificationExportPassword',
            id: 'PAYOUT_NOTIFICATION_EXPORT_PASSWORD',
            primitiveType: PApiPrimitiveTypes.Password,
            show: function () {
                if (!((this.api.schedulingApi.data.adyenAccount.accountHolderState !== SchedulingApiAccountHolderState.NOT_INITIALIZED) && (this.api.schedulingApi.data.adyenAccount.accountHolderState !== SchedulingApiAccountHolderState.INITIAL_ONBOARDING) && ((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoType = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'type',
            id: 'TYPE',
            primitiveType: PApiPrimitiveTypes.Enum,
            show: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            canEdit: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return true;
                }
                return false;
            },
        });
        this.attributeInfoCustomerId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'customerId',
            id: 'CUSTOMER_ID',
            primitiveType: PApiPrimitiveTypes.Integer,
            show: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoPosSystemPassword = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'posSystemPassword',
            id: 'POS_SYSTEM_PASSWORD',
            primitiveType: PApiPrimitiveTypes.Password,
            show: function () {
                if (!(((this.api.rightsService.canReadAndWriteBookingSystemSettings)))) {
                    return false;
                }
                return true;
            },
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoIsPaypalPlus = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'isPaypalPlus',
            id: 'IS_PAYPAL_PLUS',
            primitiveType: PApiPrimitiveTypes.boolean,
            show: function () {
                if (!(((this.api.rightsService.canReadAndWriteBookingSystemSettings)))) {
                    return false;
                }
                return true;
            },
            canEdit: function () {
                if (!(((this.api.rightsService.canReadAndWriteBookingSystemSettings)))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.canReadAndWriteBookingSystemSettings)))) {
                    return true;
                }
                return false;
            },
        });
        this.attributeInfoPaypalAccountEmail = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'paypalAccountEmail',
            id: 'PAYPAL_ACCOUNT_EMAIL',
            primitiveType: PApiPrimitiveTypes.Email,
            show: function () {
                if (!(((this.api.rightsService.canReadAndWriteBookingSystemSettings)))) {
                    return false;
                }
                return true;
            },
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoRequestPaypalAuthorization = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'requestPaypalAuthorization',
            id: 'REQUEST_PAYPAL_AUTHORIZATION',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoPaypalAuthorizationUrl = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'paypalAuthorizationUrl',
            id: 'PAYPAL_AUTHORIZATION_URL',
            primitiveType: PApiPrimitiveTypes.Url,
            show: function () {
                if (!(((this.api.rightsService.canReadAndWriteBookingSystemSettings)))) {
                    return false;
                }
                return true;
            },
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoPaypalAuthorizationCode = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'paypalAuthorizationCode',
            id: 'PAYPAL_AUTHORIZATION_CODE',
            primitiveType: PApiPrimitiveTypes.string,
            canEdit: function () {
                if (!(((this.api.rightsService.canReadAndWriteBookingSystemSettings)))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.canReadAndWriteBookingSystemSettings)))) {
                    return true;
                }
                return false;
            },
        });
        this.attributeInfoDiscountCode = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'discountCode',
            id: 'DISCOUNT_CODE',
            primitiveType: PApiPrimitiveTypes.string,
        });
        this.billingWrapper = new AccountApiBilling(this.api);
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
        this.billingWrapper.parent = this;
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  Name of the company
     *
     * @type {string}
     */
    get companyName() {
        return this.data[1];
    }
    set companyName(v) {
        this.setterImpl(1, v, 'companyName');
    }
    /**
     *  Name of the location
     *
     * @type {string}
     */
    get locationName() {
        return this.data[2];
    }
    set locationName(v) {
        this.setterImpl(2, v, 'locationName');
    }
    /**
     *  Street and house number of the location
     *
     * @type {string}
     */
    get locationStreetAndHouseNumber() {
        return this.data[3];
    }
    set locationStreetAndHouseNumber(v) {
        this.setterImpl(3, v, 'locationStreetAndHouseNumber', () => { if (this.transformingToPaidAccount && this.billing.billAddressIsLocationAddress)
            this.billing.streetAndHouseNumber = this.locationStreetAndHouseNumber; });
    }
    /**
     *  Postal code of the location
     *
     * @type {PostalCode}
     */
    get locationPostalCode() {
        return this.data[4];
    }
    set locationPostalCode(v) {
        this.setterImpl(4, v, 'locationPostalCode', () => { if (this.transformingToPaidAccount && this.billing.billAddressIsLocationAddress)
            this.billing.postalCode = this.locationPostalCode; });
    }
    /**
     *  City of the location
     *
     * @type {string}
     */
    get locationCity() {
        return this.data[5];
    }
    set locationCity(v) {
        this.setterImpl(5, v, 'locationCity', () => { if (this.transformingToPaidAccount && this.billing.billAddressIsLocationAddress)
            this.billing.city = this.locationCity; });
    }
    /**
     *  location country
     *
     * @type {AccountApiCountry}
     */
    get locationCountry() {
        return this.data[6];
    }
    set locationCountryTestSetter(v) {
        this.setterImpl(6, v, 'locationCountry');
    }
    /**
     *  Homepage-URL of the location/company
     *
     * @type {Url}
     */
    get locationHomepage() {
        return this.data[7];
    }
    set locationHomepage(v) {
        this.setterImpl(7, v, 'locationHomepage');
    }
    /**
     *  First name of the CEO (Name being printed on the bill).
     *
     * @type {string}
     */
    get ceoFirstName() {
        return this.data[8];
    }
    set ceoFirstName(v) {
        this.setterImpl(8, v, 'ceoFirstName');
    }
    /**
     *  Last name of the CEO (Name being printed on the bill).
     *
     * @type {string}
     */
    get ceoLastName() {
        return this.data[9];
    }
    set ceoLastName(v) {
        this.setterImpl(9, v, 'ceoLastName');
    }
    /**
     *  Object containing billing information.
     */
    get billing() {
        return this.billingWrapper;
    }
    set billingTestSetter(v) {
        this.setterImpl(10, v.rawData, 'billing', () => { this.billingWrapper = v; });
    }
    /**
     *  First name of the person we can contact concerning staff scheduling.
     *
     * @type {string}
     */
    get hrmContactFirstName() {
        return this.data[11];
    }
    set hrmContactFirstName(v) {
        this.setterImpl(11, v, 'hrmContactFirstName');
    }
    /**
     *  Last name of the person we can contact concerning staff scheduling.
     *
     * @type {string}
     */
    get hrmContactLastName() {
        return this.data[12];
    }
    set hrmContactLastName(v) {
        this.setterImpl(12, v, 'hrmContactLastName');
    }
    /**
     *  Email of the person we can contact concerning staff scheduling.
     *
     * @type {Email}
     */
    get hrmContactEmail() {
        return this.data[13];
    }
    set hrmContactEmail(v) {
        this.setterImpl(13, v, 'hrmContactEmail');
    }
    /**
     *  Phone of the person we can contact concerning staff scheduling.
     *
     * @type {Tel}
     */
    get hrmContactPhone() {
        return this.data[14];
    }
    set hrmContactPhone(v) {
        this.setterImpl(14, v, 'hrmContactPhone');
    }
    /**
     *  First name of the person we can contact concerning the booking system.
     *
     * @type {string}
     */
    get bookingSystemContactFirstName() {
        return this.data[15];
    }
    set bookingSystemContactFirstName(v) {
        this.setterImpl(15, v, 'bookingSystemContactFirstName');
    }
    /**
     *  Last name of the person we can contact concerning the booking system.
     *
     * @type {string}
     */
    get bookingSystemContactLastName() {
        return this.data[16];
    }
    set bookingSystemContactLastName(v) {
        this.setterImpl(16, v, 'bookingSystemContactLastName');
    }
    /**
     *  Email of the person we can contact concerning the booking system.
     *
     * @type {Email}
     */
    get bookingSystemContactEmail() {
        return this.data[17];
    }
    set bookingSystemContactEmail(v) {
        this.setterImpl(17, v, 'bookingSystemContactEmail');
    }
    /**
     *  Phone of the person we can contact concerning the booking system.
     *
     * @type {Tel}
     */
    get bookingSystemContactPhone() {
        return this.data[18];
    }
    set bookingSystemContactPhone(v) {
        this.setterImpl(18, v, 'bookingSystemContactPhone');
    }
    /**
     *  The start day of the accounting period. Should be a value in range [1, 28].
     *
     * @type {Days}
     */
    get accountingPeriodStartDay() {
        return this.data[19];
    }
    set accountingPeriodStartDay(v) {
        this.setterImpl(19, v, 'accountingPeriodStartDay');
    }
    /**
     *  Client's terms page url.
     *
     * @type {Url}
     */
    get termsUrl() {
        return this.data[20];
    }
    set termsUrl(v) {
        this.setterImpl(20, v, 'termsUrl');
    }
    /**
     *  Client's data protection page url.
     *
     * @type {Url}
     */
    get dataProtectionUrl() {
        return this.data[21];
    }
    set dataProtectionUrl(v) {
        this.setterImpl(21, v, 'dataProtectionUrl');
    }
    /**
     *  Client's terms of participation page url.
     *
     * @type {Url}
     */
    get termsOfParticipationUrl() {
        return this.data[22];
    }
    set termsOfParticipationUrl(v) {
        this.setterImpl(22, v, 'termsOfParticipationUrl');
    }
    /**
     *  Client's cancellation policy page url.
     *
     * @type {Url}
     */
    get cancellationPolicyUrl() {
        return this.data[23];
    }
    set cancellationPolicyUrl(v) {
        this.setterImpl(23, v, 'cancellationPolicyUrl');
    }
    /**
     *  Sender name to be set for bookable emails.
     *
     * @type {string}
     */
    get bookableMailsSenderName() {
        return this.data[24];
    }
    set bookableMailsSenderName(v) {
        this.setterImpl(24, v, 'bookableMailsSenderName');
    }
    /**
     *  After which period should a bookable be anonymized? The relevant date is for bookings the last shift of a course or for vouchers the expiration date (if one exists).
     *
     * @type {Months}
     */
    get automaticBookableAnonymizationAfterPeriod() {
        return this.data[25];
    }
    set automaticBookableAnonymizationAfterPeriod(v) {
        this.setterImpl(25, v, 'automaticBookableAnonymizationAfterPeriod');
    }
    /**
     *  When will automatic bookable anonymization be executed next time?
     *
     * @type {DateTime}
     */
    get nextAutomaticBookableAnonymization() {
        return this.data[26];
    }
    set nextAutomaticBookableAnonymizationTestSetter(v) {
        this.setterImpl(26, v, 'nextAutomaticBookableAnonymization');
    }
    /**
     *  Password for opening the automatic bookable anonymization exports.
     *
     * @type {Password}
     */
    get automaticBookableAnonymizationExportPassword() {
        return this.data[27];
    }
    set automaticBookableAnonymizationExportPasswordTestSetter(v) {
        this.setterImpl(27, v, 'automaticBookableAnonymizationExportPassword');
    }
    /**
     *  Password for opening the payout-export in an payout-success-mail.
     *
     * @type {Password}
     */
    get payoutNotificationExportPassword() {
        return this.data[28];
    }
    set payoutNotificationExportPasswordTestSetter(v) {
        this.setterImpl(28, v, 'payoutNotificationExportPassword');
    }
    /**
     *  The type of this client. You can also use this to transform a test into a paid account.
     *
     * @type {AccountApiType}
     */
    get type() {
        return this.data[29];
    }
    set type(v) {
        this.setterImpl(29, v, 'type');
    }
    /**
     *  The unique customer id. Read-only value.
     *
     * @type {Integer}
     */
    get customerId() {
        return this.data[30];
    }
    set customerIdTestSetter(v) {
        this.setterImpl(30, v, 'customerId');
    }
    /**
     *  Password to be used by the POS system for the Dr. Plano POS api. Read-only.
     *
     * @type {Password}
     */
    get posSystemPassword() {
        return this.data[31];
    }
    set posSystemPasswordTestSetter(v) {
        this.setterImpl(31, v, 'posSystemPassword');
    }
    /**
     *  Is the given paypal account a paypal plus account?
     *
     * @type {boolean}
     */
    get isPaypalPlus() {
        return this.data[32];
    }
    set isPaypalPlus(v) {
        this.setterImpl(32, v, 'isPaypalPlus');
    }
    /**
     *  User's paypal account email for which we have authorization. Read only.
     *
     * @type {Email}
     */
    get paypalAccountEmail() {
        return this.data[33];
    }
    set paypalAccountEmailTestSetter(v) {
        this.setterImpl(33, v, 'paypalAccountEmail');
    }
    /**
     *  Set this value to "true" to generate a authorization url. That url will be returned at value "paypalAuthorizationUrl".
     *
     * @type {boolean}
     */
    get requestPaypalAuthorization() {
        return this.data[34];
    }
    set requestPaypalAuthorization(v) {
        this.setterImpl(34, v, 'requestPaypalAuthorization');
    }
    /**
     *  Forward user to this url to let him give us authorization for his paypal account. Read only.
     *
     * @type {Url}
     */
    get paypalAuthorizationUrl() {
        return this.data[35];
    }
    set paypalAuthorizationUrlTestSetter(v) {
        this.setterImpl(35, v, 'paypalAuthorizationUrl');
    }
    set paypalAuthorizationCode(v) {
        this.setterImpl(36, v, 'paypalAuthorizationCode');
    }
    /**
     *  Discount code which can only be set when transforming account to a paid account.
     *
     * @type {string}
     */
    get discountCode() {
        return this.data[37];
    }
    set discountCode(v) {
        this.setterImpl(37, v, 'discountCode');
    }
    _fixIds(_idReplacements) {
        this.billingWrapper._fixIds(_idReplacements);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 38);
            if (data[10] === null)
                data[10] = Meta.createNewObject(false);
            data[32] = false;
            data[34] = false;
        }
        // propagate new raw data to children
        this.billingWrapper._updateRawData(data ? data[10] : null, generateMissingData);
    }
    get dni() {
        return '1';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '1', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export var AccountApiCountry;
(function (AccountApiCountry) {
    AccountApiCountry[AccountApiCountry["GERMANY"] = 1] = "GERMANY";
    AccountApiCountry[AccountApiCountry["AUSTRIA"] = 2] = "AUSTRIA";
    AccountApiCountry[AccountApiCountry["SWITZERLAND"] = 3] = "SWITZERLAND";
    AccountApiCountry[AccountApiCountry["NETHERLANDS"] = 4] = "NETHERLANDS";
    AccountApiCountry[AccountApiCountry["BELGIUM"] = 5] = "BELGIUM";
    AccountApiCountry[AccountApiCountry["UNITED_KINGDOM"] = 6] = "UNITED_KINGDOM";
    AccountApiCountry[AccountApiCountry["CZECH_REPUBLIC"] = 7] = "CZECH_REPUBLIC";
    AccountApiCountry[AccountApiCountry["SWEDEN"] = 8] = "SWEDEN";
    AccountApiCountry[AccountApiCountry["LUXEMBOURG"] = 9] = "LUXEMBOURG";
})(AccountApiCountry || (AccountApiCountry = {}));
export class AccountApiBilling extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, AccountApiBilling);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'billing',
            id: 'BILLING',
            show: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            canEdit: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return true;
                }
                return false;
            },
        });
        this.attributeInfoBankAccountOwner = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'bankAccountOwner',
            id: 'BILLING_BANK_ACCOUNT_OWNER',
            primitiveType: PApiPrimitiveTypes.string,
            validations: function () {
                return [
                    () => {
                        if (((this.parent.type === AccountApiType.PAID || this.parent.type === AccountApiType.TERMINATED || this.parent.transformingToPaidAccount))) {
                            return this.api.validators.required(PApiPrimitiveTypes.string, undefined);
                        }
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoBankAccountIban = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'bankAccountIban',
            id: 'BILLING_BANK_ACCOUNT_IBAN',
            primitiveType: PApiPrimitiveTypes.Iban,
            validations: function () {
                return [
                    () => {
                        if (((this.parent.type === AccountApiType.PAID || this.parent.type === AccountApiType.TERMINATED || this.parent.transformingToPaidAccount))) {
                            return this.api.validators.required(PApiPrimitiveTypes.Iban, undefined);
                        }
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoBankAccountBic = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'bankAccountBic',
            id: 'BILLING_BANK_ACCOUNT_BIC',
            primitiveType: PApiPrimitiveTypes.Bic,
            validations: function () {
                return [
                    () => {
                        if (((this.parent.type === AccountApiType.PAID || this.parent.type === AccountApiType.TERMINATED || this.parent.transformingToPaidAccount))) {
                            return this.api.validators.required(PApiPrimitiveTypes.Bic, undefined);
                        }
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoVatNumber = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'vatNumber',
            id: 'BILLING_VAT_NUMBER',
            primitiveType: PApiPrimitiveTypes.string,
            show: function () {
                if (!((this.country !== AccountApiCountry.GERMANY))) {
                    return false;
                }
                return true;
            },
            validations: function () {
                return [
                    () => {
                        if (((this.country !== AccountApiCountry.GERMANY) && (this.parent.type === AccountApiType.PAID || this.parent.type === AccountApiType.TERMINATED || this.parent.transformingToPaidAccount))) {
                            return this.api.validators.required(PApiPrimitiveTypes.string, undefined);
                        }
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoContactFirstName = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'contactFirstName',
            id: 'BILLING_CONTACT_FIRST_NAME',
            primitiveType: PApiPrimitiveTypes.string,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.string, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoContactLastName = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'contactLastName',
            id: 'BILLING_CONTACT_LAST_NAME',
            primitiveType: PApiPrimitiveTypes.string,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.string, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoBillAddressIsLocationAddress = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'billAddressIsLocationAddress',
            id: 'BILLING_BILL_ADDRESS_IS_LOCATION_ADDRESS',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoContactEmail = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'contactEmail',
            id: 'BILLING_CONTACT_EMAIL',
            primitiveType: PApiPrimitiveTypes.Email,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Email, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoContactPhone = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'contactPhone',
            id: 'BILLING_CONTACT_PHONE',
            primitiveType: PApiPrimitiveTypes.Tel,
        });
        this.attributeInfoStreetAndHouseNumber = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'streetAndHouseNumber',
            id: 'BILLING_STREET_AND_HOUSE_NUMBER',
            primitiveType: PApiPrimitiveTypes.string,
            canEdit: function () {
                if (!((!this.billAddressIsLocationAddress))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
            validations: function () {
                return [
                    () => {
                        if (((this.parent.type === AccountApiType.PAID || this.parent.type === AccountApiType.TERMINATED || this.parent.transformingToPaidAccount))) {
                            return this.api.validators.required(PApiPrimitiveTypes.string, undefined);
                        }
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoPostalCode = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'postalCode',
            id: 'BILLING_POSTAL_CODE',
            primitiveType: PApiPrimitiveTypes.PostalCode,
            canEdit: function () {
                if (!((!this.billAddressIsLocationAddress))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
            validations: function () {
                return [
                    () => {
                        if (((this.parent.type === AccountApiType.PAID || this.parent.type === AccountApiType.TERMINATED || this.parent.transformingToPaidAccount))) {
                            return this.api.validators.required(PApiPrimitiveTypes.PostalCode, undefined);
                        }
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoCity = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'city',
            id: 'BILLING_CITY',
            primitiveType: PApiPrimitiveTypes.string,
            canEdit: function () {
                if (!((!this.billAddressIsLocationAddress))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
            validations: function () {
                return [
                    () => {
                        if (((this.parent.type === AccountApiType.PAID || this.parent.type === AccountApiType.TERMINATED || this.parent.transformingToPaidAccount))) {
                            return this.api.validators.required(PApiPrimitiveTypes.string, undefined);
                        }
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoCountry = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'country',
            id: 'BILLING_COUNTRY',
            primitiveType: PApiPrimitiveTypes.Enum,
            canEdit: function () {
                if (!((!this.billAddressIsLocationAddress))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
            validations: function () {
                return [
                    () => {
                        if (((this.parent.type === AccountApiType.PAID || this.parent.type === AccountApiType.TERMINATED || this.parent.transformingToPaidAccount))) {
                            return this.api.validators.required(PApiPrimitiveTypes.Enum, undefined);
                        }
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoActiveMembersCountForNextPricing = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'activeMembersCountForNextPricing',
            id: 'BILLING_ACTIVE_MEMBERS_COUNT_FOR_NEXT_PRICING',
            primitiveType: PApiPrimitiveTypes.Integer,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoBillomatCustomerPortalUrl = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'billomatCustomerPortalUrl',
            id: 'BILLING_BILLOMAT_CUSTOMER_PORTAL_URL',
            primitiveType: PApiPrimitiveTypes.Url,
            canEdit: () => false,
            readMode: () => true,
        });
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  Owner name of the bank account
     *
     * @type {string}
     */
    get bankAccountOwner() {
        return this.data[1];
    }
    set bankAccountOwner(v) {
        this.setterImpl(1, v, 'bankAccountOwner');
    }
    /**
     *  IBAN of the Bank account
     *
     * @type {Iban}
     */
    get bankAccountIban() {
        return this.data[2];
    }
    set bankAccountIban(v) {
        this.setterImpl(2, v, 'bankAccountIban');
    }
    /**
     *  BIC of the Bank account
     *
     * @type {Bic}
     */
    get bankAccountBic() {
        return this.data[3];
    }
    set bankAccountBic(v) {
        this.setterImpl(3, v, 'bankAccountBic');
    }
    /**
     *  VAT Number of the company
     *
     * @type {string}
     */
    get vatNumber() {
        return this.data[4];
    }
    set vatNumber(v) {
        this.setterImpl(4, v, 'vatNumber');
    }
    /**
     *  First name of the person we can contact concerning bills.
     *
     * @type {string}
     */
    get contactFirstName() {
        return this.data[5];
    }
    set contactFirstName(v) {
        this.setterImpl(5, v, 'contactFirstName');
    }
    /**
     *  Last name of the person we can contact concerning bills.
     *
     * @type {string}
     */
    get contactLastName() {
        return this.data[6];
    }
    set contactLastName(v) {
        this.setterImpl(6, v, 'contactLastName');
    }
    /**
     *  true if the bill address is equal the location address.
     *
     * @type {boolean}
     */
    get billAddressIsLocationAddress() {
        return this.data[7];
    }
    set billAddressIsLocationAddress(v) {
        this.setterImpl(7, v, 'billAddressIsLocationAddress', () => {
            if (this.parent.transformingToPaidAccount && this.billAddressIsLocationAddress) {
                this.streetAndHouseNumber = this.parent.locationStreetAndHouseNumber;
                this.postalCode = this.parent.locationPostalCode;
                this.city = this.parent.locationCity;
                this.country = this.parent.locationCountry;
            }
        });
    }
    /**
     *  Email of the person we can contact concerning bills.
     *
     * @type {Email}
     */
    get contactEmail() {
        return this.data[8];
    }
    set contactEmail(v) {
        this.setterImpl(8, v, 'contactEmail');
    }
    /**
     *  Phone of the person we can contact concerning bills.
     *
     * @type {Tel}
     */
    get contactPhone() {
        return this.data[9];
    }
    set contactPhone(v) {
        this.setterImpl(9, v, 'contactPhone');
    }
    /**
     *  Street and house number of the bill recipient
     *
     * @type {string}
     */
    get streetAndHouseNumber() {
        return this.data[10];
    }
    set streetAndHouseNumber(v) {
        this.setterImpl(10, v, 'streetAndHouseNumber');
    }
    /**
     *  Postal code of the bill recipient
     *
     * @type {PostalCode}
     */
    get postalCode() {
        return this.data[11];
    }
    set postalCode(v) {
        this.setterImpl(11, v, 'postalCode');
    }
    /**
     *  City of the bill recipient
     *
     * @type {string}
     */
    get city() {
        return this.data[12];
    }
    set city(v) {
        this.setterImpl(12, v, 'city');
    }
    /**
     *  bill recipient country
     *
     * @type {AccountApiCountry}
     */
    get country() {
        return this.data[13];
    }
    set country(v) {
        this.setterImpl(13, v, 'country');
    }
    /**
     *  The next count of non-trashed members to reach the next pricing-level. "null" is returned when the billed members-count is capped and thus increasing the members would not result in higher pricing. Read-only.
     *
     * @type {Integer}
     */
    get activeMembersCountForNextPricing() {
        return this.data[14];
    }
    set activeMembersCountForNextPricingTestSetter(v) {
        this.setterImpl(14, v, 'activeMembersCountForNextPricing');
    }
    /**
     *  Url for Billomat's customer portal to access all invoices. Read-only.
     *
     * @type {Url}
     */
    get billomatCustomerPortalUrl() {
        return this.data[15];
    }
    set billomatCustomerPortalUrlTestSetter(v) {
        this.setterImpl(15, v, 'billomatCustomerPortalUrl');
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 16);
            data[7] = false;
        }
        // propagate new raw data to children
    }
    get dni() {
        return '11';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '11', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export var AccountApiType;
(function (AccountApiType) {
    AccountApiType[AccountApiType["TEST_NEED_VERIFICATION"] = 1] = "TEST_NEED_VERIFICATION";
    AccountApiType[AccountApiType["TEST"] = 2] = "TEST";
    AccountApiType[AccountApiType["TEST_EXPIRED"] = 3] = "TEST_EXPIRED";
    AccountApiType[AccountApiType["PAID"] = 4] = "PAID";
    AccountApiType[AccountApiType["TERMINATED"] = 5] = "TERMINATED";
})(AccountApiType || (AccountApiType = {}));
//# sourceMappingURL=account-api.service.ag.js.map