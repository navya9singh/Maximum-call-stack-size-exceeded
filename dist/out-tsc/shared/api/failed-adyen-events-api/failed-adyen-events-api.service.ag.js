var _a, _b, _c, _d;
import { __decorate, __metadata } from "tslib";
import { Injectable, NgZone, Injector } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Router } from '@angular/router';
import { ApiBase } from '@plano/shared/api/base/api-base';
import { Id } from '@plano/shared/api/base/id';
import { Meta } from '@plano/shared/api/base/meta';
import { ApiAttributeInfo } from '@plano/shared/api/base/api-attribute-info';
import { PApiPrimitiveTypes } from '@plano/shared/api/base/generated-types.ag';
import { ApiListWrapper, ApiObjectWrapper, AuthenticatedApiRole } from '@plano/shared/api';
import { ApiErrorService } from '@plano/shared/api/api-error.service';
/**
 * This service enables access to the api "admin/failed_adyen_events".
 * This file is auto generated by de.sage.scheduler.api_generator.ApiGenerator.
 */
// constants
class Consts {
    constructor() {
        this.FAILED_ADYEN_EVENT_TRIGGER_PROCESSING = 1;
        this.FAILED_ADYEN_EVENT_IS_PLATFORM_EVENT = 2;
        this.FAILED_ADYEN_EVENT_EVENT_JSON = 3;
        this.FAILED_ADYEN_EVENT_AUTO_RETRY_ENABLED = 4;
        this.FAILED_ADYEN_EVENT_DATE_TIME = 5;
        this.FAILED_ADYEN_EVENT_ERROR = 6;
    }
}
let FailedAdyenEventsApiService = class FailedAdyenEventsApiService extends ApiBase {
    constructor(h, router, apiE, zone, injector) {
        super(h, router, apiE, zone, injector, 'admin/failed_adyen_events');
        this.consts = new Consts();
        this.dataWrapper = new FailedAdyenEventsApiRoot(this, false);
    }
    version() {
        return 'c81a86888ea1a6c1c1b20040f9924ef9,bc85bf1cc45416e6bec76b761599fa7c';
    }
    get data() {
        return this.dataWrapper;
    }
    getRootWrapper() {
        return this.dataWrapper;
    }
    recreateRootWrapper() {
        this.dataWrapper = new FailedAdyenEventsApiRoot(this, false);
    }
};
FailedAdyenEventsApiService = __decorate([
    Injectable({
        providedIn: 'root',
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof HttpClient !== "undefined" && HttpClient) === "function" ? _a : Object, typeof (_b = typeof Router !== "undefined" && Router) === "function" ? _b : Object, ApiErrorService, typeof (_c = typeof NgZone !== "undefined" && NgZone) === "function" ? _c : Object, typeof (_d = typeof Injector !== "undefined" && Injector) === "function" ? _d : Object])
], FailedAdyenEventsApiService);
export { FailedAdyenEventsApiService };
export class FailedAdyenEventsApiRoot extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, '');
        this.api = api;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: '',
            id: 'ROOT',
            primitiveType: PApiPrimitiveTypes.ApiList,
            show: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.SUPER_ADMIN))))) {
                    return false;
                }
                return true;
            },
            canEdit: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.SUPER_ADMIN))))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.SUPER_ADMIN))))) {
                    return true;
                }
                return false;
            },
        });
    }
    wrapItem(item, _generateMissingData) {
        const newWrapper = new FailedAdyenEventsApiFailedAdyenEvent(this.api);
        newWrapper._updateRawData(item, _generateMissingData);
        return newWrapper;
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return false;
    }
    createInstance(removeDestroyedItems) {
        return new FailedAdyenEventsApiRoot(this.api, removeDestroyedItems);
    }
    get dni() {
        return '1';
    }
    createNewItem(id = null) {
        const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('');
        return newItem;
    }
}
export class FailedAdyenEventsApiFailedAdyenEvent extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, FailedAdyenEventsApiFailedAdyenEvent);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'failedAdyenEvent',
            id: 'FAILED_ADYEN_EVENT',
        });
        this.attributeInfoTriggerProcessing = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'triggerProcessing',
            id: 'FAILED_ADYEN_EVENT_TRIGGER_PROCESSING',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoIsPlatformEvent = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'isPlatformEvent',
            id: 'FAILED_ADYEN_EVENT_IS_PLATFORM_EVENT',
            primitiveType: PApiPrimitiveTypes.boolean,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoEventJson = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'eventJson',
            id: 'FAILED_ADYEN_EVENT_EVENT_JSON',
            primitiveType: PApiPrimitiveTypes.string,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoAutoRetryEnabled = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'autoRetryEnabled',
            id: 'FAILED_ADYEN_EVENT_AUTO_RETRY_ENABLED',
            primitiveType: PApiPrimitiveTypes.boolean,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoDateTime = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'dateTime',
            id: 'FAILED_ADYEN_EVENT_DATE_TIME',
            primitiveType: PApiPrimitiveTypes.DateTime,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoError = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'error',
            id: 'FAILED_ADYEN_EVENT_ERROR',
            primitiveType: PApiPrimitiveTypes.string,
            canEdit: () => false,
            readMode: () => true,
        });
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  Set this to "true" to process the event now. In case the event could be handled without problems then it will automatically be deleted.
     *
     * @type {boolean}
     */
    get triggerProcessing() {
        return this.data[1];
    }
    set triggerProcessing(v) {
        this.setterImpl(1, v, 'triggerProcessing');
    }
    /**
     *  The type of the failed event.
     *
     * @type {boolean}
     */
    get isPlatformEvent() {
        return this.data[2];
    }
    set isPlatformEventTestSetter(v) {
        this.setterImpl(2, v, 'isPlatformEvent');
    }
    /**
     *  The body of the webhook event.
     *
     * @type {string}
     */
    get eventJson() {
        return this.data[3];
    }
    set eventJsonTestSetter(v) {
        this.setterImpl(3, v, 'eventJson');
    }
    /**
     *  Should this event automatically be processed again?
     *
     * @type {boolean}
     */
    get autoRetryEnabled() {
        return this.data[4];
    }
    set autoRetryEnabledTestSetter(v) {
        this.setterImpl(4, v, 'autoRetryEnabled');
    }
    /**
     *  When was this event received?
     *
     * @type {DateTime}
     */
    get dateTime() {
        return this.data[5];
    }
    set dateTimeTestSetter(v) {
        this.setterImpl(5, v, 'dateTime');
    }
    /**
     *  The error which happened during processing of this event.
     *
     * @type {string}
     */
    get error() {
        return this.data[6];
    }
    set errorTestSetter(v) {
        this.setterImpl(6, v, 'error');
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 7);
            data[1] = false;
            data[2] = false;
            data[4] = false;
        }
        // propagate new raw data to children
    }
    get dni() {
        return '2';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '2', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
//# sourceMappingURL=failed-adyen-events-api.service.ag.js.map