var _a, _b, _c, _d;
import { __decorate, __metadata } from "tslib";
import { Injectable, NgZone, Injector } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Router } from '@angular/router';
import { ApiBase } from '@plano/shared/api/base/api-base';
import { Id } from '@plano/shared/api/base/id';
import { Meta } from '@plano/shared/api/base/meta';
import { ApiAttributeInfo } from '@plano/shared/api/base/api-attribute-info';
import { PApiPrimitiveTypes } from '@plano/shared/api/base/generated-types.ag';
import { ApiObjectWrapper } from '@plano/shared/api';
import { ApiErrorService } from '@plano/shared/api/api-error.service';
/**
 * This service enables access to the api "subscribe_newsletter".
 * This file is auto generated by de.sage.scheduler.api_generator.ApiGenerator.
 */
// constants
class Consts {
    constructor() {
        this.EMAIL = 1;
        this.FIRST_NAME = 2;
        this.LAST_NAME = 3;
        this.COMPANY = 4;
        this.LOCALE_ID = 5;
    }
}
let SubscribeNewsletterApiService = class SubscribeNewsletterApiService extends ApiBase {
    constructor(h, router, apiE, zone, injector) {
        super(h, router, apiE, zone, injector, 'subscribe_newsletter');
        this.consts = new Consts();
        this.dataWrapper = new SubscribeNewsletterApiRoot(this);
    }
    version() {
        return '0154a4a7a2852dae6f8c1bd6c7c6d8a4,6b518b408f955064cfd095fa252545aa';
    }
    get data() {
        return this.dataWrapper;
    }
    getRootWrapper() {
        return this.dataWrapper;
    }
    recreateRootWrapper() {
        this.dataWrapper = new SubscribeNewsletterApiRoot(this);
    }
};
SubscribeNewsletterApiService = __decorate([
    Injectable({
        providedIn: 'root',
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof HttpClient !== "undefined" && HttpClient) === "function" ? _a : Object, typeof (_b = typeof Router !== "undefined" && Router) === "function" ? _b : Object, ApiErrorService, typeof (_c = typeof NgZone !== "undefined" && NgZone) === "function" ? _c : Object, typeof (_d = typeof Injector !== "undefined" && Injector) === "function" ? _d : Object])
], SubscribeNewsletterApiService);
export { SubscribeNewsletterApiService };
export class SubscribeNewsletterApiRoot extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, SubscribeNewsletterApiRoot);
        this.api = api;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: '',
            id: 'ROOT',
        });
        this.attributeInfoEmail = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'email',
            id: 'EMAIL',
            primitiveType: PApiPrimitiveTypes.Email,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Email, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoFirstName = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'firstName',
            id: 'FIRST_NAME',
            primitiveType: PApiPrimitiveTypes.string,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.string, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoLastName = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'lastName',
            id: 'LAST_NAME',
            primitiveType: PApiPrimitiveTypes.string,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.string, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoCompany = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'company',
            id: 'COMPANY',
            primitiveType: PApiPrimitiveTypes.string,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.string, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoLocaleId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'localeId',
            id: 'LOCALE_ID',
            primitiveType: PApiPrimitiveTypes.string,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.string, undefined);
                        return null;
                    },
                ];
            },
        });
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    set email(v) {
        this.setterImpl(1, v, 'email');
    }
    set firstName(v) {
        this.setterImpl(2, v, 'firstName');
    }
    set lastName(v) {
        this.setterImpl(3, v, 'lastName');
    }
    set company(v) {
        this.setterImpl(4, v, 'company');
    }
    set localeId(v) {
        this.setterImpl(5, v, 'localeId');
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 6);
        }
        // propagate new raw data to children
    }
    get dni() {
        return '1';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '1', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
//# sourceMappingURL=subscribe-newsletter-api.service.ag.js.map