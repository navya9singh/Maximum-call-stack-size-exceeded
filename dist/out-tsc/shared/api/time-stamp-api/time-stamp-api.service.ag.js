var _a, _b, _c, _d;
import { __decorate, __metadata } from "tslib";
import { Injectable, NgZone, Injector } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Router } from '@angular/router';
import { ApiBase } from '@plano/shared/api/base/api-base';
import { Id } from '@plano/shared/api/base/id';
import { Meta } from '@plano/shared/api/base/meta';
import { ApiAttributeInfo } from '@plano/shared/api/base/api-attribute-info';
import { PApiPrimitiveTypes } from '@plano/shared/api/base/generated-types.ag';
import { ShiftId, ApiListWrapper, ApiObjectWrapper, AuthenticatedApiRole } from '@plano/shared/api';
import { ApiErrorService } from '@plano/shared/api/api-error.service';
import { TimeStampApiRoot } from '@plano/shared/api';
import { TimeStampApiShifts } from '@plano/shared/api';
import { TimeStampApiShift } from '@plano/shared/api';
import { TimeStampApiShiftModels } from '@plano/shared/api';
import { TimeStampApiShiftModel } from '@plano/shared/api';
import { TimeStampApiStampedMember } from '@plano/shared/api';
import { TimeStampApiAllowedTimeStampDevices } from '@plano/shared/api';
import { TimeStampApiAllowedTimeStampDevice } from '@plano/shared/api';
/**
 * This service enables access to the api "time_stamp".
 * This file is auto generated by de.sage.scheduler.api_generator.ApiGenerator.
 */
// constants
class Consts {
    constructor() {
        this.START = 1;
        this.END = 2;
        this.COMMENT = 3;
        this.COMPLETED_REGULAR_PAUSES_DURATION = 4;
        this.UNCOMPLETED_REGULAR_PAUSE_START = 5;
        this.AUTOMATIC_PAUSE_DURATION = 6;
        this.SELECTED_SHIFT_ID = 7;
        this.SELECTED_SHIFT_MODEL_ID = 8;
        this.SHIFTS = 9;
        this.SHIFT_MODELS = 10;
        this.STAMPED_MEMBERS = 11;
        this.ALLOWED_TIME_STAMP_DEVICES = 12;
        this.WARN_UNPLANNED_WORK = 13;
        this.WARN_STAMPED_NOT_CURRENT_TIME = 14;
        this.WARN_STAMPED_NOT_SHIFT_TIME = 15;
        this.WHEN_MEMBER_STAMPED_START = 16;
        this.SHIFT_START = 1;
        this.SHIFT_END = 2;
        this.SHIFT_MODEL_ID = 3;
        this.SHIFT_MODEL_COLOR = 1;
        this.SHIFT_MODEL_TIME = 2;
        this.SHIFT_MODEL_PARENT_NAME = 3;
        this.SHIFT_MODEL_NAME = 4;
        this.SHIFT_MODEL_TRASHED = 5;
        this.SHIFT_MODEL_ASSIGNABLE = 6;
        this.SHIFT_MODEL_TIME_START = 1;
        this.STAMPED_MEMBER_FIRST_NAME = 1;
        this.STAMPED_MEMBER_LAST_NAME = 2;
        this.STAMPED_MEMBER_PAUSING = 3;
        this.STAMPED_MEMBER_ACTIVITY_START = 4;
        this.ALLOWED_TIME_STAMP_DEVICE_NAME = 1;
        this.ALLOWED_TIME_STAMP_DEVICE_VISITOR_ID = 2;
        this.ALLOWED_TIME_STAMP_DEVICE_BROWSER_NAME = 3;
    }
}
let TimeStampApiServiceBase = class TimeStampApiServiceBase extends ApiBase {
    constructor(h, router, apiE, zone, injector) {
        super(h, router, apiE, zone, injector, 'time_stamp');
        this.consts = new Consts();
        this.dataWrapper = new TimeStampApiRoot(this);
    }
    version() {
        return 'd538db0d6cf899fbce80c16e599e9a4e,d6d31cf25fa1a7c748afbdec560024f6';
    }
    get data() {
        return this.dataWrapper;
    }
    getRootWrapper() {
        return this.dataWrapper;
    }
    recreateRootWrapper() {
        this.dataWrapper = new TimeStampApiRoot(this);
    }
};
TimeStampApiServiceBase = __decorate([
    Injectable({
        providedIn: 'root',
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof HttpClient !== "undefined" && HttpClient) === "function" ? _a : Object, typeof (_b = typeof Router !== "undefined" && Router) === "function" ? _b : Object, ApiErrorService, typeof (_c = typeof NgZone !== "undefined" && NgZone) === "function" ? _c : Object, typeof (_d = typeof Injector !== "undefined" && Injector) === "function" ? _d : Object])
], TimeStampApiServiceBase);
export { TimeStampApiServiceBase };
export class TimeStampApiRootBase extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, TimeStampApiRoot);
        this.api = api;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: '',
            id: 'ROOT',
        });
        this.attributeInfoStart = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'start',
            id: 'START',
            primitiveType: PApiPrimitiveTypes.DateTime,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(+this.api.pMoment.daysFromNow(-7), true, PApiPrimitiveTypes.DateTime, undefined, undefined);
                        return null;
                    },
                    () => {
                        return this.api.validators.max(+this.api.pMoment.m().add(10, 'minutes'), true, PApiPrimitiveTypes.DateTime, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoEnd = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'end',
            id: 'END',
            primitiveType: PApiPrimitiveTypes.DateTime,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(() => this.start, false, PApiPrimitiveTypes.DateTime, 'START', undefined);
                        return null;
                    },
                    () => {
                        return this.api.validators.max(+this.api.pMoment.m().add(10, 'minutes'), true, PApiPrimitiveTypes.DateTime, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoComment = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'comment',
            id: 'COMMENT',
            primitiveType: PApiPrimitiveTypes.string,
        });
        this.attributeInfoCompletedRegularPausesDuration = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'completedRegularPausesDuration',
            id: 'COMPLETED_REGULAR_PAUSES_DURATION',
            primitiveType: PApiPrimitiveTypes.Duration,
        });
        this.attributeInfoUncompletedRegularPauseStart = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'uncompletedRegularPauseStart',
            id: 'UNCOMPLETED_REGULAR_PAUSE_START',
            primitiveType: PApiPrimitiveTypes.DateTime,
        });
        this.attributeInfoAutomaticPauseDuration = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'automaticPauseDuration',
            id: 'AUTOMATIC_PAUSE_DURATION',
            primitiveType: PApiPrimitiveTypes.Duration,
        });
        this.attributeInfoSelectedShiftId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'selectedShiftId',
            id: 'SELECTED_SHIFT_ID',
            primitiveType: PApiPrimitiveTypes.ShiftId,
        });
        this.attributeInfoSelectedShiftModelId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'selectedShiftModelId',
            id: 'SELECTED_SHIFT_MODEL_ID',
            primitiveType: PApiPrimitiveTypes.Id,
        });
        this.attributeInfoWarnUnplannedWork = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'warnUnplannedWork',
            id: 'WARN_UNPLANNED_WORK',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoWarnStampedNotCurrentTime = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'warnStampedNotCurrentTime',
            id: 'WARN_STAMPED_NOT_CURRENT_TIME',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoWarnStampedNotShiftTime = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'warnStampedNotShiftTime',
            id: 'WARN_STAMPED_NOT_SHIFT_TIME',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoWhenMemberStampedStart = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'whenMemberStampedStart',
            id: 'WHEN_MEMBER_STAMPED_START',
            primitiveType: PApiPrimitiveTypes.DateTime,
        });
        this.selectedShiftIdWrapper = null;
        this.selectedShiftModelIdWrapper = null;
        this.shiftsWrapper = new TimeStampApiShifts(this.api, false);
        this.shiftModelsWrapper = new TimeStampApiShiftModels(this.api, false);
        this.stampedMembersWrapper = new TimeStampApiStampedMembers(this.api, false);
        this.allowedTimeStampDevicesWrapper = new TimeStampApiAllowedTimeStampDevices(this.api, false);
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
        this.shiftsWrapper.parent = this;
        this.shiftModelsWrapper.parent = this;
        this.stampedMembersWrapper.parent = this;
        this.allowedTimeStampDevicesWrapper.parent = this;
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  Start of working time.
     *
     * @type {DateTime}
     */
    get start() {
        return this.data[1];
    }
    set start(v) {
        this.setterImpl(1, v, 'start');
    }
    /**
     *  End of working time.
     *
     * @type {DateTime}
     */
    get end() {
        return this.data[2];
    }
    set end(v) {
        this.setterImpl(2, v, 'end');
    }
    /**
     *  User comment.
     *
     * @type {string}
     */
    get comment() {
        return this.data[3];
    }
    set comment(v) {
        this.setterImpl(3, v, 'comment');
    }
    /**
     *  The duration of all the regular pauses (done by member) which have been completed in milliseconds.
     *
     * @type {Duration}
     */
    get completedRegularPausesDuration() {
        return this.data[4];
    }
    set completedRegularPausesDuration(v) {
        this.setterImpl(4, v, 'completedRegularPausesDuration');
    }
    /**
     *  If there is a regular pause (done by member) running then this value tells when it was started.
     *
     * @type {DateTime}
     */
    get uncompletedRegularPauseStart() {
        return this.data[5];
    }
    set uncompletedRegularPauseStart(v) {
        this.setterImpl(5, v, 'uncompletedRegularPauseStart');
    }
    /**
     *  Duration of automatically calculated pauses (added by Dr. Plano) in milliseconds.
     *
     * @type {Duration}
     */
    get automaticPauseDuration() {
        return this.data[6];
    }
    set automaticPauseDuration(v) {
        this.setterImpl(6, v, 'automaticPauseDuration');
    }
    /**
     *  Id of selected shift.
     *
     * @type {ShiftId}
     */
    get selectedShiftId() {
        return this.selectedShiftIdWrapper;
    }
    set selectedShiftId(v) {
        this.setterImpl(7, v, 'selectedShiftId', () => { this.selectedShiftIdWrapper = v; });
    }
    /**
     *  Id of selected shift model.
     *
     * @type {Id}
     */
    get selectedShiftModelId() {
        return this.selectedShiftModelIdWrapper;
    }
    set selectedShiftModelId(v) {
        this.setterImpl(8, v, 'selectedShiftModelId', () => { this.selectedShiftModelIdWrapper = v; });
    }
    /**
     *  A list of the shifts for which the user can time-stamp. If the time-stamp is running only the selected shift will be returned. If it is an unplanned work then no shifts will be returned.
     */
    get shifts() {
        return this.shiftsWrapper;
    }
    set shiftsTestSetter(v) {
        this.setterImpl(9, v.rawData, 'shifts', () => { this.shiftsWrapper = v; });
    }
    /**
     *  A list of user's shift models.
     */
    get shiftModels() {
        return this.shiftModelsWrapper;
    }
    set shiftModelsTestSetter(v) {
        this.setterImpl(10, v.rawData, 'shiftModels', () => { this.shiftModelsWrapper = v; });
    }
    /**
     *  A list of currently stamped members.
     */
    get stampedMembers() {
        return this.stampedMembersWrapper;
    }
    set stampedMembersTestSetter(v) {
        this.setterImpl(11, v.rawData, 'stampedMembers', () => { this.stampedMembersWrapper = v; });
    }
    /**
     *  A list of allowed time-stamp devices. If this list is empty then all devices are allowed to time-stamp.
     */
    get allowedTimeStampDevices() {
        return this.allowedTimeStampDevicesWrapper;
    }
    set allowedTimeStampDevicesTestSetter(v) {
        this.setterImpl(12, v.rawData, 'allowedTimeStampDevices', () => { this.allowedTimeStampDevicesWrapper = v; });
    }
    /**
     *  Warning that the member is doing an unplanned work. Member should explain this in the comment.
     *
     * @type {boolean}
     */
    get warnUnplannedWork() {
        return this.data[13];
    }
    set warnUnplannedWork(v) {
        this.setterImpl(13, v, 'warnUnplannedWork');
    }
    /**
     *  Warning that the member has not stamped the current time. Member should explain this in the comment.
     *
     * @type {boolean}
     */
    get warnStampedNotCurrentTime() {
        return this.data[14];
    }
    set warnStampedNotCurrentTime(v) {
        this.setterImpl(14, v, 'warnStampedNotCurrentTime');
    }
    /**
     *  Warning that the member has not stamped the shift time. Member should explain this in the comment.
     *
     * @type {boolean}
     */
    get warnStampedNotShiftTime() {
        return this.data[15];
    }
    set warnStampedNotShiftTime(v) {
        this.setterImpl(15, v, 'warnStampedNotShiftTime');
    }
    /**
     *  When was the start-time stamped (using time-stamp).
     *
     * @type {DateTime}
     */
    get whenMemberStampedStart() {
        return this.data[16];
    }
    set whenMemberStampedStart(v) {
        this.setterImpl(16, v, 'whenMemberStampedStart');
    }
    _fixIds(_idReplacements) {
        this.data[7] = Meta.getReplacedId(this.data[7], _idReplacements);
        this.selectedShiftIdWrapper = ShiftId.create(this.data[7]);
        this.data[8] = Meta.getReplacedId(this.data[8], _idReplacements);
        this.selectedShiftModelIdWrapper = Id.create(this.data[8]);
        this.shiftsWrapper._fixIds(_idReplacements);
        this.shiftModelsWrapper._fixIds(_idReplacements);
        this.stampedMembersWrapper._fixIds(_idReplacements);
        this.allowedTimeStampDevicesWrapper._fixIds(_idReplacements);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 17);
            if (data[9] === null)
                data[9] = Meta.createNewList();
            if (data[10] === null)
                data[10] = Meta.createNewList();
            if (data[11] === null)
                data[11] = Meta.createNewList();
            if (data[12] === null)
                data[12] = Meta.createNewList();
            data[13] = false;
            data[14] = false;
            data[15] = false;
        }
        // propagate new raw data to children
        if (!Meta.isSameId(data ? data[7] : null, this.selectedShiftIdWrapper))
            this.selectedShiftIdWrapper = data && data[7] ? ShiftId.create(data[7]) : null;
        if (!Meta.isSameId(data ? data[8] : null, this.selectedShiftModelIdWrapper))
            this.selectedShiftModelIdWrapper = data && data[8] ? Id.create(data[8]) : null;
        this.shiftsWrapper._updateRawData(data ? data[9] : null, generateMissingData);
        this.shiftModelsWrapper._updateRawData(data ? data[10] : null, generateMissingData);
        this.stampedMembersWrapper._updateRawData(data ? data[11] : null, generateMissingData);
        this.allowedTimeStampDevicesWrapper._updateRawData(data ? data[12] : null, generateMissingData);
    }
    get dni() {
        return '1';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '1', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class TimeStampApiShiftsBase extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'shifts');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'shifts',
            id: 'SHIFTS',
            primitiveType: PApiPrimitiveTypes.ApiList,
        });
    }
    wrapItem(item, _generateMissingData) {
        const newWrapper = new TimeStampApiShift(this.api);
        newWrapper._updateRawData(item, _generateMissingData);
        return newWrapper;
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return false;
    }
    createInstance(removeDestroyedItems) {
        return new TimeStampApiShifts(this.api, removeDestroyedItems);
    }
    get dni() {
        return '10';
    }
    createNewItem(id = null) {
        const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('shifts');
        return newItem;
    }
}
export class TimeStampApiShiftBase extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, TimeStampApiShift);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'shift',
            id: 'SHIFT',
        });
        this.attributeInfoStart = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'start',
            id: 'SHIFT_START',
            primitiveType: PApiPrimitiveTypes.DateTime,
        });
        this.attributeInfoEnd = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'end',
            id: 'SHIFT_END',
            primitiveType: PApiPrimitiveTypes.DateTime,
        });
        this.attributeInfoModelId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'modelId',
            id: 'SHIFT_MODEL_ID',
            primitiveType: PApiPrimitiveTypes.Id,
        });
        this.modelIdWrapper = null;
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : ShiftId.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  Start time of shift.
     *
     * @type {DateTime}
     */
    get start() {
        return this.data[1];
    }
    set start(v) {
        this.setterImpl(1, v, 'start');
    }
    /**
     *  End time of shift.
     *
     * @type {DateTime}
     */
    get end() {
        return this.data[2];
    }
    set end(v) {
        this.setterImpl(2, v, 'end');
    }
    /**
     *  Id of the shift model to which this shift belongs.
     *
     * @type {Id}
     */
    get modelId() {
        return this.modelIdWrapper;
    }
    set modelId(v) {
        this.setterImpl(3, v, 'modelId', () => { this.modelIdWrapper = v; });
    }
    _fixIds(_idReplacements) {
        this.data[3] = Meta.getReplacedId(this.data[3], _idReplacements);
        this.modelIdWrapper = Id.create(this.data[3]);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : ShiftId.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 4);
        }
        // propagate new raw data to children
        if (!Meta.isSameId(data ? data[3] : null, this.modelIdWrapper))
            this.modelIdWrapper = data && data[3] ? Id.create(data[3]) : null;
    }
    get dni() {
        return '18';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '18', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class TimeStampApiShiftModelsBase extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'shiftModels');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'shiftModels',
            id: 'SHIFT_MODELS',
            primitiveType: PApiPrimitiveTypes.ApiList,
        });
    }
    wrapItem(item, _generateMissingData) {
        const newWrapper = new TimeStampApiShiftModel(this.api);
        newWrapper._updateRawData(item, _generateMissingData);
        return newWrapper;
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return false;
    }
    createInstance(removeDestroyedItems) {
        return new TimeStampApiShiftModels(this.api, removeDestroyedItems);
    }
    get dni() {
        return '11';
    }
    createNewItem(id = null) {
        const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('shiftModels');
        return newItem;
    }
}
export class TimeStampApiShiftModelBase extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, TimeStampApiShiftModel);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'shiftModel',
            id: 'SHIFT_MODEL',
        });
        this.attributeInfoColor = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'color',
            id: 'SHIFT_MODEL_COLOR',
            primitiveType: PApiPrimitiveTypes.string,
        });
        this.attributeInfoParentName = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'parentName',
            id: 'SHIFT_MODEL_PARENT_NAME',
            primitiveType: PApiPrimitiveTypes.string,
        });
        this.attributeInfoName = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'name',
            id: 'SHIFT_MODEL_NAME',
            primitiveType: PApiPrimitiveTypes.string,
        });
        this.attributeInfoTrashed = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'trashed',
            id: 'SHIFT_MODEL_TRASHED',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoAssignable = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'assignable',
            id: 'SHIFT_MODEL_ASSIGNABLE',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.timeWrapper = new TimeStampApiShiftModelTime(this.api);
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
        this.timeWrapper.parent = this;
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  Color of shift model in format "rrggbb".
     *
     * @type {string}
     */
    get color() {
        return this.data[1];
    }
    set color(v) {
        this.setterImpl(1, v, 'color');
    }
    /**
     *  The time when this shift-model will start (relative to current day).
     */
    get time() {
        return this.timeWrapper;
    }
    set timeTestSetter(v) {
        this.setterImpl(2, v.rawData, 'time', () => { this.timeWrapper = v; });
    }
    /**
     *  Name of the parent.
     *
     * @type {string}
     */
    get parentName() {
        return this.data[3];
    }
    set parentName(v) {
        this.setterImpl(3, v, 'parentName');
    }
    /**
     *  Name of the shift model.
     *
     * @type {string}
     */
    get name() {
        return this.data[4];
    }
    set name(v) {
        this.setterImpl(4, v, 'name');
    }
    /**
     *  Is this shift model trashed?
     *
     * @type {boolean}
     */
    get trashed() {
        return this.data[5];
    }
    set trashed(v) {
        this.setterImpl(5, v, 'trashed');
    }
    /**
     *  Is the requester assignable to this shift-model?
     *
     * @type {boolean}
     */
    get assignable() {
        return this.data[6];
    }
    set assignable(v) {
        this.setterImpl(6, v, 'assignable');
    }
    _fixIds(_idReplacements) {
        this.timeWrapper._fixIds(_idReplacements);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 7);
            if (data[2] === null)
                data[2] = Meta.createNewObject(false);
            data[5] = false;
            data[6] = false;
        }
        // propagate new raw data to children
        this.timeWrapper._updateRawData(data ? data[2] : null, generateMissingData);
    }
    get dni() {
        return '22';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '22', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class TimeStampApiShiftModelTime extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, TimeStampApiShiftModelTime);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'time',
            id: 'SHIFT_MODEL_TIME',
        });
        this.attributeInfoStart = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'start',
            id: 'SHIFT_MODEL_TIME_START',
            primitiveType: PApiPrimitiveTypes.LocalTime,
        });
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  The time when this shift-model will start as milliseconds since the start of the day.
     *
     * @type {LocalTime}
     */
    get start() {
        return this.data[1];
    }
    set start(v) {
        this.setterImpl(1, v, 'start');
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 2);
        }
        // propagate new raw data to children
    }
    get dni() {
        return '24';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '24', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class TimeStampApiStampedMembers extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'stampedMembers');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'stampedMembers',
            id: 'STAMPED_MEMBERS',
            primitiveType: PApiPrimitiveTypes.ApiList,
        });
    }
    wrapItem(item, _generateMissingData) {
        const newWrapper = new TimeStampApiStampedMember(this.api);
        newWrapper._updateRawData(item, _generateMissingData);
        return newWrapper;
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return false;
    }
    createInstance(removeDestroyedItems) {
        return new TimeStampApiStampedMembers(this.api, removeDestroyedItems);
    }
    get dni() {
        return '12';
    }
    createNewItem(id = null) {
        const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('stampedMembers');
        return newItem;
    }
}
export class TimeStampApiStampedMemberBase extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, TimeStampApiStampedMember);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'stampedMember',
            id: 'STAMPED_MEMBER',
        });
        this.attributeInfoFirstName = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'firstName',
            id: 'STAMPED_MEMBER_FIRST_NAME',
            primitiveType: PApiPrimitiveTypes.string,
        });
        this.attributeInfoLastName = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'lastName',
            id: 'STAMPED_MEMBER_LAST_NAME',
            primitiveType: PApiPrimitiveTypes.string,
        });
        this.attributeInfoPausing = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'pausing',
            id: 'STAMPED_MEMBER_PAUSING',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoActivityStart = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'activityStart',
            id: 'STAMPED_MEMBER_ACTIVITY_START',
            primitiveType: PApiPrimitiveTypes.DateTime,
        });
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  First-name of the stamped member.
     *
     * @type {string}
     */
    get firstName() {
        return this.data[1];
    }
    set firstName(v) {
        this.setterImpl(1, v, 'firstName');
    }
    /**
     *  Last-name of the stamped member.
     *
     * @type {string}
     */
    get lastName() {
        return this.data[2];
    }
    set lastName(v) {
        this.setterImpl(2, v, 'lastName');
    }
    /**
     *  Type: Boolean. Is the member taking a pause now? If not then the member is working at the moment.
     *
     * @type {boolean}
     */
    get pausing() {
        return this.data[3];
    }
    set pausing(v) {
        this.setterImpl(3, v, 'pausing');
    }
    /**
     *  Duration between this date-time and current time represents the duration of current activity (pause/working).
     *
     * @type {DateTime}
     */
    get activityStart() {
        return this.data[4];
    }
    set activityStart(v) {
        this.setterImpl(4, v, 'activityStart');
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 5);
            data[3] = false;
        }
        // propagate new raw data to children
    }
    get dni() {
        return '30';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '30', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class TimeStampApiAllowedTimeStampDevicesBase extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'allowedTimeStampDevices');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'allowedTimeStampDevices',
            id: 'ALLOWED_TIME_STAMP_DEVICES',
            primitiveType: PApiPrimitiveTypes.ApiList,
            canEdit: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return true;
                }
                return false;
            },
        });
    }
    wrapItem(item, _generateMissingData) {
        const newWrapper = new TimeStampApiAllowedTimeStampDevice(this.api);
        newWrapper._updateRawData(item, _generateMissingData);
        return newWrapper;
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return false;
    }
    createInstance(removeDestroyedItems) {
        return new TimeStampApiAllowedTimeStampDevices(this.api, removeDestroyedItems);
    }
    get dni() {
        return '13';
    }
    createNewItem(id = null) {
        const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('allowedTimeStampDevices');
        return newItem;
    }
}
export class TimeStampApiAllowedTimeStampDeviceBase extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, TimeStampApiAllowedTimeStampDevice);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'allowedTimeStampDevice',
            id: 'ALLOWED_TIME_STAMP_DEVICE',
        });
        this.attributeInfoName = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'name',
            id: 'ALLOWED_TIME_STAMP_DEVICE_NAME',
            primitiveType: PApiPrimitiveTypes.string,
            canEdit: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))))) {
                    return true;
                }
                return false;
            },
        });
        this.attributeInfoVisitorId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'visitorId',
            id: 'ALLOWED_TIME_STAMP_DEVICE_VISITOR_ID',
            primitiveType: PApiPrimitiveTypes.string,
        });
        this.attributeInfoBrowserName = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'browserName',
            id: 'ALLOWED_TIME_STAMP_DEVICE_BROWSER_NAME',
            primitiveType: PApiPrimitiveTypes.string,
        });
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  User-given name for the device.
     *
     * @type {string}
     */
    get name() {
        return this.data[1];
    }
    set name(v) {
        this.setterImpl(1, v, 'name');
    }
    /**
     *  The unique device id.
     *
     * @type {string}
     */
    get visitorId() {
        return this.data[2];
    }
    set visitorId(v) {
        this.setterImpl(2, v, 'visitorId');
    }
    /**
     *  Browser name.
     *
     * @type {string}
     */
    get browserName() {
        return this.data[3];
    }
    set browserName(v) {
        this.setterImpl(3, v, 'browserName');
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 4);
        }
        // propagate new raw data to children
    }
    get dni() {
        return '35';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '35', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
//# sourceMappingURL=time-stamp-api.service.ag.js.map