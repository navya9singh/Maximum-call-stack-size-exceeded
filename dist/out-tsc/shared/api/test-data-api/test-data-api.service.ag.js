var _a, _b, _c, _d;
import { __decorate, __metadata } from "tslib";
import { Injectable, NgZone, Injector } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Router } from '@angular/router';
import { ApiBase } from '@plano/shared/api/base/api-base';
import { Id } from '@plano/shared/api/base/id';
import { Meta } from '@plano/shared/api/base/meta';
import { ApiAttributeInfo } from '@plano/shared/api/base/api-attribute-info';
import { PApiPrimitiveTypes } from '@plano/shared/api/base/generated-types.ag';
import { ApiListWrapper, ApiObjectWrapper, AuthenticatedApiRole } from '@plano/shared/api';
import { ApiErrorService } from '@plano/shared/api/api-error.service';
/**
 * This service enables access to the api "admin/test_data".
 * This file is auto generated by de.sage.scheduler.api_generator.ApiGenerator.
 */
// constants
class Consts {
    constructor() {
        this.COUNTRIES = 1;
        this.CREATED_CLIENT_IDS = 2;
        this.CREATED_CLIENT_OWNER_EMAILS = 3;
    }
}
let TestDataApiService = class TestDataApiService extends ApiBase {
    constructor(h, router, apiE, zone, injector) {
        super(h, router, apiE, zone, injector, 'admin/test_data');
        this.consts = new Consts();
        this.dataWrapper = new TestDataApiRoot(this);
    }
    version() {
        return 'ac3dca8ad0d4ce72beed2b966c969aa9,8e2e06858be0c993adca2672aee5e9bb';
    }
    get data() {
        return this.dataWrapper;
    }
    getRootWrapper() {
        return this.dataWrapper;
    }
    recreateRootWrapper() {
        this.dataWrapper = new TestDataApiRoot(this);
    }
};
TestDataApiService = __decorate([
    Injectable({
        providedIn: 'root',
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof HttpClient !== "undefined" && HttpClient) === "function" ? _a : Object, typeof (_b = typeof Router !== "undefined" && Router) === "function" ? _b : Object, ApiErrorService, typeof (_c = typeof NgZone !== "undefined" && NgZone) === "function" ? _c : Object, typeof (_d = typeof Injector !== "undefined" && Injector) === "function" ? _d : Object])
], TestDataApiService);
export { TestDataApiService };
export class TestDataApiRoot extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, TestDataApiRoot);
        this.api = api;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: '',
            id: 'ROOT',
            show: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.SUPER_ADMIN))))) {
                    return false;
                }
                return true;
            },
            canEdit: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.SUPER_ADMIN))))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.SUPER_ADMIN))))) {
                    return true;
                }
                return false;
            },
        });
        this.countriesWrapper = new TestDataApiCountries(this.api, false);
        this.createdClientIdsWrapper = new TestDataApiCreatedClientIds(this.api, false);
        this.createdClientOwnerEmailsWrapper = new TestDataApiCreatedClientOwnerEmails(this.api, false);
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
        this.countriesWrapper.parent = this;
        this.createdClientIdsWrapper.parent = this;
        this.createdClientOwnerEmailsWrapper.parent = this;
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  For which countries should a test client be created?
     */
    get countries() {
        return this.countriesWrapper;
    }
    set countriesTestSetter(v) {
        this.setterImpl(1, v.rawData, 'countries', () => { this.countriesWrapper = v; });
    }
    /**
     *  Returns here the ids of the created clients
     */
    get createdClientIds() {
        return this.createdClientIdsWrapper;
    }
    set createdClientIdsTestSetter(v) {
        this.setterImpl(2, v.rawData, 'createdClientIds', () => { this.createdClientIdsWrapper = v; });
    }
    /**
     *  Returns here the email addresses of the client-owners created for these clients.
     */
    get createdClientOwnerEmails() {
        return this.createdClientOwnerEmailsWrapper;
    }
    set createdClientOwnerEmailsTestSetter(v) {
        this.setterImpl(3, v.rawData, 'createdClientOwnerEmails', () => { this.createdClientOwnerEmailsWrapper = v; });
    }
    _fixIds(_idReplacements) {
        this.countriesWrapper._fixIds(_idReplacements);
        this.createdClientIdsWrapper._fixIds(_idReplacements);
        this.createdClientOwnerEmailsWrapper._fixIds(_idReplacements);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 4);
            if (data[1] === null)
                data[1] = Meta.createNewList();
            if (data[2] === null)
                data[2] = Meta.createNewList();
            if (data[3] === null)
                data[3] = Meta.createNewList();
        }
        // propagate new raw data to children
        this.countriesWrapper._updateRawData(data ? data[1] : null, generateMissingData);
        this.createdClientIdsWrapper._updateRawData(data ? data[2] : null, generateMissingData);
        this.createdClientOwnerEmailsWrapper._updateRawData(data ? data[3] : null, generateMissingData);
    }
    get dni() {
        return '1';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '1', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class TestDataApiCountries extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'countries');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'countries',
            id: 'COUNTRIES',
            primitiveType: PApiPrimitiveTypes.ApiList,
        });
        this.attributeInfoCountry = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'country',
            id: 'COUNTRY',
            primitiveType: PApiPrimitiveTypes.Enum,
        });
    }
    wrapItem(item, _generateMissingData) {
        return item;
    }
    containsPrimitives() {
        return true;
    }
    containsIds() {
        return false;
    }
    createInstance(removeDestroyedItems) {
        return new TestDataApiCountries(this.api, removeDestroyedItems);
    }
    get dni() {
        return '2';
    }
    createNewItem() {
        const newItemRaw = null;
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('countries');
        return newItem;
    }
}
export var TestDataApiCountry;
(function (TestDataApiCountry) {
    TestDataApiCountry[TestDataApiCountry["GERMANY"] = 1] = "GERMANY";
    TestDataApiCountry[TestDataApiCountry["AUSTRIA"] = 2] = "AUSTRIA";
    TestDataApiCountry[TestDataApiCountry["SWITZERLAND"] = 3] = "SWITZERLAND";
    TestDataApiCountry[TestDataApiCountry["NETHERLANDS"] = 4] = "NETHERLANDS";
    TestDataApiCountry[TestDataApiCountry["BELGIUM"] = 5] = "BELGIUM";
    TestDataApiCountry[TestDataApiCountry["UNITED_KINGDOM"] = 6] = "UNITED_KINGDOM";
    TestDataApiCountry[TestDataApiCountry["CZECH_REPUBLIC"] = 7] = "CZECH_REPUBLIC";
    TestDataApiCountry[TestDataApiCountry["SWEDEN"] = 8] = "SWEDEN";
    TestDataApiCountry[TestDataApiCountry["LUXEMBOURG"] = 9] = "LUXEMBOURG";
})(TestDataApiCountry || (TestDataApiCountry = {}));
export class TestDataApiCreatedClientIds extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'createdClientIds');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'createdClientIds',
            id: 'CREATED_CLIENT_IDS',
            primitiveType: PApiPrimitiveTypes.ApiList,
        });
        this.attributeInfoCreatedClientId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'createdClientId',
            id: 'CREATED_CLIENT_ID',
            primitiveType: PApiPrimitiveTypes.Id,
        });
    }
    wrapItem(item, _generateMissingData) {
        return Id.create(item);
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return true;
    }
    createInstance(removeDestroyedItems) {
        return new TestDataApiCreatedClientIds(this.api, removeDestroyedItems);
    }
    get dni() {
        return '3';
    }
    createNewItem() {
        const newItemRaw = null;
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('createdClientIds');
        return newItem;
    }
}
export class TestDataApiCreatedClientOwnerEmails extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, 'createdClientOwnerEmails');
        this.api = api;
        this.parent = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'createdClientOwnerEmails',
            id: 'CREATED_CLIENT_OWNER_EMAILS',
            primitiveType: PApiPrimitiveTypes.ApiList,
        });
        this.attributeInfoCreatedClientOwnerEmail = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'createdClientOwnerEmail',
            id: 'CREATED_CLIENT_OWNER_EMAIL',
            primitiveType: PApiPrimitiveTypes.Email,
        });
    }
    wrapItem(item, _generateMissingData) {
        return item;
    }
    containsPrimitives() {
        return true;
    }
    containsIds() {
        return false;
    }
    createInstance(removeDestroyedItems) {
        return new TestDataApiCreatedClientOwnerEmails(this.api, removeDestroyedItems);
    }
    get dni() {
        return '4';
    }
    createNewItem() {
        const newItemRaw = null;
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('createdClientOwnerEmails');
        return newItem;
    }
}
//# sourceMappingURL=test-data-api.service.ag.js.map