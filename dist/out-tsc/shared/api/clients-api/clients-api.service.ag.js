var _a, _b, _c, _d;
import { __decorate, __metadata } from "tslib";
import { Injectable, NgZone, Injector } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Router } from '@angular/router';
import { ApiBase } from '@plano/shared/api/base/api-base';
import { Id } from '@plano/shared/api/base/id';
import { Meta } from '@plano/shared/api/base/meta';
import { ApiAttributeInfo } from '@plano/shared/api/base/api-attribute-info';
import { PApiPrimitiveTypes } from '@plano/shared/api/base/generated-types.ag';
import { ApiListWrapper, ApiObjectWrapper, AuthenticatedApiRole } from '@plano/shared/api';
import { ApiErrorService } from '@plano/shared/api/api-error.service';
import { ClientsApiClient } from '@plano/shared/api';
/**
 * This service enables access to the api "admin/clients".
 * This file is auto generated by de.sage.scheduler.api_generator.ApiGenerator.
 */
// constants
class Consts {
    constructor() {
        this.CLIENT_COMPANY_NAME = 1;
        this.CLIENT_LOCATION_NAME = 2;
        this.CLIENT_TYPE = 3;
        this.CLIENT_TEST_ACCOUNT_DEADLINE = 4;
        this.CLIENT_TERMINATION_DATE = 5;
        this.CLIENT_LOCATION_COUNTRY = 6;
        this.CLIENT_ADYEN_ACCOUNT = 7;
        this.CLIENT_BILLING = 8;
        this.CLIENT_TEST_ACCOUNT_DURATION = 9;
        this.CLIENT_BILLING_COUNTRY = 1;
        this.CLIENT_BILLING_HAS_TO_PAY_VAT = 2;
        this.CLIENT_BILLING_DISABLE_INVOICE_CREATION = 3;
        this.CLIENT_BILLING_VAT_NUMBER = 4;
        this.CLIENT_BILLING_DISCOUNT_VALUE = 5;
        this.CLIENT_BILLING_DISCOUNT_TYPE = 6;
        this.CLIENT_BILLING_DISCOUNT_START = 7;
        this.CLIENT_BILLING_DISCOUNT_END = 8;
        this.CLIENT_BILLING_BILLED_MEMBERS_COUNT_MAX = 9;
        this.CLIENT_BILLING_BILLED_MEMBERS_COUNT_SUBTRACT = 10;
        this.CLIENT_BILLING_DISCOUNT_COMMENT = 11;
        this.CLIENT_BILLING_CREDIT = 12;
        this.CLIENT_ADYEN_ACCOUNT_AUTO_DEBIT_ENABLED = 1;
        this.CLIENT_ADYEN_ACCOUNT_BALANCE = 2;
        this.CLIENT_ADYEN_ACCOUNT_DESIRED_DEPOSIT = 3;
        this.CLIENT_ADYEN_ACCOUNT_ONBOARDING_PASSED_DATE = 4;
        this.CLIENT_ADYEN_ACCOUNT_ACCOUNT_HOLDER_CODE = 5;
        this.CLIENT_ADYEN_ACCOUNT_LAST_TRANSFER_FUNDS_EXECUTION_DATE = 6;
        this.CLIENT_ADYEN_ACCOUNT_LAST_AUTO_DEBIT_DATE = 7;
        this.CLIENT_ADYEN_ACCOUNT_ACCOUNT_HOLDER_PAYOUT_STATE = 8;
        this.CLIENT_ADYEN_ACCOUNT_ACCOUNT_HOLDER_PROCESSING_STATE = 9;
        this.CLIENT_ADYEN_ACCOUNT_OUTSTANDING_TRANSFER_FUNDS = 10;
        this.CLIENT_ADYEN_ACCOUNT_TRIGGER_PAYOUT_PROCESS = 11;
        this.CLIENT_ADYEN_ACCOUNT_CONSISTENCY_CHECK = 12;
        this.CLIENT_ADYEN_ACCOUNT_CONSISTENCY_CHECK_EXPECTED_BALANCE = 1;
        this.CLIENT_ADYEN_ACCOUNT_CONSISTENCY_CHECK_ACTUAL_BALANCE = 2;
        this.CLIENT_ADYEN_ACCOUNT_CONSISTENCY_CHECK_ACTUAL_PENDING_BALANCE = 3;
        this.CLIENT_ADYEN_ACCOUNT_CONSISTENCY_CHECK_ACTUAL_ON_HOLD_BALANCE = 4;
    }
}
let ClientsApiService = class ClientsApiService extends ApiBase {
    constructor(h, router, apiE, zone, injector) {
        super(h, router, apiE, zone, injector, 'admin/clients');
        this.consts = new Consts();
        this.dataWrapper = new ClientsApiRoot(this, false);
    }
    version() {
        return 'e2952b59288daac1d1d2c123a17c8239,b797d10b0e01922359937fc8e21374e3';
    }
    get data() {
        return this.dataWrapper;
    }
    getRootWrapper() {
        return this.dataWrapper;
    }
    recreateRootWrapper() {
        this.dataWrapper = new ClientsApiRoot(this, false);
    }
};
ClientsApiService = __decorate([
    Injectable({
        providedIn: 'root',
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof HttpClient !== "undefined" && HttpClient) === "function" ? _a : Object, typeof (_b = typeof Router !== "undefined" && Router) === "function" ? _b : Object, ApiErrorService, typeof (_c = typeof NgZone !== "undefined" && NgZone) === "function" ? _c : Object, typeof (_d = typeof Injector !== "undefined" && Injector) === "function" ? _d : Object])
], ClientsApiService);
export { ClientsApiService };
export class ClientsApiRoot extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, '');
        this.api = api;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: '',
            id: 'ROOT',
            primitiveType: PApiPrimitiveTypes.ApiList,
            show: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.SUPER_ADMIN))))) {
                    return false;
                }
                return true;
            },
            canEdit: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.SUPER_ADMIN))))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.SUPER_ADMIN))))) {
                    return true;
                }
                return false;
            },
        });
    }
    wrapItem(item, _generateMissingData) {
        const newWrapper = new ClientsApiClient(this.api);
        newWrapper._updateRawData(item, _generateMissingData);
        return newWrapper;
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return false;
    }
    createInstance(removeDestroyedItems) {
        return new ClientsApiRoot(this.api, removeDestroyedItems);
    }
    get dni() {
        return '1';
    }
    createNewItem(id = null) {
        const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('');
        return newItem;
    }
}
export class ClientsApiClientBase extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, ClientsApiClient);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'client',
            id: 'CLIENT',
        });
        this.attributeInfoCompanyName = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'companyName',
            id: 'CLIENT_COMPANY_NAME',
            primitiveType: PApiPrimitiveTypes.string,
        });
        this.attributeInfoLocationName = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'locationName',
            id: 'CLIENT_LOCATION_NAME',
            primitiveType: PApiPrimitiveTypes.string,
        });
        this.attributeInfoType = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'type',
            id: 'CLIENT_TYPE',
            primitiveType: PApiPrimitiveTypes.Enum,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoTestAccountDeadline = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'testAccountDeadline',
            id: 'CLIENT_TEST_ACCOUNT_DEADLINE',
            primitiveType: PApiPrimitiveTypes.DateTime,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoTerminationDate = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'terminationDate',
            id: 'CLIENT_TERMINATION_DATE',
            primitiveType: PApiPrimitiveTypes.Date,
            show: function () {
                if (!(((this.type === ClientsApiType.PAID) || (this.type === ClientsApiType.TERMINATED)))) {
                    return false;
                }
                return true;
            },
            canEdit: function () {
                if (!((this.type === ClientsApiType.PAID))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
        });
        this.attributeInfoLocationCountry = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'locationCountry',
            id: 'CLIENT_LOCATION_COUNTRY',
            primitiveType: PApiPrimitiveTypes.Enum,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoTestAccountDuration = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'testAccountDuration',
            id: 'CLIENT_TEST_ACCOUNT_DURATION',
            primitiveType: PApiPrimitiveTypes.Days,
        });
        this.adyenAccountWrapper = new ClientsApiClientAdyenAccount(this.api);
        this.billingWrapper = new ClientsApiClientBilling(this.api);
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
        this.adyenAccountWrapper.parent = this;
        this.billingWrapper.parent = this;
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  Name of the client.
     *
     * @type {string}
     */
    get companyName() {
        return this.data[1];
    }
    set companyName(v) {
        this.setterImpl(1, v, 'companyName');
    }
    /**
     *  Location Name of the client.
     *
     * @type {string}
     */
    get locationName() {
        return this.data[2];
    }
    set locationName(v) {
        this.setterImpl(2, v, 'locationName');
    }
    /**
     *  Client type. Read-only
     *
     * @type {ClientsApiType}
     */
    get type() {
        return this.data[3];
    }
    set typeTestSetter(v) {
        this.setterImpl(3, v, 'type');
    }
    /**
     *  Deadline of the test account. Read-only.
     *
     * @type {DateTime}
     */
    get testAccountDeadline() {
        return this.data[4];
    }
    set testAccountDeadlineTestSetter(v) {
        this.setterImpl(4, v, 'testAccountDeadline');
    }
    /**
     *  Date when the account will get terminated.
     *
     * @type {Date}
     */
    get terminationDate() {
        return this.data[5];
    }
    set terminationDate(v) {
        this.setterImpl(5, v, 'terminationDate');
    }
    /**
     *  The location country of this client. Read-only.
     *
     * @type {ClientsApiCountry}
     */
    get locationCountry() {
        return this.data[6];
    }
    set locationCountryTestSetter(v) {
        this.setterImpl(6, v, 'locationCountry');
    }
    /**
     *  Information about Online-Payment.
     */
    get adyenAccount() {
        return this.adyenAccountWrapper;
    }
    set adyenAccountTestSetter(v) {
        this.setterImpl(7, v.rawData, 'adyenAccount', () => { this.adyenAccountWrapper = v; });
    }
    /**
     *  Information about billing of this client.
     */
    get billing() {
        return this.billingWrapper;
    }
    set billingTestSetter(v) {
        this.setterImpl(8, v.rawData, 'billing', () => { this.billingWrapper = v; });
    }
    /**
     * (Detail)  Test account duration in days.
     *
     * @type {Days}
     */
    get testAccountDuration() {
        return this.data[9];
    }
    set testAccountDuration(v) {
        this.setterImpl(9, v, 'testAccountDuration');
    }
    _fixIds(_idReplacements) {
        this.adyenAccountWrapper._fixIds(_idReplacements);
        this.billingWrapper._fixIds(_idReplacements);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 10);
            if (data[7] === null)
                data[7] = Meta.createNewObject(false);
            if (data[8] === null)
                data[8] = Meta.createNewObject(false);
        }
        // propagate new raw data to children
        this.adyenAccountWrapper._updateRawData(data ? data[7] : null, generateMissingData);
        this.billingWrapper._updateRawData(data ? data[8] : null, generateMissingData);
    }
    get dni() {
        return '2';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '2', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export var ClientsApiType;
(function (ClientsApiType) {
    ClientsApiType[ClientsApiType["TEST_NEED_VERIFICATION"] = 1] = "TEST_NEED_VERIFICATION";
    ClientsApiType[ClientsApiType["TEST"] = 2] = "TEST";
    ClientsApiType[ClientsApiType["TEST_EXPIRED"] = 3] = "TEST_EXPIRED";
    ClientsApiType[ClientsApiType["PAID"] = 4] = "PAID";
    ClientsApiType[ClientsApiType["TERMINATED"] = 5] = "TERMINATED";
})(ClientsApiType || (ClientsApiType = {}));
export var ClientsApiCountry;
(function (ClientsApiCountry) {
    ClientsApiCountry[ClientsApiCountry["GERMANY"] = 1] = "GERMANY";
    ClientsApiCountry[ClientsApiCountry["AUSTRIA"] = 2] = "AUSTRIA";
    ClientsApiCountry[ClientsApiCountry["SWITZERLAND"] = 3] = "SWITZERLAND";
    ClientsApiCountry[ClientsApiCountry["NETHERLANDS"] = 4] = "NETHERLANDS";
    ClientsApiCountry[ClientsApiCountry["BELGIUM"] = 5] = "BELGIUM";
    ClientsApiCountry[ClientsApiCountry["UNITED_KINGDOM"] = 6] = "UNITED_KINGDOM";
    ClientsApiCountry[ClientsApiCountry["CZECH_REPUBLIC"] = 7] = "CZECH_REPUBLIC";
    ClientsApiCountry[ClientsApiCountry["SWEDEN"] = 8] = "SWEDEN";
    ClientsApiCountry[ClientsApiCountry["LUXEMBOURG"] = 9] = "LUXEMBOURG";
})(ClientsApiCountry || (ClientsApiCountry = {}));
export class ClientsApiClientAdyenAccount extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, ClientsApiClientAdyenAccount);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'adyenAccount',
            id: 'CLIENT_ADYEN_ACCOUNT',
        });
        this.attributeInfoAutoDebitEnabled = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'autoDebitEnabled',
            id: 'CLIENT_ADYEN_ACCOUNT_AUTO_DEBIT_ENABLED',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoBalance = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'balance',
            id: 'CLIENT_ADYEN_ACCOUNT_BALANCE',
            primitiveType: PApiPrimitiveTypes.Currency,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoDesiredDeposit = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'desiredDeposit',
            id: 'CLIENT_ADYEN_ACCOUNT_DESIRED_DEPOSIT',
            primitiveType: PApiPrimitiveTypes.Currency,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoOnboardingPassedDate = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'onboardingPassedDate',
            id: 'CLIENT_ADYEN_ACCOUNT_ONBOARDING_PASSED_DATE',
            primitiveType: PApiPrimitiveTypes.DateTime,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoAccountHolderCode = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'accountHolderCode',
            id: 'CLIENT_ADYEN_ACCOUNT_ACCOUNT_HOLDER_CODE',
            primitiveType: PApiPrimitiveTypes.string,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoLastTransferFundsExecutionDate = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'lastTransferFundsExecutionDate',
            id: 'CLIENT_ADYEN_ACCOUNT_LAST_TRANSFER_FUNDS_EXECUTION_DATE',
            primitiveType: PApiPrimitiveTypes.DateTime,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoLastAutoDebitDate = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'lastAutoDebitDate',
            id: 'CLIENT_ADYEN_ACCOUNT_LAST_AUTO_DEBIT_DATE',
            primitiveType: PApiPrimitiveTypes.DateTime,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoAccountHolderPayoutState = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'accountHolderPayoutState',
            id: 'CLIENT_ADYEN_ACCOUNT_ACCOUNT_HOLDER_PAYOUT_STATE',
            primitiveType: PApiPrimitiveTypes.Enum,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoAccountHolderProcessingState = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'accountHolderProcessingState',
            id: 'CLIENT_ADYEN_ACCOUNT_ACCOUNT_HOLDER_PROCESSING_STATE',
            primitiveType: PApiPrimitiveTypes.Enum,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoOutstandingTransferFunds = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'outstandingTransferFunds',
            id: 'CLIENT_ADYEN_ACCOUNT_OUTSTANDING_TRANSFER_FUNDS',
            primitiveType: PApiPrimitiveTypes.Currency,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoTriggerPayoutProcess = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'triggerPayoutProcess',
            id: 'CLIENT_ADYEN_ACCOUNT_TRIGGER_PAYOUT_PROCESS',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.consistencyCheckWrapper = new ClientsApiClientAdyenAccountConsistencyCheck(this.api);
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
        this.consistencyCheckWrapper.parent = this;
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  Is adyen auto-debit enabled for this account?
     *
     * @type {boolean}
     */
    get autoDebitEnabled() {
        return this.data[1];
    }
    set autoDebitEnabled(v) {
        this.setterImpl(1, v, 'autoDebitEnabled');
    }
    /**
     *  The current online balance.
     *
     * @type {Currency}
     */
    get balance() {
        return this.data[2];
    }
    set balanceTestSetter(v) {
        this.setterImpl(2, v, 'balance');
    }
    /**
     * (Detail)  The current deposit level we expect currently for this client.
     *
     * @type {Currency}
     */
    get desiredDeposit() {
        return this.data[3];
    }
    set desiredDepositTestSetter(v) {
        this.setterImpl(3, v, 'desiredDeposit');
    }
    /**
     * (Detail)  When has this account passed Adyen onboarding?
     *
     * @type {DateTime}
     */
    get onboardingPassedDate() {
        return this.data[4];
    }
    set onboardingPassedDateTestSetter(v) {
        this.setterImpl(4, v, 'onboardingPassedDate');
    }
    /**
     * (Detail)  Adyens account holder code which uniquely identifies the sub-merchant.
     *
     * @type {string}
     */
    get accountHolderCode() {
        return this.data[5];
    }
    set accountHolderCodeTestSetter(v) {
        this.setterImpl(5, v, 'accountHolderCode');
    }
    /**
     * (Detail)  When was the last transfer-funds executed. This is the pre-step for payouts (See https://drplano.atlassian.net/l/c/7A3Zd2Kz).
     *
     * @type {DateTime}
     */
    get lastTransferFundsExecutionDate() {
        return this.data[6];
    }
    set lastTransferFundsExecutionDateTestSetter(v) {
        this.setterImpl(6, v, 'lastTransferFundsExecutionDate');
    }
    /**
     * (Detail)  When was the last auto-debit executed?
     *
     * @type {DateTime}
     */
    get lastAutoDebitDate() {
        return this.data[7];
    }
    set lastAutoDebitDateTestSetter(v) {
        this.setterImpl(7, v, 'lastAutoDebitDate');
    }
    /**
     * (Detail)  AccountHolder-Payout State for Adyen
     *
     * @type {ClientsApiAccountHolderPayoutState}
     */
    get accountHolderPayoutState() {
        return this.data[8];
    }
    set accountHolderPayoutStateTestSetter(v) {
        this.setterImpl(8, v, 'accountHolderPayoutState');
    }
    /**
     * (Detail)  AccountHolder-Processing State for Adyen
     *
     * @type {ClientsApiAccountHolderProcessingState}
     */
    get accountHolderProcessingState() {
        return this.data[9];
    }
    set accountHolderProcessingStateTestSetter(v) {
        this.setterImpl(9, v, 'accountHolderProcessingState');
    }
    /**
     * (Detail)  The fees which still need to be transferred by transfer-funds (See https://drplano.atlassian.net/l/c/7A3Zd2Kz). This includes the OUTSTANDING and PENDING state.
     *
     * @type {Currency}
     */
    get outstandingTransferFunds() {
        return this.data[10];
    }
    set outstandingTransferFundsTestSetter(v) {
        this.setterImpl(10, v, 'outstandingTransferFunds');
    }
    /**
     * (Detail)  Set this to "true" to trigger the whole payout process (See https://drplano.atlassian.net/l/c/7A3Zd2Kz). This ignores all preconditions (last payout/TF, consistency check) and will trigger it again.
     *
     * @type {boolean}
     */
    get triggerPayoutProcess() {
        return this.data[11];
    }
    set triggerPayoutProcess(v) {
        this.setterImpl(11, v, 'triggerPayoutProcess');
    }
    /**
     * (Detail)  Returns information for debugging our Adyen balance consistency check.
     */
    get consistencyCheck() {
        return this.consistencyCheckWrapper;
    }
    set consistencyCheckTestSetter(v) {
        this.setterImpl(12, v.rawData, 'consistencyCheck', () => { this.consistencyCheckWrapper = v; });
    }
    _fixIds(_idReplacements) {
        this.consistencyCheckWrapper._fixIds(_idReplacements);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 13);
            data[1] = false;
            data[11] = false;
            if (data[12] === null)
                data[12] = Meta.createNewObject(false);
        }
        // propagate new raw data to children
        this.consistencyCheckWrapper._updateRawData(data ? data[12] : null, generateMissingData);
    }
    get dni() {
        return '9';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '9', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export var ClientsApiAccountHolderPayoutState;
(function (ClientsApiAccountHolderPayoutState) {
    ClientsApiAccountHolderPayoutState[ClientsApiAccountHolderPayoutState["PAYOUT_ALLOWED"] = 1] = "PAYOUT_ALLOWED";
    ClientsApiAccountHolderPayoutState[ClientsApiAccountHolderPayoutState["PAYOUT_DISABLED"] = 2] = "PAYOUT_DISABLED";
})(ClientsApiAccountHolderPayoutState || (ClientsApiAccountHolderPayoutState = {}));
export var ClientsApiAccountHolderProcessingState;
(function (ClientsApiAccountHolderProcessingState) {
    ClientsApiAccountHolderProcessingState[ClientsApiAccountHolderProcessingState["PROCESSING_ALLOWED"] = 1] = "PROCESSING_ALLOWED";
    ClientsApiAccountHolderProcessingState[ClientsApiAccountHolderProcessingState["PROCESSING_DISABLED"] = 2] = "PROCESSING_DISABLED";
})(ClientsApiAccountHolderProcessingState || (ClientsApiAccountHolderProcessingState = {}));
export class ClientsApiClientAdyenAccountConsistencyCheck extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, ClientsApiClientAdyenAccountConsistencyCheck);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'consistencyCheck',
            id: 'CLIENT_ADYEN_ACCOUNT_CONSISTENCY_CHECK',
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoExpectedBalance = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'expectedBalance',
            id: 'CLIENT_ADYEN_ACCOUNT_CONSISTENCY_CHECK_EXPECTED_BALANCE',
            primitiveType: PApiPrimitiveTypes.Currency,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoActualBalance = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'actualBalance',
            id: 'CLIENT_ADYEN_ACCOUNT_CONSISTENCY_CHECK_ACTUAL_BALANCE',
            primitiveType: PApiPrimitiveTypes.Currency,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoActualPendingBalance = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'actualPendingBalance',
            id: 'CLIENT_ADYEN_ACCOUNT_CONSISTENCY_CHECK_ACTUAL_PENDING_BALANCE',
            primitiveType: PApiPrimitiveTypes.Currency,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoActualOnHoldBalance = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'actualOnHoldBalance',
            id: 'CLIENT_ADYEN_ACCOUNT_CONSISTENCY_CHECK_ACTUAL_ON_HOLD_BALANCE',
            primitiveType: PApiPrimitiveTypes.Currency,
            canEdit: () => false,
            readMode: () => true,
        });
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  What Adyen balance the consistency check expects.
     *
     * @type {Currency}
     */
    get expectedBalance() {
        return this.data[1];
    }
    set expectedBalanceTestSetter(v) {
        this.setterImpl(1, v, 'expectedBalance');
    }
    /**
     *  Actual Adyen balance. This is the value we compare against "expectedBalance" during consistency check.
     *
     * @type {Currency}
     */
    get actualBalance() {
        return this.data[2];
    }
    set actualBalanceTestSetter(v) {
        this.setterImpl(2, v, 'actualBalance');
    }
    /**
     *  Actual "pending" Adyen balance.
     *
     * @type {Currency}
     */
    get actualPendingBalance() {
        return this.data[3];
    }
    set actualPendingBalanceTestSetter(v) {
        this.setterImpl(3, v, 'actualPendingBalance');
    }
    /**
     *  Actual "on-hold" Adyen balance.
     *
     * @type {Currency}
     */
    get actualOnHoldBalance() {
        return this.data[4];
    }
    set actualOnHoldBalanceTestSetter(v) {
        this.setterImpl(4, v, 'actualOnHoldBalance');
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 5);
        }
        // propagate new raw data to children
    }
    get dni() {
        return '35';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '35', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class ClientsApiClientBilling extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, ClientsApiClientBilling);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'billing',
            id: 'CLIENT_BILLING',
        });
        this.attributeInfoCountry = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'country',
            id: 'CLIENT_BILLING_COUNTRY',
            primitiveType: PApiPrimitiveTypes.Enum,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoHasToPayVat = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'hasToPayVat',
            id: 'CLIENT_BILLING_HAS_TO_PAY_VAT',
            primitiveType: PApiPrimitiveTypes.boolean,
            canEdit: function () {
                if (!((!this.disableInvoiceCreation))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
        });
        this.attributeInfoDisableInvoiceCreation = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'disableInvoiceCreation',
            id: 'CLIENT_BILLING_DISABLE_INVOICE_CREATION',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoVatNumber = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'vatNumber',
            id: 'CLIENT_BILLING_VAT_NUMBER',
            primitiveType: PApiPrimitiveTypes.string,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoDiscountValue = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'discountValue',
            id: 'CLIENT_BILLING_DISCOUNT_VALUE',
            primitiveType: () => this.discountType === ClientsApiDiscountType.PERCENT ? PApiPrimitiveTypes.Percent : PApiPrimitiveTypes.Currency,
            canEdit: function () {
                if (!((!this.disableInvoiceCreation))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(0, true, () => this.discountType === ClientsApiDiscountType.PERCENT ? PApiPrimitiveTypes.Percent : PApiPrimitiveTypes.Currency, undefined, undefined);
                        return null;
                    },
                    () => {
                        return this.api.validators.max(() => this.discountType === ClientsApiDiscountType.PERCENT ? 1 : null, true, () => this.discountType === ClientsApiDiscountType.PERCENT ? PApiPrimitiveTypes.Percent : PApiPrimitiveTypes.Currency, undefined, undefined);
                        return null;
                    },
                    () => {
                        return this.api.validators.required(() => this.discountType === ClientsApiDiscountType.PERCENT ? PApiPrimitiveTypes.Percent : PApiPrimitiveTypes.Currency, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoDiscountType = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'discountType',
            id: 'CLIENT_BILLING_DISCOUNT_TYPE',
            primitiveType: PApiPrimitiveTypes.Enum,
            canEdit: function () {
                if (!((!this.disableInvoiceCreation))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Enum, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoDiscountStart = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'discountStart',
            id: 'CLIENT_BILLING_DISCOUNT_START',
            primitiveType: PApiPrimitiveTypes.Date,
            canEdit: function () {
                if (!((!this.disableInvoiceCreation))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(() => this.discountEnd, false, PApiPrimitiveTypes.Date, 'CLIENT_BILLING_DISCOUNT_END', undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoDiscountEnd = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'discountEnd',
            id: 'CLIENT_BILLING_DISCOUNT_END',
            primitiveType: PApiPrimitiveTypes.DateExclusiveEnd,
            canEdit: function () {
                if (!((!this.disableInvoiceCreation))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(() => this.discountStart, false, PApiPrimitiveTypes.DateExclusiveEnd, 'CLIENT_BILLING_DISCOUNT_START', undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoBilledMembersCountMax = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'billedMembersCountMax',
            id: 'CLIENT_BILLING_BILLED_MEMBERS_COUNT_MAX',
            primitiveType: PApiPrimitiveTypes.Days,
            canEdit: function () {
                if (!((!this.disableInvoiceCreation))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(0, true, PApiPrimitiveTypes.Days, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoBilledMembersCountSubtract = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'billedMembersCountSubtract',
            id: 'CLIENT_BILLING_BILLED_MEMBERS_COUNT_SUBTRACT',
            primitiveType: PApiPrimitiveTypes.Days,
            canEdit: function () {
                if (!((!this.disableInvoiceCreation))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(0, false, PApiPrimitiveTypes.Days, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoDiscountComment = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'discountComment',
            id: 'CLIENT_BILLING_DISCOUNT_COMMENT',
            primitiveType: PApiPrimitiveTypes.string,
            canEdit: function () {
                if (!((!this.disableInvoiceCreation))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
        });
        this.attributeInfoCredit = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'credit',
            id: 'CLIENT_BILLING_CREDIT',
            primitiveType: PApiPrimitiveTypes.Currency,
            canEdit: function () {
                if (!((!this.disableInvoiceCreation))) {
                    return false;
                }
                return true;
            },
            readMode: function () {
                return false;
            },
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(0, true, PApiPrimitiveTypes.Currency, undefined, undefined);
                        return null;
                    },
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Currency, undefined);
                        return null;
                    },
                ];
            },
        });
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  The billing country of this client. Read-only.
     *
     * @type {ClientsApiCountry}
     */
    get country() {
        return this.data[1];
    }
    set countryTestSetter(v) {
        this.setterImpl(1, v, 'country');
    }
    /**
     *  Does this client need to pay vat for dr-plano fee?
     *
     * @type {boolean}
     */
    get hasToPayVat() {
        return this.data[2];
    }
    set hasToPayVat(v) {
        this.setterImpl(2, v, 'hasToPayVat');
    }
    /**
     *  Should the whole invoice creation be disabled? When "true" no Billomat client and VAT transactions will be created anymore for this client.
     *
     * @type {boolean}
     */
    get disableInvoiceCreation() {
        return this.data[3];
    }
    set disableInvoiceCreation(v) {
        this.setterImpl(3, v, 'disableInvoiceCreation');
    }
    /**
     * (Detail)  The vat-number of this client. Only being send when client does not have to pay vat. Read-only.
     *
     * @type {string}
     */
    get vatNumber() {
        return this.data[4];
    }
    set vatNumberTestSetter(v) {
        this.setterImpl(4, v, 'vatNumber');
    }
    /**
     * (Detail)  The discount value to be applied on the final invoice amount. Depending on "discountType" this is either an absolute discount or a percentage discount.
     *
     * @type {Percent|Currency}
     */
    get discountValue() {
        return this.data[5];
    }
    set discountValue(v) {
        this.setterImpl(5, v, 'discountValue');
    }
    /**
     * (Detail)  The current discountType for this account
     *
     * @type {ClientsApiDiscountType}
     */
    get discountType() {
        return this.data[6];
    }
    set discountType(v) {
        this.setterImpl(6, v, 'discountType', () => { this.attributeInfoDiscountValue.value = null; });
    }
    /**
     * (Detail)  The start-time from when "discountValue" should be applied. "null" means no such start-limit exists.
     *
     * @type {Date}
     */
    get discountStart() {
        return this.data[7];
    }
    set discountStart(v) {
        this.setterImpl(7, v, 'discountStart');
    }
    /**
     * (Detail)  The end-time from when "discountValue" should be applied. "null" means no such end-limit exists.
     *
     * @type {DateExclusiveEnd}
     */
    get discountEnd() {
        return this.data[8];
    }
    set discountEnd(v) {
        this.setterImpl(8, v, 'discountEnd');
    }
    /**
     * (Detail)  The upper limit for maximum number of members to be billed for this client. "null" means no such limit exist.
     *
     * @type {Days}
     */
    get billedMembersCountMax() {
        return this.data[9];
    }
    set billedMembersCountMax(v) {
        this.setterImpl(9, v, 'billedMembersCountMax');
    }
    /**
     * (Detail)  The value to be subtract from the maximum number of members to be billed.
     *
     * @type {Days}
     */
    get billedMembersCountSubtract() {
        return this.data[10];
    }
    set billedMembersCountSubtract(v) {
        this.setterImpl(10, v, 'billedMembersCountSubtract');
    }
    /**
     * (Detail)  Internal comment about discounting.
     *
     * @type {string}
     */
    get discountComment() {
        return this.data[11];
    }
    set discountComment(v) {
        this.setterImpl(11, v, 'discountComment');
    }
    /**
     * (Detail)  A one-time credit which will be subtracted from "misc" invoices.
     *
     * @type {Currency}
     */
    get credit() {
        return this.data[12];
    }
    set credit(v) {
        this.setterImpl(12, v, 'credit');
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 13);
            data[2] = false;
            data[3] = false;
        }
        // propagate new raw data to children
    }
    get dni() {
        return '10';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '10', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export var ClientsApiDiscountType;
(function (ClientsApiDiscountType) {
    ClientsApiDiscountType[ClientsApiDiscountType["ABSOLUTE"] = 1] = "ABSOLUTE";
    ClientsApiDiscountType[ClientsApiDiscountType["PERCENT"] = 2] = "PERCENT";
})(ClientsApiDiscountType || (ClientsApiDiscountType = {}));
//# sourceMappingURL=clients-api.service.ag.js.map