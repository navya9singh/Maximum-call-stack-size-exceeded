var _a, _b, _c, _d;
import { __decorate, __metadata } from "tslib";
import { Injectable, NgZone, Injector } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Router } from '@angular/router';
import { ApiBase } from '@plano/shared/api/base/api-base';
import { Id } from '@plano/shared/api/base/id';
import { Meta } from '@plano/shared/api/base/meta';
import { ApiAttributeInfo } from '@plano/shared/api/base/api-attribute-info';
import { PApiPrimitiveTypes } from '@plano/shared/api/base/generated-types.ag';
import { ApiObjectWrapper } from '@plano/shared/api';
import { Config } from '@plano/shared/core/config';
import { ApiErrorService } from '@plano/shared/api/api-error.service';
/**
 * This service enables access to the api "booking_system_data".
 * This file is auto generated by de.sage.scheduler.api_generator.ApiGenerator.
 */
// constants
class Consts {
    constructor() {
        this.LOCALE = 1;
        this.LOCATION_NAME = 2;
        this.BOOKING_PAGE_COVER = 3;
        this.COMPANY_LOGO = 4;
        this.LOCATION_HOMEPAGE = 5;
        this.TERMS_URL = 6;
        this.DATA_PROTECTION_URL = 7;
        this.TERMS_OF_PARTICIPATION_URL = 8;
        this.CANCELLATION_POLICY_URL = 9;
        this.CONTACT_MAIL_TO = 10;
    }
}
let BookingSystemDataApiService = class BookingSystemDataApiService extends ApiBase {
    constructor(h, router, apiE, zone, injector) {
        super(h, router, apiE, zone, injector, 'booking_system_data');
        this.consts = new Consts();
        this.dataWrapper = new BookingSystemDataApiRoot(this);
    }
    version() {
        return '5d8f81ac7c83e2fa19ebddd22502db2c,0fce361f8b9180a1c708acae47a72e48';
    }
    get data() {
        return this.dataWrapper;
    }
    getRootWrapper() {
        return this.dataWrapper;
    }
    recreateRootWrapper() {
        this.dataWrapper = new BookingSystemDataApiRoot(this);
    }
};
BookingSystemDataApiService = __decorate([
    Injectable({
        providedIn: 'root',
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof HttpClient !== "undefined" && HttpClient) === "function" ? _a : Object, typeof (_b = typeof Router !== "undefined" && Router) === "function" ? _b : Object, ApiErrorService, typeof (_c = typeof NgZone !== "undefined" && NgZone) === "function" ? _c : Object, typeof (_d = typeof Injector !== "undefined" && Injector) === "function" ? _d : Object])
], BookingSystemDataApiService);
export { BookingSystemDataApiService };
export class BookingSystemDataApiRoot extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, BookingSystemDataApiRoot);
        this.api = api;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: '',
            id: 'ROOT',
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoLocale = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'locale',
            id: 'LOCALE',
            primitiveType: PApiPrimitiveTypes.string,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoLocationName = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'locationName',
            id: 'LOCATION_NAME',
            primitiveType: PApiPrimitiveTypes.string,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoBookingPageCover = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'bookingPageCover',
            id: 'BOOKING_PAGE_COVER',
            primitiveType: PApiPrimitiveTypes.Image,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoCompanyLogo = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'companyLogo',
            id: 'COMPANY_LOGO',
            primitiveType: PApiPrimitiveTypes.Image,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoLocationHomepage = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'locationHomepage',
            id: 'LOCATION_HOMEPAGE',
            primitiveType: PApiPrimitiveTypes.Url,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoTermsUrl = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'termsUrl',
            id: 'TERMS_URL',
            primitiveType: PApiPrimitiveTypes.Url,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoDataProtectionUrl = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'dataProtectionUrl',
            id: 'DATA_PROTECTION_URL',
            primitiveType: PApiPrimitiveTypes.Url,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoTermsOfParticipationUrl = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'termsOfParticipationUrl',
            id: 'TERMS_OF_PARTICIPATION_URL',
            primitiveType: PApiPrimitiveTypes.Url,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoCancellationPolicyUrl = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'cancellationPolicyUrl',
            id: 'CANCELLATION_POLICY_URL',
            primitiveType: PApiPrimitiveTypes.Url,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoContactMailTo = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'contactMailTo',
            id: 'CONTACT_MAIL_TO',
            primitiveType: PApiPrimitiveTypes.Email,
            canEdit: () => false,
            readMode: () => true,
        });
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  The locale of the client.
     *
     * @type {string}
     */
    get locale() {
        return this.data[1];
    }
    set localeTestSetter(v) {
        this.setterImpl(1, v, 'locale');
    }
    /**
     *  The client location name.
     *
     * @type {string}
     */
    get locationName() {
        return this.data[2];
    }
    set locationNameTestSetter(v) {
        this.setterImpl(2, v, 'locationName');
    }
    /**
     *  Cover image of the booking page.
     *
     * @type {Image}
     */
    get bookingPageCover() {
        const path = this.data[3];
        return path ? Config.API_IMAGE_BASE_URL + path : path;
    }
    set bookingPageCoverTestSetter(v) {
        this.setterImpl(3, v, 'bookingPageCover');
    }
    /**
     *  Logo of the client.
     *
     * @type {Image}
     */
    get companyLogo() {
        const path = this.data[4];
        return path ? Config.API_IMAGE_BASE_URL + path : path;
    }
    set companyLogoTestSetter(v) {
        this.setterImpl(4, v, 'companyLogo');
    }
    /**
     *  Homepage of the client.
     *
     * @type {Url}
     */
    get locationHomepage() {
        return this.data[5];
    }
    set locationHomepageTestSetter(v) {
        this.setterImpl(5, v, 'locationHomepage');
    }
    /**
     *  Client's terms page url.
     *
     * @type {Url}
     */
    get termsUrl() {
        return this.data[6];
    }
    set termsUrlTestSetter(v) {
        this.setterImpl(6, v, 'termsUrl');
    }
    /**
     *  Client's data protection page url.
     *
     * @type {Url}
     */
    get dataProtectionUrl() {
        return this.data[7];
    }
    set dataProtectionUrlTestSetter(v) {
        this.setterImpl(7, v, 'dataProtectionUrl');
    }
    /**
     *  Client's terms of participation page url.
     *
     * @type {Url}
     */
    get termsOfParticipationUrl() {
        return this.data[8];
    }
    set termsOfParticipationUrlTestSetter(v) {
        this.setterImpl(8, v, 'termsOfParticipationUrl');
    }
    /**
     *  Client's cancellation policy page url.
     *
     * @type {Url}
     */
    get cancellationPolicyUrl() {
        return this.data[9];
    }
    set cancellationPolicyUrlTestSetter(v) {
        this.setterImpl(9, v, 'cancellationPolicyUrl');
    }
    /**
     *  Contact email for current booking process.
     *
     * @type {Email}
     */
    get contactMailTo() {
        return this.data[10];
    }
    set contactMailToTestSetter(v) {
        this.setterImpl(10, v, 'contactMailTo');
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 11);
        }
        // propagate new raw data to children
    }
    get dni() {
        return '1';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '1', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
//# sourceMappingURL=booking-system-data-api.service.ag.js.map