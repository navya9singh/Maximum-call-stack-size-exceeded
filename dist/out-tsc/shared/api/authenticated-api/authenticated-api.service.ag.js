var _a, _b, _c, _d;
import { __decorate, __metadata } from "tslib";
import { Injectable, NgZone, Injector } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Router } from '@angular/router';
import { ApiBase } from '@plano/shared/api/base/api-base';
import { Id } from '@plano/shared/api/base/id';
import { Meta } from '@plano/shared/api/base/meta';
import { ApiAttributeInfo } from '@plano/shared/api/base/api-attribute-info';
import { PApiPrimitiveTypes } from '@plano/shared/api/base/generated-types.ag';
import { ApiObjectWrapper } from '@plano/shared/api';
import { ApiErrorService } from '@plano/shared/api/api-error.service';
import { AuthenticatedApiRoot } from '@plano/shared/api';
/**
 * This service enables access to the api "authenticated".
 * This file is auto generated by de.sage.scheduler.api_generator.ApiGenerator.
 */
// constants
class Consts {
    constructor() {
        this.LOCALE = 1;
        this.ROLE = 2;
        this.PHONE = 3;
        this.EMAIL = 4;
        this.FIRST_NAME = 5;
        this.LAST_NAME = 6;
        this.GENDER = 7;
        this.LOCATION_NAME = 8;
        this.COMPANY_NAME = 9;
        this.CLIENT_ID = 10;
        this.SECURE_TOKEN = 11;
        this.TEST_ACCOUNT_DEADLINE = 12;
        this.TAWK_HMAC = 13;
        this.CLIENT_TYPE = 14;
        this.LOGGED_IN_WITH_MASTER_PASSWORD = 15;
    }
}
let AuthenticatedApiService = class AuthenticatedApiService extends ApiBase {
    constructor(h, router, apiE, zone, injector) {
        super(h, router, apiE, zone, injector, 'authenticated');
        this.consts = new Consts();
        this.dataWrapper = new AuthenticatedApiRoot(this);
    }
    version() {
        return 'fcb0820dd6dee7a00bb15db69f2755eb,c6852a4d7ae7da600f407e43b5eb1246';
    }
    get data() {
        return this.dataWrapper;
    }
    getRootWrapper() {
        return this.dataWrapper;
    }
    recreateRootWrapper() {
        this.dataWrapper = new AuthenticatedApiRoot(this);
    }
};
AuthenticatedApiService = __decorate([
    Injectable({
        providedIn: 'root',
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof HttpClient !== "undefined" && HttpClient) === "function" ? _a : Object, typeof (_b = typeof Router !== "undefined" && Router) === "function" ? _b : Object, ApiErrorService, typeof (_c = typeof NgZone !== "undefined" && NgZone) === "function" ? _c : Object, typeof (_d = typeof Injector !== "undefined" && Injector) === "function" ? _d : Object])
], AuthenticatedApiService);
export { AuthenticatedApiService };
export class AuthenticatedApiRootBase extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, AuthenticatedApiRoot);
        this.api = api;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: '',
            id: 'ROOT',
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoLocale = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'locale',
            id: 'LOCALE',
            primitiveType: PApiPrimitiveTypes.string,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoRole = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'role',
            id: 'ROLE',
            primitiveType: PApiPrimitiveTypes.Enum,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoPhone = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'phone',
            id: 'PHONE',
            primitiveType: PApiPrimitiveTypes.Tel,
            show: function () {
                return true;
            },
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoEmail = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'email',
            id: 'EMAIL',
            primitiveType: PApiPrimitiveTypes.Email,
            show: function () {
                return true;
            },
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoFirstName = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'firstName',
            id: 'FIRST_NAME',
            primitiveType: PApiPrimitiveTypes.string,
            show: function () {
                return true;
            },
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoLastName = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'lastName',
            id: 'LAST_NAME',
            primitiveType: PApiPrimitiveTypes.string,
            show: function () {
                return true;
            },
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoGender = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'gender',
            id: 'GENDER',
            primitiveType: PApiPrimitiveTypes.Enum,
            show: function () {
                return true;
            },
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoLocationName = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'locationName',
            id: 'LOCATION_NAME',
            primitiveType: PApiPrimitiveTypes.string,
            show: function () {
                return true;
            },
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoCompanyName = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'companyName',
            id: 'COMPANY_NAME',
            primitiveType: PApiPrimitiveTypes.string,
            show: function () {
                return true;
            },
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoClientId = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'clientId',
            id: 'CLIENT_ID',
            primitiveType: PApiPrimitiveTypes.Id,
            show: function () {
                return true;
            },
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoSecureToken = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'secureToken',
            id: 'SECURE_TOKEN',
            primitiveType: PApiPrimitiveTypes.string,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoTestAccountDeadline = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'testAccountDeadline',
            id: 'TEST_ACCOUNT_DEADLINE',
            primitiveType: PApiPrimitiveTypes.DateTime,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoTawkHmac = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'tawkHmac',
            id: 'TAWK_HMAC',
            primitiveType: PApiPrimitiveTypes.string,
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoClientType = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'clientType',
            id: 'CLIENT_TYPE',
            primitiveType: PApiPrimitiveTypes.Enum,
            show: function () {
                return true;
            },
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoLoggedInWithMasterPassword = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'loggedInWithMasterPassword',
            id: 'LOGGED_IN_WITH_MASTER_PASSWORD',
            primitiveType: PApiPrimitiveTypes.boolean,
            canEdit: () => false,
            readMode: () => true,
        });
        this.clientIdWrapper = null;
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  The locale of the user.
     *
     * @type {string}
     */
    get locale() {
        return this.data[1];
    }
    set localeTestSetter(v) {
        this.setterImpl(1, v, 'locale');
    }
    /**
     *  Role of authenticated entity.
     *
     * @type {AuthenticatedApiRole}
     */
    get role() {
        return this.data[2];
    }
    set roleTestSetter(v) {
        this.setterImpl(2, v, 'role');
    }
    /**
     *  Phone number of the user.
     *
     * @type {Tel}
     */
    get phone() {
        return this.data[3];
    }
    set phoneTestSetter(v) {
        this.setterImpl(3, v, 'phone');
    }
    /**
     *  Email address of the user.
     *
     * @type {Email}
     */
    get email() {
        return this.data[4];
    }
    set emailTestSetter(v) {
        this.setterImpl(4, v, 'email');
    }
    /**
     *  First name of the user.
     *
     * @type {string}
     */
    get firstName() {
        return this.data[5];
    }
    set firstNameTestSetter(v) {
        this.setterImpl(5, v, 'firstName');
    }
    /**
     *  Last name of the user.
     *
     * @type {string}
     */
    get lastName() {
        return this.data[6];
    }
    set lastNameTestSetter(v) {
        this.setterImpl(6, v, 'lastName');
    }
    /**
     *  The gender of the user.
     *
     * @type {AuthenticatedApiGender}
     */
    get gender() {
        return this.data[7];
    }
    set genderTestSetter(v) {
        this.setterImpl(7, v, 'gender');
    }
    /**
     *  Public location name. Read-only.
     *
     * @type {string}
     */
    get locationName() {
        return this.data[8];
    }
    set locationNameTestSetter(v) {
        this.setterImpl(8, v, 'locationName');
    }
    /**
     *  Public location name. Read-only.
     *
     * @type {string}
     */
    get companyName() {
        return this.data[9];
    }
    set companyNameTestSetter(v) {
        this.setterImpl(9, v, 'companyName');
    }
    /**
     *  The client id of this authenticated. Read-only. "null" is returned if this authenticated is not associated with a client.
     *
     * @type {Id}
     */
    get clientId() {
        return this.clientIdWrapper;
    }
    set clientIdTestSetter(v) {
        this.setterImpl(10, v, 'clientId', () => { this.clientIdWrapper = v; });
    }
    /**
     *  The secure token of this user. Read-only.
     *
     * @type {string}
     */
    get secureToken() {
        return this.data[11];
    }
    set secureTokenTestSetter(v) {
        this.setterImpl(11, v, 'secureToken');
    }
    /**
     *  Deadline of the test account. "null" is returned if this is a paid account. Read-only.
     *
     * @type {DateTime}
     */
    get testAccountDeadline() {
        return this.data[12];
    }
    set testAccountDeadlineTestSetter(v) {
        this.setterImpl(12, v, 'testAccountDeadline');
    }
    /**
     *  Hmac value being needed to use the tawk javascript api.
     *
     * @type {string}
     */
    get tawkHmac() {
        return this.data[13];
    }
    set tawkHmacTestSetter(v) {
        this.setterImpl(13, v, 'tawkHmac');
    }
    /**
     *  The type of this client. Read-only.
     *
     * @type {AuthenticatedApiClientType}
     */
    get clientType() {
        return this.data[14];
    }
    set clientTypeTestSetter(v) {
        this.setterImpl(14, v, 'clientType');
    }
    /**
     *  Is the user logged in with our master password?
     *
     * @type {boolean}
     */
    get loggedInWithMasterPassword() {
        return this.data[15];
    }
    set loggedInWithMasterPasswordTestSetter(v) {
        this.setterImpl(15, v, 'loggedInWithMasterPassword');
    }
    _fixIds(_idReplacements) {
        this.data[10] = Meta.getReplacedId(this.data[10], _idReplacements);
        this.clientIdWrapper = Id.create(this.data[10]);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 16);
            data[15] = false;
        }
        // propagate new raw data to children
        if (!Meta.isSameId(data ? data[10] : null, this.clientIdWrapper))
            this.clientIdWrapper = data && data[10] ? Id.create(data[10]) : null;
    }
    get dni() {
        return '1';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '1', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export var AuthenticatedApiRole;
(function (AuthenticatedApiRole) {
    AuthenticatedApiRole[AuthenticatedApiRole["CLIENT_DEFAULT"] = 1] = "CLIENT_DEFAULT";
    AuthenticatedApiRole[AuthenticatedApiRole["CLIENT_OWNER"] = 2] = "CLIENT_OWNER";
    AuthenticatedApiRole[AuthenticatedApiRole["ADMIN"] = 3] = "ADMIN";
    AuthenticatedApiRole[AuthenticatedApiRole["SUPER_ADMIN"] = 4] = "SUPER_ADMIN";
})(AuthenticatedApiRole || (AuthenticatedApiRole = {}));
export var AuthenticatedApiGender;
(function (AuthenticatedApiGender) {
    AuthenticatedApiGender[AuthenticatedApiGender["MALE"] = 1] = "MALE";
    AuthenticatedApiGender[AuthenticatedApiGender["FEMALE"] = 2] = "FEMALE";
    AuthenticatedApiGender[AuthenticatedApiGender["DIVERSE"] = 3] = "DIVERSE";
})(AuthenticatedApiGender || (AuthenticatedApiGender = {}));
export var AuthenticatedApiClientType;
(function (AuthenticatedApiClientType) {
    AuthenticatedApiClientType[AuthenticatedApiClientType["TEST_NEED_VERIFICATION"] = 1] = "TEST_NEED_VERIFICATION";
    AuthenticatedApiClientType[AuthenticatedApiClientType["TEST"] = 2] = "TEST";
    AuthenticatedApiClientType[AuthenticatedApiClientType["TEST_EXPIRED"] = 3] = "TEST_EXPIRED";
    AuthenticatedApiClientType[AuthenticatedApiClientType["PAID"] = 4] = "PAID";
    AuthenticatedApiClientType[AuthenticatedApiClientType["TERMINATED"] = 5] = "TERMINATED";
})(AuthenticatedApiClientType || (AuthenticatedApiClientType = {}));
//# sourceMappingURL=authenticated-api.service.ag.js.map