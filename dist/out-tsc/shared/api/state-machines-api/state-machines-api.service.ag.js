var _a, _b, _c, _d;
import { __decorate, __metadata } from "tslib";
import { Injectable, NgZone, Injector } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Router } from '@angular/router';
import { ApiBase } from '@plano/shared/api/base/api-base';
import { Id } from '@plano/shared/api/base/id';
import { Meta } from '@plano/shared/api/base/meta';
import { ApiAttributeInfo } from '@plano/shared/api/base/api-attribute-info';
import { PApiPrimitiveTypes } from '@plano/shared/api/base/generated-types.ag';
import { ApiListWrapper, ApiObjectWrapper, AuthenticatedApiRole } from '@plano/shared/api';
import { ApiErrorService } from '@plano/shared/api/api-error.service';
/**
 * This service enables access to the api "admin/state_machines".
 * This file is auto generated by de.sage.scheduler.api_generator.ApiGenerator.
 */
// constants
class Consts {
    constructor() {
        this.STATE_MACHINE_DEBUG_INFO = 1;
    }
}
let StateMachinesApiService = class StateMachinesApiService extends ApiBase {
    constructor(h, router, apiE, zone, injector) {
        super(h, router, apiE, zone, injector, 'admin/state_machines');
        this.consts = new Consts();
        this.dataWrapper = new StateMachinesApiRoot(this, false);
    }
    version() {
        return '85bf066e89520378751ea68dabc86232,99bcf972ebf06bc1e7a5abb2ef4fd496';
    }
    get data() {
        return this.dataWrapper;
    }
    getRootWrapper() {
        return this.dataWrapper;
    }
    recreateRootWrapper() {
        this.dataWrapper = new StateMachinesApiRoot(this, false);
    }
};
StateMachinesApiService = __decorate([
    Injectable({
        providedIn: 'root',
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof HttpClient !== "undefined" && HttpClient) === "function" ? _a : Object, typeof (_b = typeof Router !== "undefined" && Router) === "function" ? _b : Object, ApiErrorService, typeof (_c = typeof NgZone !== "undefined" && NgZone) === "function" ? _c : Object, typeof (_d = typeof Injector !== "undefined" && Injector) === "function" ? _d : Object])
], StateMachinesApiService);
export { StateMachinesApiService };
export class StateMachinesApiRoot extends ApiListWrapper {
    constructor(api, removeDestroyedItems) {
        super(api, removeDestroyedItems, '');
        this.api = api;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: '',
            id: 'ROOT',
            primitiveType: PApiPrimitiveTypes.ApiList,
            show: function () {
                if (!(((this.api.rightsService.requesterIs(AuthenticatedApiRole.SUPER_ADMIN))))) {
                    return false;
                }
                return true;
            },
            canEdit: () => false,
            readMode: () => true,
        });
    }
    wrapItem(item, _generateMissingData) {
        const newWrapper = new StateMachinesApiStateMachine(this.api);
        newWrapper._updateRawData(item, _generateMissingData);
        return newWrapper;
    }
    containsPrimitives() {
        return false;
    }
    containsIds() {
        return false;
    }
    createInstance(removeDestroyedItems) {
        return new StateMachinesApiRoot(this.api, removeDestroyedItems);
    }
    get dni() {
        return '1';
    }
    createNewItem(id = null) {
        const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);
        const newItem = this.wrapItem(newItemRaw, true);
        this.push(newItem);
        if (this.api)
            this.api.changed('');
        return newItem;
    }
}
export class StateMachinesApiStateMachine extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, StateMachinesApiStateMachine);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'stateMachine',
            id: 'STATE_MACHINE',
            canEdit: () => false,
            readMode: () => true,
        });
        this.attributeInfoDebugInfo = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'debugInfo',
            id: 'STATE_MACHINE_DEBUG_INFO',
            primitiveType: PApiPrimitiveTypes.any,
            canEdit: () => false,
            readMode: () => true,
        });
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  A key value map.
     *
     * @type {any}
     */
    get debugInfo() {
        return this.data[1];
    }
    set debugInfoTestSetter(v) {
        this.setterImpl(1, v, 'debugInfo');
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 2);
        }
        // propagate new raw data to children
    }
    get dni() {
        return '2';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '2', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
//# sourceMappingURL=state-machines-api.service.ag.js.map