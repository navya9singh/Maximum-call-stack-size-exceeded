var _a, _b, _c, _d;
import { __decorate, __metadata } from "tslib";
import { Injectable, NgZone, Injector } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Router } from '@angular/router';
import { ApiBase } from '@plano/shared/api/base/api-base';
import { Id } from '@plano/shared/api/base/id';
import { Meta } from '@plano/shared/api/base/meta';
import { ApiAttributeInfo } from '@plano/shared/api/base/api-attribute-info';
import { PApiPrimitiveTypes } from '@plano/shared/api/base/generated-types.ag';
import { ApiObjectWrapper } from '@plano/shared/api';
import { Config } from '@plano/shared/core/config';
import { ApiErrorService } from '@plano/shared/api/api-error.service';
/**
 * This service enables access to the api "testing/story_book".
 * This file is auto generated by de.sage.scheduler.api_generator.ApiGenerator.
 */
// constants
class Consts {
    constructor() {
        this.ALL_TYPES = 1;
        this.IS_NULL = 2;
        this.VALIDATIONS = 3;
        this.ALL_TYPES_BOOLEAN = 1;
        this.ALL_TYPES_NUMBER = 2;
        this.ALL_TYPES_INTEGER = 3;
        this.ALL_TYPES_CURRENCY = 4;
        this.ALL_TYPES_STRING = 5;
        this.ALL_TYPES_TEL = 6;
        this.ALL_TYPES_EMAIL = 7;
        this.ALL_TYPES_PASSWORD = 8;
        this.ALL_TYPES_POSTAL_CODE = 9;
        this.ALL_TYPES_SEARCH = 10;
        this.ALL_TYPES_URL = 11;
        this.ALL_TYPES_IBAN = 12;
        this.ALL_TYPES_BIC = 13;
        this.ALL_TYPES_DATE_TIME = 14;
        this.ALL_TYPES_DATE = 15;
        this.ALL_TYPES_DATE_EXCLUSIVE_END = 16;
        this.ALL_TYPES_MINUTES = 17;
        this.ALL_TYPES_HOURS = 18;
        this.ALL_TYPES_DAYS = 19;
        this.ALL_TYPES_MONTHS = 20;
        this.ALL_TYPES_YEARS = 21;
        this.ALL_TYPES_DURATION = 22;
        this.ALL_TYPES_LOCAL_TIME = 23;
        this.ALL_TYPES_ENUM = 24;
        this.ALL_TYPES_IMAGE = 25;
        this.IS_NULL_BOOLEAN = 1;
        this.IS_NULL_NUMBER = 2;
        this.IS_NULL_INTEGER = 3;
        this.IS_NULL_CURRENCY = 4;
        this.IS_NULL_STRING = 5;
        this.IS_NULL_TEL = 6;
        this.IS_NULL_EMAIL = 7;
        this.IS_NULL_PASSWORD = 8;
        this.IS_NULL_POSTAL_CODE = 9;
        this.IS_NULL_SEARCH = 10;
        this.IS_NULL_URL = 11;
        this.IS_NULL_IBAN = 12;
        this.IS_NULL_BIC = 13;
        this.IS_NULL_DATE_TIME = 14;
        this.IS_NULL_DATE = 15;
        this.IS_NULL_DATE_EXCLUSIVE_END = 16;
        this.IS_NULL_MINUTES = 17;
        this.IS_NULL_HOURS = 18;
        this.IS_NULL_DAYS = 19;
        this.IS_NULL_MONTHS = 20;
        this.IS_NULL_YEARS = 21;
        this.IS_NULL_DURATION = 22;
        this.IS_NULL_LOCAL_TIME = 23;
        this.IS_NULL_ENUM = 24;
        this.VALIDATIONS_TEL = 1;
        this.VALIDATIONS_EMAIL = 2;
        this.VALIDATIONS_PASSWORD = 3;
        this.VALIDATIONS_POSTAL_CODE = 4;
        this.VALIDATIONS_URL = 5;
        this.VALIDATIONS_IBAN = 6;
        this.VALIDATIONS_BIC = 7;
        this.VALIDATIONS_CURRENCY = 8;
        this.VALIDATIONS_INTEGER = 9;
        this.VALIDATIONS_REQUIRED = 10;
        this.VALIDATIONS_MIN = 11;
        this.VALIDATIONS_MAX = 12;
        this.VALIDATIONS_TEL_FAILS = 1;
        this.VALIDATIONS_TEL_FAILS_BAD_VALUE = 1;
        this.VALIDATIONS_EMAIL_FAILS = 1;
        this.VALIDATIONS_EMAIL_FAILS_NO_AT = 1;
        this.VALIDATIONS_EMAIL_FAILS_BAD_VALUE = 2;
        this.VALIDATIONS_PASSWORD_FAILS = 1;
        this.VALIDATIONS_PASSWORD_FAILS_TOO_SHORT = 1;
        this.VALIDATIONS_PASSWORD_FAILS_NEEDS_DIGITS = 2;
        this.VALIDATIONS_POSTAL_CODE_FAILS = 1;
        this.VALIDATIONS_POSTAL_CODE_FAILS_TOO_LONG = 1;
        this.VALIDATIONS_POSTAL_CODE_FAILS_TOO_SHORT = 2;
        this.VALIDATIONS_URL_FAILS = 1;
        this.VALIDATIONS_URL_FAILS_PROTOCOL_MISSING = 1;
        this.VALIDATIONS_URL_FAILS_WWW = 2;
        this.VALIDATIONS_URL_FAILS_BAD_VALUE = 3;
        this.VALIDATIONS_URL_FAILS_WHITESPACE = 4;
        this.VALIDATIONS_IBAN_FAILS = 1;
        this.VALIDATIONS_IBAN_FAILS_BAD_VALUE = 1;
        this.VALIDATIONS_BIC_FAILS = 1;
        this.VALIDATIONS_BIC_FAILS_BAD_VALUE = 1;
        this.VALIDATIONS_CURRENCY_FAILS = 1;
        this.VALIDATIONS_CURRENCY_FAILS_TOO_MANY_DIGITS = 1;
        this.VALIDATIONS_INTEGER_FAILS = 1;
        this.VALIDATIONS_INTEGER_FAILS_BAD_VALUE_HOURS = 1;
        this.VALIDATIONS_INTEGER_FAILS_BAD_VALUE_INTEGER = 2;
        this.VALIDATIONS_REQUIRED_VALID = 1;
        this.VALIDATIONS_REQUIRED_FAILS = 2;
        this.VALIDATIONS_REQUIRED_VALID_NUMBER = 1;
        this.VALIDATIONS_REQUIRED_VALID_INTEGER = 2;
        this.VALIDATIONS_REQUIRED_VALID_CURRENCY = 3;
        this.VALIDATIONS_REQUIRED_VALID_STRING = 4;
        this.VALIDATIONS_REQUIRED_VALID_TEL = 5;
        this.VALIDATIONS_REQUIRED_VALID_EMAIL = 6;
        this.VALIDATIONS_REQUIRED_VALID_PASSWORD = 7;
        this.VALIDATIONS_REQUIRED_VALID_POSTAL_CODE = 8;
        this.VALIDATIONS_REQUIRED_VALID_SEARCH = 9;
        this.VALIDATIONS_REQUIRED_VALID_URL = 10;
        this.VALIDATIONS_REQUIRED_VALID_IBAN = 11;
        this.VALIDATIONS_REQUIRED_VALID_BIC = 12;
        this.VALIDATIONS_REQUIRED_VALID_DATE_TIME = 13;
        this.VALIDATIONS_REQUIRED_VALID_DATE = 14;
        this.VALIDATIONS_REQUIRED_VALID_DATE_EXCLUSIVE_END = 15;
        this.VALIDATIONS_REQUIRED_VALID_MINUTES = 16;
        this.VALIDATIONS_REQUIRED_VALID_HOURS = 17;
        this.VALIDATIONS_REQUIRED_VALID_DAYS = 18;
        this.VALIDATIONS_REQUIRED_VALID_MONTHS = 19;
        this.VALIDATIONS_REQUIRED_VALID_YEARS = 20;
        this.VALIDATIONS_REQUIRED_VALID_DURATION = 21;
        this.VALIDATIONS_REQUIRED_VALID_LOCAL_TIME = 22;
        this.VALIDATIONS_REQUIRED_VALID_ENUM = 23;
        this.VALIDATIONS_REQUIRED_FAILS_NUMBER = 1;
        this.VALIDATIONS_REQUIRED_FAILS_INTEGER = 2;
        this.VALIDATIONS_REQUIRED_FAILS_CURRENCY = 3;
        this.VALIDATIONS_REQUIRED_FAILS_STRING = 4;
        this.VALIDATIONS_REQUIRED_FAILS_TEL = 5;
        this.VALIDATIONS_REQUIRED_FAILS_EMAIL = 6;
        this.VALIDATIONS_REQUIRED_FAILS_PASSWORD = 7;
        this.VALIDATIONS_REQUIRED_FAILS_POSTAL_CODE = 8;
        this.VALIDATIONS_REQUIRED_FAILS_SEARCH = 9;
        this.VALIDATIONS_REQUIRED_FAILS_URL = 10;
        this.VALIDATIONS_REQUIRED_FAILS_IBAN = 11;
        this.VALIDATIONS_REQUIRED_FAILS_BIC = 12;
        this.VALIDATIONS_REQUIRED_FAILS_DATE_TIME = 13;
        this.VALIDATIONS_REQUIRED_FAILS_DATE = 14;
        this.VALIDATIONS_REQUIRED_FAILS_DATE_EXCLUSIVE_END = 15;
        this.VALIDATIONS_REQUIRED_FAILS_MINUTES = 16;
        this.VALIDATIONS_REQUIRED_FAILS_HOURS = 17;
        this.VALIDATIONS_REQUIRED_FAILS_DAYS = 18;
        this.VALIDATIONS_REQUIRED_FAILS_MONTHS = 19;
        this.VALIDATIONS_REQUIRED_FAILS_YEARS = 20;
        this.VALIDATIONS_REQUIRED_FAILS_DURATION = 21;
        this.VALIDATIONS_REQUIRED_FAILS_LOCAL_TIME = 22;
        this.VALIDATIONS_REQUIRED_FAILS_ENUM = 23;
        this.VALIDATIONS_REQUIRED_FAILS_IMAGE = 24;
        this.VALIDATIONS_MIN_VALID = 1;
        this.VALIDATIONS_MIN_FAILS = 2;
        this.VALIDATIONS_MIN_VALID_COMPARE_CONST = 1;
        this.VALIDATIONS_MIN_VALID_COMPARE_CONST_NUMBER_IS_EQUAL = 1;
        this.VALIDATIONS_MIN_VALID_COMPARE_CONST_NUMBER_THIS_IS_NULL = 2;
        this.VALIDATIONS_MIN_VALID_COMPARE_CONST_NUMBER_OTHER_IS_NULL = 3;
        this.VALIDATIONS_MIN_VALID_COMPARE_CONST_INTEGER_IS_EQUAL = 4;
        this.VALIDATIONS_MIN_VALID_COMPARE_CONST_INTEGER_THIS_IS_NULL = 5;
        this.VALIDATIONS_MIN_VALID_COMPARE_CONST_INTEGER_OTHER_IS_NULL = 6;
        this.VALIDATIONS_MIN_VALID_COMPARE_CONST_CURRENCY_IS_EQUAL = 7;
        this.VALIDATIONS_MIN_VALID_COMPARE_CONST_CURRENCY_THIS_IS_NULL = 8;
        this.VALIDATIONS_MIN_VALID_COMPARE_CONST_CURRENCY_OTHER_IS_NULL = 9;
        this.VALIDATIONS_MIN_VALID_COMPARE_CONST_IS_NEGATIVE = 10;
        this.VALIDATIONS_MIN_VALID_COMPARE_CONST_DATE_TIME_IS_EQUAL = 11;
        this.VALIDATIONS_MIN_VALID_COMPARE_CONST_DATE_TIME_THIS_IS_NULL = 12;
        this.VALIDATIONS_MIN_VALID_COMPARE_CONST_DATE_TIME_OTHER_IS_NULL = 13;
        this.VALIDATIONS_MIN_VALID_COMPARE_CONST_DATE_IS_EQUAL = 14;
        this.VALIDATIONS_MIN_VALID_COMPARE_CONST_DATE_THIS_IS_NULL = 15;
        this.VALIDATIONS_MIN_VALID_COMPARE_CONST_DATE_OTHER_IS_NULL = 16;
        this.VALIDATIONS_MIN_VALID_COMPARE_CONST_DATE_EXCLUSIVE_END_IS_EQUAL = 17;
        this.VALIDATIONS_MIN_VALID_COMPARE_CONST_DATE_EXCLUSIVE_END_THIS_IS_NULL = 18;
        this.VALIDATIONS_MIN_VALID_COMPARE_CONST_DATE_EXCLUSIVE_END_OTHER_IS_NULL = 19;
        this.VALIDATIONS_MIN_VALID_COMPARE_CONST_MINUTES_IS_EQUAL = 20;
        this.VALIDATIONS_MIN_VALID_COMPARE_CONST_MINUTES_THIS_IS_NULL = 21;
        this.VALIDATIONS_MIN_VALID_COMPARE_CONST_MINUTES_OTHER_IS_NULL = 22;
        this.VALIDATIONS_MIN_VALID_COMPARE_CONST_HOURS_IS_EQUAL = 23;
        this.VALIDATIONS_MIN_VALID_COMPARE_CONST_HOURS_THIS_IS_NULL = 24;
        this.VALIDATIONS_MIN_VALID_COMPARE_CONST_HOURS_OTHER_IS_NULL = 25;
        this.VALIDATIONS_MIN_VALID_COMPARE_CONST_DAYS_IS_EQUAL = 26;
        this.VALIDATIONS_MIN_VALID_COMPARE_CONST_DAYS_THIS_IS_NULL = 27;
        this.VALIDATIONS_MIN_VALID_COMPARE_CONST_DAYS_OTHER_IS_NULL = 28;
        this.VALIDATIONS_MIN_VALID_COMPARE_CONST_MONTHS_IS_EQUAL = 29;
        this.VALIDATIONS_MIN_VALID_COMPARE_CONST_MONTHS_THIS_IS_NULL = 30;
        this.VALIDATIONS_MIN_VALID_COMPARE_CONST_MONTHS_OTHER_IS_NULL = 31;
        this.VALIDATIONS_MIN_VALID_COMPARE_CONST_YEARS_IS_EQUAL = 32;
        this.VALIDATIONS_MIN_VALID_COMPARE_CONST_YEARS_THIS_IS_NULL = 33;
        this.VALIDATIONS_MIN_VALID_COMPARE_CONST_YEARS_OTHER_IS_NULL = 34;
        this.VALIDATIONS_MIN_VALID_COMPARE_CONST_DURATION_IS_EQUAL = 35;
        this.VALIDATIONS_MIN_VALID_COMPARE_CONST_DURATION_THIS_IS_NULL = 36;
        this.VALIDATIONS_MIN_VALID_COMPARE_CONST_DURATION_OTHER_IS_NULL = 37;
        this.VALIDATIONS_MIN_VALID_COMPARE_CONST_LOCAL_TIME_IS_EQUAL = 38;
        this.VALIDATIONS_MIN_VALID_COMPARE_CONST_LOCAL_TIME_THIS_IS_NULL = 39;
        this.VALIDATIONS_MIN_VALID_COMPARE_CONST_LOCAL_TIME_OTHER_IS_NULL = 40;
        this.VALIDATIONS_MIN_FAILS_COMPARE_CONST = 1;
        this.VALIDATIONS_MIN_FAILS_COMPARE_NODE = 2;
        this.VALIDATIONS_MIN_FAILS_COMPARE_CONST_NUMBER = 1;
        this.VALIDATIONS_MIN_FAILS_COMPARE_CONST_NUMBER_EQUAL_NOT_ALLOWED = 2;
        this.VALIDATIONS_MIN_FAILS_COMPARE_CONST_INTEGER = 3;
        this.VALIDATIONS_MIN_FAILS_COMPARE_CONST_INTEGER_EQUAL_NOT_ALLOWED = 4;
        this.VALIDATIONS_MIN_FAILS_COMPARE_CONST_CURRENCY = 5;
        this.VALIDATIONS_MIN_FAILS_COMPARE_CONST_CURRENCY_EQUAL_NOT_ALLOWED = 6;
        this.VALIDATIONS_MIN_FAILS_COMPARE_CONST_DATE_TIME = 7;
        this.VALIDATIONS_MIN_FAILS_COMPARE_CONST_DATE_TIME_EQUAL_NOT_ALLOWED = 8;
        this.VALIDATIONS_MIN_FAILS_COMPARE_CONST_DATE = 9;
        this.VALIDATIONS_MIN_FAILS_COMPARE_CONST_DATE_EQUAL_NOT_ALLOWED = 10;
        this.VALIDATIONS_MIN_FAILS_COMPARE_CONST_DATE_EXCLUSIVE_END = 11;
        this.VALIDATIONS_MIN_FAILS_COMPARE_CONST_DATE_EXCLUSIVE_END_EQUAL_NOT_ALLOWED = 12;
        this.VALIDATIONS_MIN_FAILS_COMPARE_CONST_MINUTES = 13;
        this.VALIDATIONS_MIN_FAILS_COMPARE_CONST_MINUTES_EQUAL_NOT_ALLOWED = 14;
        this.VALIDATIONS_MIN_FAILS_COMPARE_CONST_HOURS = 15;
        this.VALIDATIONS_MIN_FAILS_COMPARE_CONST_HOURS_EQUAL_NOT_ALLOWED = 16;
        this.VALIDATIONS_MIN_FAILS_COMPARE_CONST_DAYS = 17;
        this.VALIDATIONS_MIN_FAILS_COMPARE_CONST_DAYS_EQUAL_NOT_ALLOWED = 18;
        this.VALIDATIONS_MIN_FAILS_COMPARE_CONST_MONTHS = 19;
        this.VALIDATIONS_MIN_FAILS_COMPARE_CONST_MONTHS_EQUAL_NOT_ALLOWED = 20;
        this.VALIDATIONS_MIN_FAILS_COMPARE_CONST_YEARS = 21;
        this.VALIDATIONS_MIN_FAILS_COMPARE_CONST_YEARS_EQUAL_NOT_ALLOWED = 22;
        this.VALIDATIONS_MIN_FAILS_COMPARE_CONST_DURATION = 23;
        this.VALIDATIONS_MIN_FAILS_COMPARE_CONST_DURATION_EQUAL_NOT_ALLOWED = 24;
        this.VALIDATIONS_MIN_FAILS_COMPARE_CONST_LOCAL_TIME = 25;
        this.VALIDATIONS_MIN_FAILS_COMPARE_CONST_LOCAL_TIME_EQUAL_NOT_ALLOWED = 26;
        this.VALIDATIONS_MIN_FAILS_COMPARE_NODE_NUMBER_COMPARED_NODE = 1;
        this.VALIDATIONS_MIN_FAILS_COMPARE_NODE_NUMBER = 2;
        this.VALIDATIONS_MIN_FAILS_COMPARE_NODE_INTEGER_COMPARED_NODE = 3;
        this.VALIDATIONS_MIN_FAILS_COMPARE_NODE_INTEGER = 4;
        this.VALIDATIONS_MIN_FAILS_COMPARE_NODE_CURRENCY_COMPARED_NODE = 5;
        this.VALIDATIONS_MIN_FAILS_COMPARE_NODE_CURRENCY = 6;
        this.VALIDATIONS_MIN_FAILS_COMPARE_NODE_DATE_TIME_COMPARED_NODE = 7;
        this.VALIDATIONS_MIN_FAILS_COMPARE_NODE_DATE_TIME = 8;
        this.VALIDATIONS_MIN_FAILS_COMPARE_NODE_DATE_COMPARED_NODE = 9;
        this.VALIDATIONS_MIN_FAILS_COMPARE_NODE_DATE = 10;
        this.VALIDATIONS_MIN_FAILS_COMPARE_NODE_DATE_EXCLUSIVE_END_COMPARED_NODE = 11;
        this.VALIDATIONS_MIN_FAILS_COMPARE_NODE_DATE_EXCLUSIVE_END = 12;
        this.VALIDATIONS_MIN_FAILS_COMPARE_NODE_MINUTES_COMPARED_NODE = 13;
        this.VALIDATIONS_MIN_FAILS_COMPARE_NODE_MINUTES = 14;
        this.VALIDATIONS_MIN_FAILS_COMPARE_NODE_HOURS_COMPARED_NODE = 15;
        this.VALIDATIONS_MIN_FAILS_COMPARE_NODE_HOURS = 16;
        this.VALIDATIONS_MIN_FAILS_COMPARE_NODE_DAYS_COMPARED_NODE = 17;
        this.VALIDATIONS_MIN_FAILS_COMPARE_NODE_DAYS = 18;
        this.VALIDATIONS_MIN_FAILS_COMPARE_NODE_MONTHS_COMPARED_NODE = 19;
        this.VALIDATIONS_MIN_FAILS_COMPARE_NODE_MONTHS = 20;
        this.VALIDATIONS_MIN_FAILS_COMPARE_NODE_YEARS_COMPARED_NODE = 21;
        this.VALIDATIONS_MIN_FAILS_COMPARE_NODE_YEARS = 22;
        this.VALIDATIONS_MIN_FAILS_COMPARE_NODE_DURATION_COMPARED_NODE = 23;
        this.VALIDATIONS_MIN_FAILS_COMPARE_NODE_DURATION = 24;
        this.VALIDATIONS_MIN_FAILS_COMPARE_NODE_LOCAL_TIME_COMPARED_NODE = 25;
        this.VALIDATIONS_MIN_FAILS_COMPARE_NODE_LOCAL_TIME = 26;
        this.VALIDATIONS_MAX_VALID = 1;
        this.VALIDATIONS_MAX_FAILS = 2;
        this.VALIDATIONS_MAX_VALID_COMPARE_CONST = 1;
        this.VALIDATIONS_MAX_VALID_COMPARE_CONST_NUMBER_IS_EQUAL = 1;
        this.VALIDATIONS_MAX_VALID_COMPARE_CONST_NUMBER_THIS_IS_NULL = 2;
        this.VALIDATIONS_MAX_VALID_COMPARE_CONST_NUMBER_OTHER_IS_NULL = 3;
        this.VALIDATIONS_MAX_VALID_COMPARE_CONST_INTEGER_IS_EQUAL = 4;
        this.VALIDATIONS_MAX_VALID_COMPARE_CONST_INTEGER_THIS_IS_NULL = 5;
        this.VALIDATIONS_MAX_VALID_COMPARE_CONST_INTEGER_OTHER_IS_NULL = 6;
        this.VALIDATIONS_MAX_VALID_COMPARE_CONST_CURRENCY_IS_EQUAL = 7;
        this.VALIDATIONS_MAX_VALID_COMPARE_CONST_CURRENCY_THIS_IS_NULL = 8;
        this.VALIDATIONS_MAX_VALID_COMPARE_CONST_CURRENCY_OTHER_IS_NULL = 9;
        this.VALIDATIONS_MAX_VALID_COMPARE_CONST_DATE_TIME_IS_EQUAL = 10;
        this.VALIDATIONS_MAX_VALID_COMPARE_CONST_DATE_TIME_THIS_IS_NULL = 11;
        this.VALIDATIONS_MAX_VALID_COMPARE_CONST_DATE_TIME_OTHER_IS_NULL = 12;
        this.VALIDATIONS_MAX_VALID_COMPARE_CONST_DATE_IS_EQUAL = 13;
        this.VALIDATIONS_MAX_VALID_COMPARE_CONST_DATE_THIS_IS_NULL = 14;
        this.VALIDATIONS_MAX_VALID_COMPARE_CONST_DATE_OTHER_IS_NULL = 15;
        this.VALIDATIONS_MAX_VALID_COMPARE_CONST_DATE_EXCLUSIVE_END_IS_EQUAL = 16;
        this.VALIDATIONS_MAX_VALID_COMPARE_CONST_DATE_EXCLUSIVE_END_THIS_IS_NULL = 17;
        this.VALIDATIONS_MAX_VALID_COMPARE_CONST_DATE_EXCLUSIVE_END_OTHER_IS_NULL = 18;
        this.VALIDATIONS_MAX_VALID_COMPARE_CONST_MINUTES_IS_EQUAL = 19;
        this.VALIDATIONS_MAX_VALID_COMPARE_CONST_MINUTES_THIS_IS_NULL = 20;
        this.VALIDATIONS_MAX_VALID_COMPARE_CONST_MINUTES_OTHER_IS_NULL = 21;
        this.VALIDATIONS_MAX_VALID_COMPARE_CONST_HOURS_IS_EQUAL = 22;
        this.VALIDATIONS_MAX_VALID_COMPARE_CONST_HOURS_THIS_IS_NULL = 23;
        this.VALIDATIONS_MAX_VALID_COMPARE_CONST_HOURS_OTHER_IS_NULL = 24;
        this.VALIDATIONS_MAX_VALID_COMPARE_CONST_DAYS_IS_EQUAL = 25;
        this.VALIDATIONS_MAX_VALID_COMPARE_CONST_DAYS_THIS_IS_NULL = 26;
        this.VALIDATIONS_MAX_VALID_COMPARE_CONST_DAYS_OTHER_IS_NULL = 27;
        this.VALIDATIONS_MAX_VALID_COMPARE_CONST_MONTHS_IS_EQUAL = 28;
        this.VALIDATIONS_MAX_VALID_COMPARE_CONST_MONTHS_THIS_IS_NULL = 29;
        this.VALIDATIONS_MAX_VALID_COMPARE_CONST_MONTHS_OTHER_IS_NULL = 30;
        this.VALIDATIONS_MAX_VALID_COMPARE_CONST_YEARS_IS_EQUAL = 31;
        this.VALIDATIONS_MAX_VALID_COMPARE_CONST_YEARS_THIS_IS_NULL = 32;
        this.VALIDATIONS_MAX_VALID_COMPARE_CONST_YEARS_OTHER_IS_NULL = 33;
        this.VALIDATIONS_MAX_VALID_COMPARE_CONST_DURATION_IS_EQUAL = 34;
        this.VALIDATIONS_MAX_VALID_COMPARE_CONST_DURATION_THIS_IS_NULL = 35;
        this.VALIDATIONS_MAX_VALID_COMPARE_CONST_DURATION_OTHER_IS_NULL = 36;
        this.VALIDATIONS_MAX_VALID_COMPARE_CONST_LOCAL_TIME_IS_EQUAL = 37;
        this.VALIDATIONS_MAX_VALID_COMPARE_CONST_LOCAL_TIME_THIS_IS_NULL = 38;
        this.VALIDATIONS_MAX_VALID_COMPARE_CONST_LOCAL_TIME_OTHER_IS_NULL = 39;
        this.VALIDATIONS_MAX_FAILS_COMPARE_CONST = 1;
        this.VALIDATIONS_MAX_FAILS_COMPARE_NODE = 2;
        this.VALIDATIONS_MAX_FAILS_COMPARE_CONST_NUMBER = 1;
        this.VALIDATIONS_MAX_FAILS_COMPARE_CONST_NUMBER_EQUAL_NOT_ALLOWED = 2;
        this.VALIDATIONS_MAX_FAILS_COMPARE_CONST_INTEGER = 3;
        this.VALIDATIONS_MAX_FAILS_COMPARE_CONST_INTEGER_EQUAL_NOT_ALLOWED = 4;
        this.VALIDATIONS_MAX_FAILS_COMPARE_CONST_CURRENCY = 5;
        this.VALIDATIONS_MAX_FAILS_COMPARE_CONST_CURRENCY_EQUAL_NOT_ALLOWED = 6;
        this.VALIDATIONS_MAX_FAILS_COMPARE_CONST_DATE_TIME = 7;
        this.VALIDATIONS_MAX_FAILS_COMPARE_CONST_DATE_TIME_EQUAL_NOT_ALLOWED = 8;
        this.VALIDATIONS_MAX_FAILS_COMPARE_CONST_DATE = 9;
        this.VALIDATIONS_MAX_FAILS_COMPARE_CONST_DATE_EQUAL_NOT_ALLOWED = 10;
        this.VALIDATIONS_MAX_FAILS_COMPARE_CONST_DATE_EXCLUSIVE_END = 11;
        this.VALIDATIONS_MAX_FAILS_COMPARE_CONST_DATE_EXCLUSIVE_END_EQUAL_NOT_ALLOWED = 12;
        this.VALIDATIONS_MAX_FAILS_COMPARE_CONST_MINUTES = 13;
        this.VALIDATIONS_MAX_FAILS_COMPARE_CONST_MINUTES_EQUAL_NOT_ALLOWED = 14;
        this.VALIDATIONS_MAX_FAILS_COMPARE_CONST_HOURS = 15;
        this.VALIDATIONS_MAX_FAILS_COMPARE_CONST_HOURS_EQUAL_NOT_ALLOWED = 16;
        this.VALIDATIONS_MAX_FAILS_COMPARE_CONST_DAYS = 17;
        this.VALIDATIONS_MAX_FAILS_COMPARE_CONST_DAYS_EQUAL_NOT_ALLOWED = 18;
        this.VALIDATIONS_MAX_FAILS_COMPARE_CONST_MONTHS = 19;
        this.VALIDATIONS_MAX_FAILS_COMPARE_CONST_MONTHS_EQUAL_NOT_ALLOWED = 20;
        this.VALIDATIONS_MAX_FAILS_COMPARE_CONST_YEARS = 21;
        this.VALIDATIONS_MAX_FAILS_COMPARE_CONST_YEARS_EQUAL_NOT_ALLOWED = 22;
        this.VALIDATIONS_MAX_FAILS_COMPARE_CONST_DURATION = 23;
        this.VALIDATIONS_MAX_FAILS_COMPARE_CONST_DURATION_EQUAL_NOT_ALLOWED = 24;
        this.VALIDATIONS_MAX_FAILS_COMPARE_CONST_LOCAL_TIME = 25;
        this.VALIDATIONS_MAX_FAILS_COMPARE_CONST_LOCAL_TIME_EQUAL_NOT_ALLOWED = 26;
        this.VALIDATIONS_MAX_FAILS_COMPARE_NODE_NUMBER_COMPARED_NODE = 1;
        this.VALIDATIONS_MAX_FAILS_COMPARE_NODE_NUMBER = 2;
        this.VALIDATIONS_MAX_FAILS_COMPARE_NODE_INTEGER_COMPARED_NODE = 3;
        this.VALIDATIONS_MAX_FAILS_COMPARE_NODE_INTEGER = 4;
        this.VALIDATIONS_MAX_FAILS_COMPARE_NODE_CURRENCY_COMPARED_NODE = 5;
        this.VALIDATIONS_MAX_FAILS_COMPARE_NODE_CURRENCY = 6;
        this.VALIDATIONS_MAX_FAILS_COMPARE_NODE_DATE_TIME_COMPARED_NODE = 7;
        this.VALIDATIONS_MAX_FAILS_COMPARE_NODE_DATE_TIME = 8;
        this.VALIDATIONS_MAX_FAILS_COMPARE_NODE_DATE_COMPARED_NODE = 9;
        this.VALIDATIONS_MAX_FAILS_COMPARE_NODE_DATE = 10;
        this.VALIDATIONS_MAX_FAILS_COMPARE_NODE_DATE_EXCLUSIVE_END_COMPARED_NODE = 11;
        this.VALIDATIONS_MAX_FAILS_COMPARE_NODE_DATE_EXCLUSIVE_END = 12;
        this.VALIDATIONS_MAX_FAILS_COMPARE_NODE_MINUTES_COMPARED_NODE = 13;
        this.VALIDATIONS_MAX_FAILS_COMPARE_NODE_MINUTES = 14;
        this.VALIDATIONS_MAX_FAILS_COMPARE_NODE_HOURS_COMPARED_NODE = 15;
        this.VALIDATIONS_MAX_FAILS_COMPARE_NODE_HOURS = 16;
        this.VALIDATIONS_MAX_FAILS_COMPARE_NODE_DAYS_COMPARED_NODE = 17;
        this.VALIDATIONS_MAX_FAILS_COMPARE_NODE_DAYS = 18;
        this.VALIDATIONS_MAX_FAILS_COMPARE_NODE_MONTHS_COMPARED_NODE = 19;
        this.VALIDATIONS_MAX_FAILS_COMPARE_NODE_MONTHS = 20;
        this.VALIDATIONS_MAX_FAILS_COMPARE_NODE_YEARS_COMPARED_NODE = 21;
        this.VALIDATIONS_MAX_FAILS_COMPARE_NODE_YEARS = 22;
        this.VALIDATIONS_MAX_FAILS_COMPARE_NODE_DURATION_COMPARED_NODE = 23;
        this.VALIDATIONS_MAX_FAILS_COMPARE_NODE_DURATION = 24;
        this.VALIDATIONS_MAX_FAILS_COMPARE_NODE_LOCAL_TIME_COMPARED_NODE = 25;
        this.VALIDATIONS_MAX_FAILS_COMPARE_NODE_LOCAL_TIME = 26;
    }
}
let StoryBookApiService = class StoryBookApiService extends ApiBase {
    constructor(h, router, apiE, zone, injector) {
        super(h, router, apiE, zone, injector, 'testing/story_book');
        this.consts = new Consts();
        this.dataWrapper = new StoryBookApiRoot(this);
    }
    version() {
        return '516f7e95c82389c96b2202a109c26c7b,abfb955fdaabb9034de0ddfa175892a0';
    }
    get data() {
        return this.dataWrapper;
    }
    getRootWrapper() {
        return this.dataWrapper;
    }
    recreateRootWrapper() {
        this.dataWrapper = new StoryBookApiRoot(this);
    }
};
StoryBookApiService = __decorate([
    Injectable({
        providedIn: 'root',
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof HttpClient !== "undefined" && HttpClient) === "function" ? _a : Object, typeof (_b = typeof Router !== "undefined" && Router) === "function" ? _b : Object, ApiErrorService, typeof (_c = typeof NgZone !== "undefined" && NgZone) === "function" ? _c : Object, typeof (_d = typeof Injector !== "undefined" && Injector) === "function" ? _d : Object])
], StoryBookApiService);
export { StoryBookApiService };
export class StoryBookApiRoot extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, StoryBookApiRoot);
        this.api = api;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: '',
            id: 'ROOT',
        });
        this.allTypesWrapper = new StoryBookApiAllTypes(this.api);
        this.isNullWrapper = new StoryBookApiIsNull(this.api);
        this.validationsWrapper = new StoryBookApiValidations(this.api);
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
        this.allTypesWrapper.parent = this;
        this.isNullWrapper.parent = this;
        this.validationsWrapper.parent = this;
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *  A list of all available types.
     */
    get allTypes() {
        return this.allTypesWrapper;
    }
    set allTypesTestSetter(v) {
        this.setterImpl(1, v.rawData, 'allTypes', () => { this.allTypesWrapper = v; });
    }
    /**
     *  A list of all available types having the appropriate "null" value.
     */
    get isNull() {
        return this.isNullWrapper;
    }
    set isNullTestSetter(v) {
        this.setterImpl(2, v.rawData, 'isNull', () => { this.isNullWrapper = v; });
    }
    /**
     *  attributes concerning validation.
     */
    get validations() {
        return this.validationsWrapper;
    }
    set validationsTestSetter(v) {
        this.setterImpl(3, v.rawData, 'validations', () => { this.validationsWrapper = v; });
    }
    _fixIds(_idReplacements) {
        this.allTypesWrapper._fixIds(_idReplacements);
        this.isNullWrapper._fixIds(_idReplacements);
        this.validationsWrapper._fixIds(_idReplacements);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 4);
            if (data[1] === null)
                data[1] = Meta.createNewObject(false);
            if (data[2] === null)
                data[2] = Meta.createNewObject(false);
            if (data[3] === null)
                data[3] = Meta.createNewObject(false);
        }
        // propagate new raw data to children
        this.allTypesWrapper._updateRawData(data ? data[1] : null, generateMissingData);
        this.isNullWrapper._updateRawData(data ? data[2] : null, generateMissingData);
        this.validationsWrapper._updateRawData(data ? data[3] : null, generateMissingData);
    }
    get dni() {
        return '1';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '1', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class StoryBookApiAllTypes extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, StoryBookApiAllTypes);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'allTypes',
            id: 'ALL_TYPES',
        });
        this.attributeInfoBoolean = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'boolean',
            id: 'ALL_TYPES_BOOLEAN',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoNumber = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'number',
            id: 'ALL_TYPES_NUMBER',
            primitiveType: PApiPrimitiveTypes.number,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.maxDecimalPlacesCount(0, PApiPrimitiveTypes.number, undefined);
                    },
                ];
            },
        });
        this.attributeInfoInteger = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'integer',
            id: 'ALL_TYPES_INTEGER',
            primitiveType: PApiPrimitiveTypes.Integer,
        });
        this.attributeInfoCurrency = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'currency',
            id: 'ALL_TYPES_CURRENCY',
            primitiveType: PApiPrimitiveTypes.Currency,
        });
        this.attributeInfoString = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'string',
            id: 'ALL_TYPES_STRING',
            primitiveType: PApiPrimitiveTypes.string,
        });
        this.attributeInfoTel = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'tel',
            id: 'ALL_TYPES_TEL',
            primitiveType: PApiPrimitiveTypes.Tel,
        });
        this.attributeInfoEmail = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'email',
            id: 'ALL_TYPES_EMAIL',
            primitiveType: PApiPrimitiveTypes.Email,
        });
        this.attributeInfoPassword = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'password',
            id: 'ALL_TYPES_PASSWORD',
            primitiveType: PApiPrimitiveTypes.Password,
        });
        this.attributeInfoPostalCode = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'postalCode',
            id: 'ALL_TYPES_POSTAL_CODE',
            primitiveType: PApiPrimitiveTypes.PostalCode,
        });
        this.attributeInfoSearch = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'search',
            id: 'ALL_TYPES_SEARCH',
            primitiveType: PApiPrimitiveTypes.Search,
        });
        this.attributeInfoUrl = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'url',
            id: 'ALL_TYPES_URL',
            primitiveType: PApiPrimitiveTypes.Url,
        });
        this.attributeInfoIban = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'iban',
            id: 'ALL_TYPES_IBAN',
            primitiveType: PApiPrimitiveTypes.Iban,
        });
        this.attributeInfoBic = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'bic',
            id: 'ALL_TYPES_BIC',
            primitiveType: PApiPrimitiveTypes.Bic,
        });
        this.attributeInfoDateTime = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'dateTime',
            id: 'ALL_TYPES_DATE_TIME',
            primitiveType: PApiPrimitiveTypes.DateTime,
        });
        this.attributeInfoDate = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'date',
            id: 'ALL_TYPES_DATE',
            primitiveType: PApiPrimitiveTypes.Date,
        });
        this.attributeInfoDateExclusiveEnd = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'dateExclusiveEnd',
            id: 'ALL_TYPES_DATE_EXCLUSIVE_END',
            primitiveType: PApiPrimitiveTypes.DateExclusiveEnd,
        });
        this.attributeInfoMinutes = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'minutes',
            id: 'ALL_TYPES_MINUTES',
            primitiveType: PApiPrimitiveTypes.Minutes,
        });
        this.attributeInfoHours = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'hours',
            id: 'ALL_TYPES_HOURS',
            primitiveType: PApiPrimitiveTypes.Hours,
        });
        this.attributeInfoDays = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'days',
            id: 'ALL_TYPES_DAYS',
            primitiveType: PApiPrimitiveTypes.Days,
        });
        this.attributeInfoMonths = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'months',
            id: 'ALL_TYPES_MONTHS',
            primitiveType: PApiPrimitiveTypes.Months,
        });
        this.attributeInfoYears = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'years',
            id: 'ALL_TYPES_YEARS',
            primitiveType: PApiPrimitiveTypes.Years,
        });
        this.attributeInfoDuration = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'duration',
            id: 'ALL_TYPES_DURATION',
            primitiveType: PApiPrimitiveTypes.Duration,
        });
        this.attributeInfoLocalTime = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'localTime',
            id: 'ALL_TYPES_LOCAL_TIME',
            primitiveType: PApiPrimitiveTypes.LocalTime,
        });
        this.attributeInfoEnum = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'enum',
            id: 'ALL_TYPES_ENUM',
            primitiveType: PApiPrimitiveTypes.Enum,
        });
        this.attributeInfoImage = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'image',
            id: 'ALL_TYPES_IMAGE',
            primitiveType: PApiPrimitiveTypes.Image,
        });
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *
     *
     * @type {boolean}
     */
    get boolean() {
        return this.data[1];
    }
    set boolean(v) {
        this.setterImpl(1, v, 'boolean');
    }
    /**
     *
     *
     * @type {number}
     */
    get number() {
        return this.data[2];
    }
    set number(v) {
        this.setterImpl(2, v, 'number');
    }
    /**
     *
     *
     * @type {Integer}
     */
    get integer() {
        return this.data[3];
    }
    set integer(v) {
        this.setterImpl(3, v, 'integer');
    }
    /**
     *
     *
     * @type {Currency}
     */
    get currency() {
        return this.data[4];
    }
    set currency(v) {
        this.setterImpl(4, v, 'currency');
    }
    /**
     *
     *
     * @type {string}
     */
    get string() {
        return this.data[5];
    }
    set string(v) {
        this.setterImpl(5, v, 'string');
    }
    /**
     *
     *
     * @type {Tel}
     */
    get tel() {
        return this.data[6];
    }
    set tel(v) {
        this.setterImpl(6, v, 'tel');
    }
    /**
     *
     *
     * @type {Email}
     */
    get email() {
        return this.data[7];
    }
    set email(v) {
        this.setterImpl(7, v, 'email');
    }
    /**
     *
     *
     * @type {Password}
     */
    get password() {
        return this.data[8];
    }
    set password(v) {
        this.setterImpl(8, v, 'password');
    }
    /**
     *
     *
     * @type {PostalCode}
     */
    get postalCode() {
        return this.data[9];
    }
    set postalCode(v) {
        this.setterImpl(9, v, 'postalCode');
    }
    /**
     *
     *
     * @type {Search}
     */
    get search() {
        return this.data[10];
    }
    set search(v) {
        this.setterImpl(10, v, 'search');
    }
    /**
     *
     *
     * @type {Url}
     */
    get url() {
        return this.data[11];
    }
    set url(v) {
        this.setterImpl(11, v, 'url');
    }
    /**
     *
     *
     * @type {Iban}
     */
    get iban() {
        return this.data[12];
    }
    set iban(v) {
        this.setterImpl(12, v, 'iban');
    }
    /**
     *
     *
     * @type {Bic}
     */
    get bic() {
        return this.data[13];
    }
    set bic(v) {
        this.setterImpl(13, v, 'bic');
    }
    /**
     *
     *
     * @type {DateTime}
     */
    get dateTime() {
        return this.data[14];
    }
    set dateTime(v) {
        this.setterImpl(14, v, 'dateTime');
    }
    /**
     *
     *
     * @type {Date}
     */
    get date() {
        return this.data[15];
    }
    set date(v) {
        this.setterImpl(15, v, 'date');
    }
    /**
     *
     *
     * @type {DateExclusiveEnd}
     */
    get dateExclusiveEnd() {
        return this.data[16];
    }
    set dateExclusiveEnd(v) {
        this.setterImpl(16, v, 'dateExclusiveEnd');
    }
    /**
     *
     *
     * @type {Minutes}
     */
    get minutes() {
        return this.data[17];
    }
    set minutes(v) {
        this.setterImpl(17, v, 'minutes');
    }
    /**
     *
     *
     * @type {Hours}
     */
    get hours() {
        return this.data[18];
    }
    set hours(v) {
        this.setterImpl(18, v, 'hours');
    }
    /**
     *
     *
     * @type {Days}
     */
    get days() {
        return this.data[19];
    }
    set days(v) {
        this.setterImpl(19, v, 'days');
    }
    /**
     *
     *
     * @type {Months}
     */
    get months() {
        return this.data[20];
    }
    set months(v) {
        this.setterImpl(20, v, 'months');
    }
    /**
     *
     *
     * @type {Years}
     */
    get years() {
        return this.data[21];
    }
    set years(v) {
        this.setterImpl(21, v, 'years');
    }
    /**
     *
     *
     * @type {Duration}
     */
    get duration() {
        return this.data[22];
    }
    set duration(v) {
        this.setterImpl(22, v, 'duration');
    }
    /**
     *
     *
     * @type {LocalTime}
     */
    get localTime() {
        return this.data[23];
    }
    set localTime(v) {
        this.setterImpl(23, v, 'localTime');
    }
    /**
     *
     *
     * @type {StoryBookApiCountry}
     */
    get enum() {
        return this.data[24];
    }
    set enum(v) {
        this.setterImpl(24, v, 'enum');
    }
    /**
     *
     *
     * @type {Image}
     */
    get image() {
        const path = this.data[25];
        return path ? Config.API_IMAGE_BASE_URL + path : path;
    }
    set image(v) {
        this.setterImpl(25, v, 'image');
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 26);
            data[1] = true;
            data[2] = 4;
            data[3] = 5;
            data[4] = 5;
            data[5] = 'Text';
            data[6] = '06123456';
            data[7] = 'adam@dr-plano.de';
            data[8] = '!Secret123';
            data[9] = '43255';
            data[10] = 'Text';
            data[11] = 'www.dr-plano.de';
            data[12] = 'DE89 3704 0044 0532 0130 00';
            data[13] = 'NOLADE21STS';
            data[14] = 1604506563086;
            data[15] = 1604444400000;
            data[16] = 1604444400000;
            data[17] = 5;
            data[18] = 5;
            data[19] = 7;
            data[20] = 7;
            data[21] = 2;
            data[22] = 99999;
            data[23] = 3600000;
            data[24] = StoryBookApiCountry.GERMANY;
            data[25] = '';
        }
        // propagate new raw data to children
    }
    get dni() {
        return '2';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '2', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export var StoryBookApiCountry;
(function (StoryBookApiCountry) {
    StoryBookApiCountry[StoryBookApiCountry["GERMANY"] = 1] = "GERMANY";
    StoryBookApiCountry[StoryBookApiCountry["AUSTRIA"] = 2] = "AUSTRIA";
    StoryBookApiCountry[StoryBookApiCountry["SWITZERLAND"] = 3] = "SWITZERLAND";
    StoryBookApiCountry[StoryBookApiCountry["NETHERLANDS"] = 4] = "NETHERLANDS";
    StoryBookApiCountry[StoryBookApiCountry["BELGIUM"] = 5] = "BELGIUM";
    StoryBookApiCountry[StoryBookApiCountry["UNITED_KINGDOM"] = 6] = "UNITED_KINGDOM";
    StoryBookApiCountry[StoryBookApiCountry["CZECH_REPUBLIC"] = 7] = "CZECH_REPUBLIC";
    StoryBookApiCountry[StoryBookApiCountry["SWEDEN"] = 8] = "SWEDEN";
    StoryBookApiCountry[StoryBookApiCountry["LUXEMBOURG"] = 9] = "LUXEMBOURG";
})(StoryBookApiCountry || (StoryBookApiCountry = {}));
export class StoryBookApiIsNull extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, StoryBookApiIsNull);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'isNull',
            id: 'IS_NULL',
        });
        this.attributeInfoBoolean = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'boolean',
            id: 'IS_NULL_BOOLEAN',
            primitiveType: PApiPrimitiveTypes.boolean,
        });
        this.attributeInfoNumber = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'number',
            id: 'IS_NULL_NUMBER',
            primitiveType: PApiPrimitiveTypes.number,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.maxDecimalPlacesCount(0, PApiPrimitiveTypes.number, undefined);
                    },
                ];
            },
        });
        this.attributeInfoInteger = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'integer',
            id: 'IS_NULL_INTEGER',
            primitiveType: PApiPrimitiveTypes.Integer,
        });
        this.attributeInfoCurrency = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'currency',
            id: 'IS_NULL_CURRENCY',
            primitiveType: PApiPrimitiveTypes.Currency,
        });
        this.attributeInfoString = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'string',
            id: 'IS_NULL_STRING',
            primitiveType: PApiPrimitiveTypes.string,
        });
        this.attributeInfoTel = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'tel',
            id: 'IS_NULL_TEL',
            primitiveType: PApiPrimitiveTypes.Tel,
        });
        this.attributeInfoEmail = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'email',
            id: 'IS_NULL_EMAIL',
            primitiveType: PApiPrimitiveTypes.Email,
        });
        this.attributeInfoPassword = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'password',
            id: 'IS_NULL_PASSWORD',
            primitiveType: PApiPrimitiveTypes.Password,
        });
        this.attributeInfoPostalCode = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'postalCode',
            id: 'IS_NULL_POSTAL_CODE',
            primitiveType: PApiPrimitiveTypes.PostalCode,
        });
        this.attributeInfoSearch = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'search',
            id: 'IS_NULL_SEARCH',
            primitiveType: PApiPrimitiveTypes.Search,
        });
        this.attributeInfoUrl = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'url',
            id: 'IS_NULL_URL',
            primitiveType: PApiPrimitiveTypes.Url,
        });
        this.attributeInfoIban = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'iban',
            id: 'IS_NULL_IBAN',
            primitiveType: PApiPrimitiveTypes.Iban,
        });
        this.attributeInfoBic = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'bic',
            id: 'IS_NULL_BIC',
            primitiveType: PApiPrimitiveTypes.Bic,
        });
        this.attributeInfoDateTime = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'dateTime',
            id: 'IS_NULL_DATE_TIME',
            primitiveType: PApiPrimitiveTypes.DateTime,
        });
        this.attributeInfoDate = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'date',
            id: 'IS_NULL_DATE',
            primitiveType: PApiPrimitiveTypes.Date,
        });
        this.attributeInfoDateExclusiveEnd = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'dateExclusiveEnd',
            id: 'IS_NULL_DATE_EXCLUSIVE_END',
            primitiveType: PApiPrimitiveTypes.DateExclusiveEnd,
        });
        this.attributeInfoMinutes = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'minutes',
            id: 'IS_NULL_MINUTES',
            primitiveType: PApiPrimitiveTypes.Minutes,
        });
        this.attributeInfoHours = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'hours',
            id: 'IS_NULL_HOURS',
            primitiveType: PApiPrimitiveTypes.Hours,
        });
        this.attributeInfoDays = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'days',
            id: 'IS_NULL_DAYS',
            primitiveType: PApiPrimitiveTypes.Days,
        });
        this.attributeInfoMonths = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'months',
            id: 'IS_NULL_MONTHS',
            primitiveType: PApiPrimitiveTypes.Months,
        });
        this.attributeInfoYears = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'years',
            id: 'IS_NULL_YEARS',
            primitiveType: PApiPrimitiveTypes.Years,
        });
        this.attributeInfoDuration = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'duration',
            id: 'IS_NULL_DURATION',
            primitiveType: PApiPrimitiveTypes.Duration,
        });
        this.attributeInfoLocalTime = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'localTime',
            id: 'IS_NULL_LOCAL_TIME',
            primitiveType: PApiPrimitiveTypes.LocalTime,
        });
        this.attributeInfoEnum = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'enum',
            id: 'IS_NULL_ENUM',
            primitiveType: PApiPrimitiveTypes.Enum,
        });
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *
     *
     * @type {boolean}
     */
    get boolean() {
        return this.data[1];
    }
    set boolean(v) {
        this.setterImpl(1, v, 'boolean');
    }
    /**
     *
     *
     * @type {number}
     */
    get number() {
        return this.data[2];
    }
    set number(v) {
        this.setterImpl(2, v, 'number');
    }
    /**
     *
     *
     * @type {Integer}
     */
    get integer() {
        return this.data[3];
    }
    set integer(v) {
        this.setterImpl(3, v, 'integer');
    }
    /**
     *
     *
     * @type {Currency}
     */
    get currency() {
        return this.data[4];
    }
    set currency(v) {
        this.setterImpl(4, v, 'currency');
    }
    /**
     *
     *
     * @type {string}
     */
    get string() {
        return this.data[5];
    }
    set string(v) {
        this.setterImpl(5, v, 'string');
    }
    /**
     *
     *
     * @type {Tel}
     */
    get tel() {
        return this.data[6];
    }
    set tel(v) {
        this.setterImpl(6, v, 'tel');
    }
    /**
     *
     *
     * @type {Email}
     */
    get email() {
        return this.data[7];
    }
    set email(v) {
        this.setterImpl(7, v, 'email');
    }
    /**
     *
     *
     * @type {Password}
     */
    get password() {
        return this.data[8];
    }
    set password(v) {
        this.setterImpl(8, v, 'password');
    }
    /**
     *
     *
     * @type {PostalCode}
     */
    get postalCode() {
        return this.data[9];
    }
    set postalCode(v) {
        this.setterImpl(9, v, 'postalCode');
    }
    /**
     *
     *
     * @type {Search}
     */
    get search() {
        return this.data[10];
    }
    set search(v) {
        this.setterImpl(10, v, 'search');
    }
    /**
     *
     *
     * @type {Url}
     */
    get url() {
        return this.data[11];
    }
    set url(v) {
        this.setterImpl(11, v, 'url');
    }
    /**
     *
     *
     * @type {Iban}
     */
    get iban() {
        return this.data[12];
    }
    set iban(v) {
        this.setterImpl(12, v, 'iban');
    }
    /**
     *
     *
     * @type {Bic}
     */
    get bic() {
        return this.data[13];
    }
    set bic(v) {
        this.setterImpl(13, v, 'bic');
    }
    /**
     *
     *
     * @type {DateTime}
     */
    get dateTime() {
        return this.data[14];
    }
    set dateTime(v) {
        this.setterImpl(14, v, 'dateTime');
    }
    /**
     *
     *
     * @type {Date}
     */
    get date() {
        return this.data[15];
    }
    set date(v) {
        this.setterImpl(15, v, 'date');
    }
    /**
     *
     *
     * @type {DateExclusiveEnd}
     */
    get dateExclusiveEnd() {
        return this.data[16];
    }
    set dateExclusiveEnd(v) {
        this.setterImpl(16, v, 'dateExclusiveEnd');
    }
    /**
     *
     *
     * @type {Minutes}
     */
    get minutes() {
        return this.data[17];
    }
    set minutes(v) {
        this.setterImpl(17, v, 'minutes');
    }
    /**
     *
     *
     * @type {Hours}
     */
    get hours() {
        return this.data[18];
    }
    set hours(v) {
        this.setterImpl(18, v, 'hours');
    }
    /**
     *
     *
     * @type {Days}
     */
    get days() {
        return this.data[19];
    }
    set days(v) {
        this.setterImpl(19, v, 'days');
    }
    /**
     *
     *
     * @type {Months}
     */
    get months() {
        return this.data[20];
    }
    set months(v) {
        this.setterImpl(20, v, 'months');
    }
    /**
     *
     *
     * @type {Years}
     */
    get years() {
        return this.data[21];
    }
    set years(v) {
        this.setterImpl(21, v, 'years');
    }
    /**
     *
     *
     * @type {Duration}
     */
    get duration() {
        return this.data[22];
    }
    set duration(v) {
        this.setterImpl(22, v, 'duration');
    }
    /**
     *
     *
     * @type {LocalTime}
     */
    get localTime() {
        return this.data[23];
    }
    set localTime(v) {
        this.setterImpl(23, v, 'localTime');
    }
    /**
     *
     *
     * @type {StoryBookApiCountry}
     */
    get enum() {
        return this.data[24];
    }
    set enum(v) {
        this.setterImpl(24, v, 'enum');
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 25);
        }
        // propagate new raw data to children
    }
    get dni() {
        return '3';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '3', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class StoryBookApiValidations extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, StoryBookApiValidations);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'validations',
            id: 'VALIDATIONS',
        });
        this.telWrapper = new StoryBookApiValidationsTel(this.api);
        this.emailWrapper = new StoryBookApiValidationsEmail(this.api);
        this.passwordWrapper = new StoryBookApiValidationsPassword(this.api);
        this.postalCodeWrapper = new StoryBookApiValidationsPostalCode(this.api);
        this.urlWrapper = new StoryBookApiValidationsUrl(this.api);
        this.ibanWrapper = new StoryBookApiValidationsIban(this.api);
        this.bicWrapper = new StoryBookApiValidationsBic(this.api);
        this.currencyWrapper = new StoryBookApiValidationsCurrency(this.api);
        this.integerWrapper = new StoryBookApiValidationsInteger(this.api);
        this.requiredWrapper = new StoryBookApiValidationsRequired(this.api);
        this.minWrapper = new StoryBookApiValidationsMin(this.api);
        this.maxWrapper = new StoryBookApiValidationsMax(this.api);
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
        this.telWrapper.parent = this;
        this.emailWrapper.parent = this;
        this.passwordWrapper.parent = this;
        this.postalCodeWrapper.parent = this;
        this.urlWrapper.parent = this;
        this.ibanWrapper.parent = this;
        this.bicWrapper.parent = this;
        this.currencyWrapper.parent = this;
        this.integerWrapper.parent = this;
        this.requiredWrapper.parent = this;
        this.minWrapper.parent = this;
        this.maxWrapper.parent = this;
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *
     */
    get tel() {
        return this.telWrapper;
    }
    set telTestSetter(v) {
        this.setterImpl(1, v.rawData, 'tel', () => { this.telWrapper = v; });
    }
    /**
     *
     */
    get email() {
        return this.emailWrapper;
    }
    set emailTestSetter(v) {
        this.setterImpl(2, v.rawData, 'email', () => { this.emailWrapper = v; });
    }
    /**
     *
     */
    get password() {
        return this.passwordWrapper;
    }
    set passwordTestSetter(v) {
        this.setterImpl(3, v.rawData, 'password', () => { this.passwordWrapper = v; });
    }
    /**
     *
     */
    get postalCode() {
        return this.postalCodeWrapper;
    }
    set postalCodeTestSetter(v) {
        this.setterImpl(4, v.rawData, 'postalCode', () => { this.postalCodeWrapper = v; });
    }
    /**
     *
     */
    get url() {
        return this.urlWrapper;
    }
    set urlTestSetter(v) {
        this.setterImpl(5, v.rawData, 'url', () => { this.urlWrapper = v; });
    }
    /**
     *
     */
    get iban() {
        return this.ibanWrapper;
    }
    set ibanTestSetter(v) {
        this.setterImpl(6, v.rawData, 'iban', () => { this.ibanWrapper = v; });
    }
    /**
     *
     */
    get bic() {
        return this.bicWrapper;
    }
    set bicTestSetter(v) {
        this.setterImpl(7, v.rawData, 'bic', () => { this.bicWrapper = v; });
    }
    /**
     *
     */
    get currency() {
        return this.currencyWrapper;
    }
    set currencyTestSetter(v) {
        this.setterImpl(8, v.rawData, 'currency', () => { this.currencyWrapper = v; });
    }
    /**
     *
     */
    get integer() {
        return this.integerWrapper;
    }
    set integerTestSetter(v) {
        this.setterImpl(9, v.rawData, 'integer', () => { this.integerWrapper = v; });
    }
    /**
     *
     */
    get required() {
        return this.requiredWrapper;
    }
    set requiredTestSetter(v) {
        this.setterImpl(10, v.rawData, 'required', () => { this.requiredWrapper = v; });
    }
    /**
     *
     */
    get min() {
        return this.minWrapper;
    }
    set minTestSetter(v) {
        this.setterImpl(11, v.rawData, 'min', () => { this.minWrapper = v; });
    }
    /**
     *
     */
    get max() {
        return this.maxWrapper;
    }
    set maxTestSetter(v) {
        this.setterImpl(12, v.rawData, 'max', () => { this.maxWrapper = v; });
    }
    _fixIds(_idReplacements) {
        this.telWrapper._fixIds(_idReplacements);
        this.emailWrapper._fixIds(_idReplacements);
        this.passwordWrapper._fixIds(_idReplacements);
        this.postalCodeWrapper._fixIds(_idReplacements);
        this.urlWrapper._fixIds(_idReplacements);
        this.ibanWrapper._fixIds(_idReplacements);
        this.bicWrapper._fixIds(_idReplacements);
        this.currencyWrapper._fixIds(_idReplacements);
        this.integerWrapper._fixIds(_idReplacements);
        this.requiredWrapper._fixIds(_idReplacements);
        this.minWrapper._fixIds(_idReplacements);
        this.maxWrapper._fixIds(_idReplacements);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 13);
            if (data[1] === null)
                data[1] = Meta.createNewObject(false);
            if (data[2] === null)
                data[2] = Meta.createNewObject(false);
            if (data[3] === null)
                data[3] = Meta.createNewObject(false);
            if (data[4] === null)
                data[4] = Meta.createNewObject(false);
            if (data[5] === null)
                data[5] = Meta.createNewObject(false);
            if (data[6] === null)
                data[6] = Meta.createNewObject(false);
            if (data[7] === null)
                data[7] = Meta.createNewObject(false);
            if (data[8] === null)
                data[8] = Meta.createNewObject(false);
            if (data[9] === null)
                data[9] = Meta.createNewObject(false);
            if (data[10] === null)
                data[10] = Meta.createNewObject(false);
            if (data[11] === null)
                data[11] = Meta.createNewObject(false);
            if (data[12] === null)
                data[12] = Meta.createNewObject(false);
        }
        // propagate new raw data to children
        this.telWrapper._updateRawData(data ? data[1] : null, generateMissingData);
        this.emailWrapper._updateRawData(data ? data[2] : null, generateMissingData);
        this.passwordWrapper._updateRawData(data ? data[3] : null, generateMissingData);
        this.postalCodeWrapper._updateRawData(data ? data[4] : null, generateMissingData);
        this.urlWrapper._updateRawData(data ? data[5] : null, generateMissingData);
        this.ibanWrapper._updateRawData(data ? data[6] : null, generateMissingData);
        this.bicWrapper._updateRawData(data ? data[7] : null, generateMissingData);
        this.currencyWrapper._updateRawData(data ? data[8] : null, generateMissingData);
        this.integerWrapper._updateRawData(data ? data[9] : null, generateMissingData);
        this.requiredWrapper._updateRawData(data ? data[10] : null, generateMissingData);
        this.minWrapper._updateRawData(data ? data[11] : null, generateMissingData);
        this.maxWrapper._updateRawData(data ? data[12] : null, generateMissingData);
    }
    get dni() {
        return '4';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '4', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class StoryBookApiValidationsTel extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, StoryBookApiValidationsTel);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'tel',
            id: 'VALIDATIONS_TEL',
        });
        this.failsWrapper = new StoryBookApiValidationsTelFails(this.api);
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
        this.failsWrapper.parent = this;
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *
     */
    get fails() {
        return this.failsWrapper;
    }
    set failsTestSetter(v) {
        this.setterImpl(1, v.rawData, 'fails', () => { this.failsWrapper = v; });
    }
    _fixIds(_idReplacements) {
        this.failsWrapper._fixIds(_idReplacements);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 2);
            if (data[1] === null)
                data[1] = Meta.createNewObject(false);
        }
        // propagate new raw data to children
        this.failsWrapper._updateRawData(data ? data[1] : null, generateMissingData);
    }
    get dni() {
        return '54';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '54', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class StoryBookApiValidationsTelFails extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, StoryBookApiValidationsTelFails);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'fails',
            id: 'VALIDATIONS_TEL_FAILS',
        });
        this.attributeInfoBadValue = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'badValue',
            id: 'VALIDATIONS_TEL_FAILS_BAD_VALUE',
            primitiveType: PApiPrimitiveTypes.Tel,
            vars: {
                expectedValidationError: 'Unzulässiges Zeichen eingegeben. Richtiges Beispiel: »+49 123 0000000«.',
            }
        });
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *
     *
     * @type {Tel}
     */
    get badValue() {
        return this.data[1];
    }
    set badValue(v) {
        this.setterImpl(1, v, 'badValue');
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 2);
            data[1] = 'asd';
        }
        // propagate new raw data to children
    }
    get dni() {
        return '66';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '66', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class StoryBookApiValidationsEmail extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, StoryBookApiValidationsEmail);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'email',
            id: 'VALIDATIONS_EMAIL',
        });
        this.failsWrapper = new StoryBookApiValidationsEmailFails(this.api);
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
        this.failsWrapper.parent = this;
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *
     */
    get fails() {
        return this.failsWrapper;
    }
    set failsTestSetter(v) {
        this.setterImpl(1, v.rawData, 'fails', () => { this.failsWrapper = v; });
    }
    _fixIds(_idReplacements) {
        this.failsWrapper._fixIds(_idReplacements);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 2);
            if (data[1] === null)
                data[1] = Meta.createNewObject(false);
        }
        // propagate new raw data to children
        this.failsWrapper._updateRawData(data ? data[1] : null, generateMissingData);
    }
    get dni() {
        return '55';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '55', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class StoryBookApiValidationsEmailFails extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, StoryBookApiValidationsEmailFails);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'fails',
            id: 'VALIDATIONS_EMAIL_FAILS',
        });
        this.attributeInfoNoAt = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'noAt',
            id: 'VALIDATIONS_EMAIL_FAILS_NO_AT',
            primitiveType: PApiPrimitiveTypes.Email,
            vars: {
                expectedValidationError: 'Es fehlt das »@« Zeichen.',
            }
        });
        this.attributeInfoBadValue = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'badValue',
            id: 'VALIDATIONS_EMAIL_FAILS_BAD_VALUE',
            primitiveType: PApiPrimitiveTypes.Email,
            vars: {
                expectedValidationError: 'Falsches Format eingegeben.',
            }
        });
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *
     *
     * @type {Email}
     */
    get noAt() {
        return this.data[1];
    }
    set noAt(v) {
        this.setterImpl(1, v, 'noAt');
    }
    /**
     *
     *
     * @type {Email}
     */
    get badValue() {
        return this.data[2];
    }
    set badValue(v) {
        this.setterImpl(2, v, 'badValue');
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 3);
            data[1] = 'at-is-missing';
            data[2] = 'foo@bar#';
        }
        // propagate new raw data to children
    }
    get dni() {
        return '68';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '68', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class StoryBookApiValidationsPassword extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, StoryBookApiValidationsPassword);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'password',
            id: 'VALIDATIONS_PASSWORD',
        });
        this.failsWrapper = new StoryBookApiValidationsPasswordFails(this.api);
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
        this.failsWrapper.parent = this;
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *
     */
    get fails() {
        return this.failsWrapper;
    }
    set failsTestSetter(v) {
        this.setterImpl(1, v.rawData, 'fails', () => { this.failsWrapper = v; });
    }
    _fixIds(_idReplacements) {
        this.failsWrapper._fixIds(_idReplacements);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 2);
            if (data[1] === null)
                data[1] = Meta.createNewObject(false);
        }
        // propagate new raw data to children
        this.failsWrapper._updateRawData(data ? data[1] : null, generateMissingData);
    }
    get dni() {
        return '56';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '56', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class StoryBookApiValidationsPasswordFails extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, StoryBookApiValidationsPasswordFails);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'fails',
            id: 'VALIDATIONS_PASSWORD_FAILS',
        });
        this.attributeInfoTooShort = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'tooShort',
            id: 'VALIDATIONS_PASSWORD_FAILS_TOO_SHORT',
            primitiveType: PApiPrimitiveTypes.Password,
            vars: {
                expectedValidationError: 'Bitte mindestens 7 Zeichen eingeben. 4 ist zu wenig.',
            }
        });
        this.attributeInfoNeedsDigits = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'needsDigits',
            id: 'VALIDATIONS_PASSWORD_FAILS_NEEDS_DIGITS',
            primitiveType: PApiPrimitiveTypes.Password,
            vars: {
                expectedValidationError: 'Das Passwort muss Zahlen enthalten.',
            }
        });
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *
     *
     * @type {Password}
     */
    get tooShort() {
        return this.data[1];
    }
    set tooShort(v) {
        this.setterImpl(1, v, 'tooShort');
    }
    /**
     *
     *
     * @type {Password}
     */
    get needsDigits() {
        return this.data[2];
    }
    set needsDigits(v) {
        this.setterImpl(2, v, 'needsDigits');
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 3);
            data[1] = 'asd6';
            data[2] = 'asdefgh';
        }
        // propagate new raw data to children
    }
    get dni() {
        return '71';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '71', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class StoryBookApiValidationsPostalCode extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, StoryBookApiValidationsPostalCode);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'postalCode',
            id: 'VALIDATIONS_POSTAL_CODE',
        });
        this.failsWrapper = new StoryBookApiValidationsPostalCodeFails(this.api);
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
        this.failsWrapper.parent = this;
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *
     */
    get fails() {
        return this.failsWrapper;
    }
    set failsTestSetter(v) {
        this.setterImpl(1, v.rawData, 'fails', () => { this.failsWrapper = v; });
    }
    _fixIds(_idReplacements) {
        this.failsWrapper._fixIds(_idReplacements);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 2);
            if (data[1] === null)
                data[1] = Meta.createNewObject(false);
        }
        // propagate new raw data to children
        this.failsWrapper._updateRawData(data ? data[1] : null, generateMissingData);
    }
    get dni() {
        return '57';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '57', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class StoryBookApiValidationsPostalCodeFails extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, StoryBookApiValidationsPostalCodeFails);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'fails',
            id: 'VALIDATIONS_POSTAL_CODE_FAILS',
        });
        this.attributeInfoTooLong = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'tooLong',
            id: 'VALIDATIONS_POSTAL_CODE_FAILS_TOO_LONG',
            primitiveType: PApiPrimitiveTypes.PostalCode,
            vars: {
                expectedValidationError: 'Bitte maximal 8 Zeichen eingeben. 10 ist zu viel.',
            }
        });
        this.attributeInfoTooShort = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'tooShort',
            id: 'VALIDATIONS_POSTAL_CODE_FAILS_TOO_SHORT',
            primitiveType: PApiPrimitiveTypes.PostalCode,
            vars: {
                expectedValidationError: 'Bitte mindestens 4 Zeichen eingeben. 2 ist zu wenig.',
            }
        });
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *
     *
     * @type {PostalCode}
     */
    get tooLong() {
        return this.data[1];
    }
    set tooLong(v) {
        this.setterImpl(1, v, 'tooLong');
    }
    /**
     *
     *
     * @type {PostalCode}
     */
    get tooShort() {
        return this.data[2];
    }
    set tooShort(v) {
        this.setterImpl(2, v, 'tooShort');
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 3);
            data[1] = '5555555555';
            data[2] = '33';
        }
        // propagate new raw data to children
    }
    get dni() {
        return '74';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '74', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class StoryBookApiValidationsUrl extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, StoryBookApiValidationsUrl);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'url',
            id: 'VALIDATIONS_URL',
        });
        this.failsWrapper = new StoryBookApiValidationsUrlFails(this.api);
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
        this.failsWrapper.parent = this;
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *
     */
    get fails() {
        return this.failsWrapper;
    }
    set failsTestSetter(v) {
        this.setterImpl(1, v.rawData, 'fails', () => { this.failsWrapper = v; });
    }
    _fixIds(_idReplacements) {
        this.failsWrapper._fixIds(_idReplacements);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 2);
            if (data[1] === null)
                data[1] = Meta.createNewObject(false);
        }
        // propagate new raw data to children
        this.failsWrapper._updateRawData(data ? data[1] : null, generateMissingData);
    }
    get dni() {
        return '58';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '58', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class StoryBookApiValidationsUrlFails extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, StoryBookApiValidationsUrlFails);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'fails',
            id: 'VALIDATIONS_URL_FAILS',
        });
        this.attributeInfoProtocolMissing = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'protocolMissing',
            id: 'VALIDATIONS_URL_FAILS_PROTOCOL_MISSING',
            primitiveType: PApiPrimitiveTypes.Url,
            vars: {
                expectedValidationError: 'Bitte mit »http://« oder »https://« beginnen.',
            }
        });
        this.attributeInfoWww = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'www',
            id: 'VALIDATIONS_URL_FAILS_WWW',
            primitiveType: PApiPrimitiveTypes.Url,
            vars: {
                expectedValidationError: 'Falsches Format eingegeben.',
            }
        });
        this.attributeInfoBadValue = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'badValue',
            id: 'VALIDATIONS_URL_FAILS_BAD_VALUE',
            primitiveType: PApiPrimitiveTypes.Url,
            vars: {
                expectedValidationError: 'Falsches Format eingegeben.',
            }
        });
        this.attributeInfoWhitespace = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'whitespace',
            id: 'VALIDATIONS_URL_FAILS_WHITESPACE',
            primitiveType: PApiPrimitiveTypes.Url,
            vars: {
                expectedValidationError: 'Bitte keine Leerzeichen eingeben.',
            }
        });
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *
     *
     * @type {Url}
     */
    get protocolMissing() {
        return this.data[1];
    }
    set protocolMissing(v) {
        this.setterImpl(1, v, 'protocolMissing');
    }
    /**
     *
     *
     * @type {Url}
     */
    get www() {
        return this.data[2];
    }
    set www(v) {
        this.setterImpl(2, v, 'www');
    }
    /**
     *
     *
     * @type {Url}
     */
    get badValue() {
        return this.data[3];
    }
    set badValue(v) {
        this.setterImpl(3, v, 'badValue');
    }
    /**
     *
     *
     * @type {Url}
     */
    get whitespace() {
        return this.data[4];
    }
    set whitespace(v) {
        this.setterImpl(4, v, 'whitespace');
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 5);
            data[1] = 'asd';
            data[2] = 'www.dr-plano.com';
            data[3] = 'https://abc';
            data[4] = 'https://dr-plano.com/foo bar/lorem';
        }
        // propagate new raw data to children
    }
    get dni() {
        return '77';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '77', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class StoryBookApiValidationsIban extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, StoryBookApiValidationsIban);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'iban',
            id: 'VALIDATIONS_IBAN',
        });
        this.failsWrapper = new StoryBookApiValidationsIbanFails(this.api);
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
        this.failsWrapper.parent = this;
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *
     */
    get fails() {
        return this.failsWrapper;
    }
    set failsTestSetter(v) {
        this.setterImpl(1, v.rawData, 'fails', () => { this.failsWrapper = v; });
    }
    _fixIds(_idReplacements) {
        this.failsWrapper._fixIds(_idReplacements);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 2);
            if (data[1] === null)
                data[1] = Meta.createNewObject(false);
        }
        // propagate new raw data to children
        this.failsWrapper._updateRawData(data ? data[1] : null, generateMissingData);
    }
    get dni() {
        return '59';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '59', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class StoryBookApiValidationsIbanFails extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, StoryBookApiValidationsIbanFails);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'fails',
            id: 'VALIDATIONS_IBAN_FAILS',
        });
        this.attributeInfoBadValue = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'badValue',
            id: 'VALIDATIONS_IBAN_FAILS_BAD_VALUE',
            primitiveType: PApiPrimitiveTypes.Iban,
            vars: {
                expectedValidationError: 'Falsches Format eingegeben.',
            }
        });
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *
     *
     * @type {Iban}
     */
    get badValue() {
        return this.data[1];
    }
    set badValue(v) {
        this.setterImpl(1, v, 'badValue');
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 2);
            data[1] = 'asd';
        }
        // propagate new raw data to children
    }
    get dni() {
        return '82';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '82', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class StoryBookApiValidationsBic extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, StoryBookApiValidationsBic);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'bic',
            id: 'VALIDATIONS_BIC',
        });
        this.failsWrapper = new StoryBookApiValidationsBicFails(this.api);
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
        this.failsWrapper.parent = this;
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *
     */
    get fails() {
        return this.failsWrapper;
    }
    set failsTestSetter(v) {
        this.setterImpl(1, v.rawData, 'fails', () => { this.failsWrapper = v; });
    }
    _fixIds(_idReplacements) {
        this.failsWrapper._fixIds(_idReplacements);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 2);
            if (data[1] === null)
                data[1] = Meta.createNewObject(false);
        }
        // propagate new raw data to children
        this.failsWrapper._updateRawData(data ? data[1] : null, generateMissingData);
    }
    get dni() {
        return '60';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '60', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class StoryBookApiValidationsBicFails extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, StoryBookApiValidationsBicFails);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'fails',
            id: 'VALIDATIONS_BIC_FAILS',
        });
        this.attributeInfoBadValue = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'badValue',
            id: 'VALIDATIONS_BIC_FAILS_BAD_VALUE',
            primitiveType: PApiPrimitiveTypes.Bic,
            vars: {
                expectedValidationError: 'Falsches Format eingegeben.',
            }
        });
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *
     *
     * @type {Bic}
     */
    get badValue() {
        return this.data[1];
    }
    set badValue(v) {
        this.setterImpl(1, v, 'badValue');
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 2);
            data[1] = 'asd';
        }
        // propagate new raw data to children
    }
    get dni() {
        return '84';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '84', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class StoryBookApiValidationsCurrency extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, StoryBookApiValidationsCurrency);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'currency',
            id: 'VALIDATIONS_CURRENCY',
        });
        this.failsWrapper = new StoryBookApiValidationsCurrencyFails(this.api);
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
        this.failsWrapper.parent = this;
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *
     */
    get fails() {
        return this.failsWrapper;
    }
    set failsTestSetter(v) {
        this.setterImpl(1, v.rawData, 'fails', () => { this.failsWrapper = v; });
    }
    _fixIds(_idReplacements) {
        this.failsWrapper._fixIds(_idReplacements);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 2);
            if (data[1] === null)
                data[1] = Meta.createNewObject(false);
        }
        // propagate new raw data to children
        this.failsWrapper._updateRawData(data ? data[1] : null, generateMissingData);
    }
    get dni() {
        return '61';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '61', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class StoryBookApiValidationsCurrencyFails extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, StoryBookApiValidationsCurrencyFails);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'fails',
            id: 'VALIDATIONS_CURRENCY_FAILS',
        });
        this.attributeInfoTooManyDigits = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'tooManyDigits',
            id: 'VALIDATIONS_CURRENCY_FAILS_TOO_MANY_DIGITS',
            primitiveType: PApiPrimitiveTypes.Currency,
            vars: {
                expectedValidationError: 'Bitte höchstens 2 Nachkommastellen eintragen.',
            }
        });
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *
     *
     * @type {Currency}
     */
    get tooManyDigits() {
        return this.data[1];
    }
    set tooManyDigits(v) {
        this.setterImpl(1, v, 'tooManyDigits');
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 2);
            data[1] = 5.234;
        }
        // propagate new raw data to children
    }
    get dni() {
        return '86';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '86', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class StoryBookApiValidationsInteger extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, StoryBookApiValidationsInteger);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'integer',
            id: 'VALIDATIONS_INTEGER',
        });
        this.failsWrapper = new StoryBookApiValidationsIntegerFails(this.api);
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
        this.failsWrapper.parent = this;
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *
     */
    get fails() {
        return this.failsWrapper;
    }
    set failsTestSetter(v) {
        this.setterImpl(1, v.rawData, 'fails', () => { this.failsWrapper = v; });
    }
    _fixIds(_idReplacements) {
        this.failsWrapper._fixIds(_idReplacements);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 2);
            if (data[1] === null)
                data[1] = Meta.createNewObject(false);
        }
        // propagate new raw data to children
        this.failsWrapper._updateRawData(data ? data[1] : null, generateMissingData);
    }
    get dni() {
        return '62';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '62', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class StoryBookApiValidationsIntegerFails extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, StoryBookApiValidationsIntegerFails);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'fails',
            id: 'VALIDATIONS_INTEGER_FAILS',
        });
        this.attributeInfoBadValueHours = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'badValueHours',
            id: 'VALIDATIONS_INTEGER_FAILS_BAD_VALUE_HOURS',
            primitiveType: PApiPrimitiveTypes.Hours,
            vars: {
                expectedValidationError: 'Bitte nur ganze Zahlen eingeben, z.B. »10«.',
            }
        });
        this.attributeInfoBadValueInteger = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'badValueInteger',
            id: 'VALIDATIONS_INTEGER_FAILS_BAD_VALUE_INTEGER',
            primitiveType: PApiPrimitiveTypes.Integer,
            vars: {
                expectedValidationError: 'Bitte nur ganze Zahlen eingeben, z.B. »10«.',
            }
        });
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *
     *
     * @type {Hours}
     */
    get badValueHours() {
        return this.data[1];
    }
    set badValueHours(v) {
        this.setterImpl(1, v, 'badValueHours');
    }
    /**
     *
     *
     * @type {Integer}
     */
    get badValueInteger() {
        return this.data[2];
    }
    set badValueInteger(v) {
        this.setterImpl(2, v, 'badValueInteger');
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 3);
            data[1] = 5.2;
            data[2] = 5.5;
        }
        // propagate new raw data to children
    }
    get dni() {
        return '88';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '88', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class StoryBookApiValidationsRequired extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, StoryBookApiValidationsRequired);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'required',
            id: 'VALIDATIONS_REQUIRED',
        });
        this.validWrapper = new StoryBookApiValidationsRequiredValid(this.api);
        this.failsWrapper = new StoryBookApiValidationsRequiredFails(this.api);
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
        this.validWrapper.parent = this;
        this.failsWrapper.parent = this;
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *
     */
    get valid() {
        return this.validWrapper;
    }
    set validTestSetter(v) {
        this.setterImpl(1, v.rawData, 'valid', () => { this.validWrapper = v; });
    }
    /**
     *
     */
    get fails() {
        return this.failsWrapper;
    }
    set failsTestSetter(v) {
        this.setterImpl(2, v.rawData, 'fails', () => { this.failsWrapper = v; });
    }
    _fixIds(_idReplacements) {
        this.validWrapper._fixIds(_idReplacements);
        this.failsWrapper._fixIds(_idReplacements);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 3);
            if (data[1] === null)
                data[1] = Meta.createNewObject(false);
            if (data[2] === null)
                data[2] = Meta.createNewObject(false);
        }
        // propagate new raw data to children
        this.validWrapper._updateRawData(data ? data[1] : null, generateMissingData);
        this.failsWrapper._updateRawData(data ? data[2] : null, generateMissingData);
    }
    get dni() {
        return '63';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '63', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class StoryBookApiValidationsRequiredValid extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, StoryBookApiValidationsRequiredValid);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'valid',
            id: 'VALIDATIONS_REQUIRED_VALID',
        });
        this.attributeInfoNumber = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'number',
            id: 'VALIDATIONS_REQUIRED_VALID_NUMBER',
            primitiveType: PApiPrimitiveTypes.number,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.number, undefined);
                        return null;
                    },
                    () => {
                        return this.api.validators.maxDecimalPlacesCount(1, PApiPrimitiveTypes.number, undefined);
                    },
                ];
            },
        });
        this.attributeInfoInteger = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'integer',
            id: 'VALIDATIONS_REQUIRED_VALID_INTEGER',
            primitiveType: PApiPrimitiveTypes.Integer,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Integer, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoCurrency = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'currency',
            id: 'VALIDATIONS_REQUIRED_VALID_CURRENCY',
            primitiveType: PApiPrimitiveTypes.Currency,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Currency, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoString = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'string',
            id: 'VALIDATIONS_REQUIRED_VALID_STRING',
            primitiveType: PApiPrimitiveTypes.string,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.string, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoTel = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'tel',
            id: 'VALIDATIONS_REQUIRED_VALID_TEL',
            primitiveType: PApiPrimitiveTypes.Tel,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Tel, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoEmail = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'email',
            id: 'VALIDATIONS_REQUIRED_VALID_EMAIL',
            primitiveType: PApiPrimitiveTypes.Email,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Email, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoPassword = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'password',
            id: 'VALIDATIONS_REQUIRED_VALID_PASSWORD',
            primitiveType: PApiPrimitiveTypes.Password,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Password, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoPostalCode = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'postalCode',
            id: 'VALIDATIONS_REQUIRED_VALID_POSTAL_CODE',
            primitiveType: PApiPrimitiveTypes.PostalCode,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.PostalCode, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoSearch = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'search',
            id: 'VALIDATIONS_REQUIRED_VALID_SEARCH',
            primitiveType: PApiPrimitiveTypes.Search,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Search, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoUrl = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'url',
            id: 'VALIDATIONS_REQUIRED_VALID_URL',
            primitiveType: PApiPrimitiveTypes.Url,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Url, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoIban = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'iban',
            id: 'VALIDATIONS_REQUIRED_VALID_IBAN',
            primitiveType: PApiPrimitiveTypes.Iban,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Iban, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoBic = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'bic',
            id: 'VALIDATIONS_REQUIRED_VALID_BIC',
            primitiveType: PApiPrimitiveTypes.Bic,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Bic, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoDateTime = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'dateTime',
            id: 'VALIDATIONS_REQUIRED_VALID_DATE_TIME',
            primitiveType: PApiPrimitiveTypes.DateTime,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.DateTime, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoDate = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'date',
            id: 'VALIDATIONS_REQUIRED_VALID_DATE',
            primitiveType: PApiPrimitiveTypes.Date,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Date, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoDateExclusiveEnd = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'dateExclusiveEnd',
            id: 'VALIDATIONS_REQUIRED_VALID_DATE_EXCLUSIVE_END',
            primitiveType: PApiPrimitiveTypes.DateExclusiveEnd,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.DateExclusiveEnd, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoMinutes = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'minutes',
            id: 'VALIDATIONS_REQUIRED_VALID_MINUTES',
            primitiveType: PApiPrimitiveTypes.Minutes,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Minutes, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoHours = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'hours',
            id: 'VALIDATIONS_REQUIRED_VALID_HOURS',
            primitiveType: PApiPrimitiveTypes.Hours,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Hours, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoDays = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'days',
            id: 'VALIDATIONS_REQUIRED_VALID_DAYS',
            primitiveType: PApiPrimitiveTypes.Days,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Days, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoMonths = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'months',
            id: 'VALIDATIONS_REQUIRED_VALID_MONTHS',
            primitiveType: PApiPrimitiveTypes.Months,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Months, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoYears = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'years',
            id: 'VALIDATIONS_REQUIRED_VALID_YEARS',
            primitiveType: PApiPrimitiveTypes.Years,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Years, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoDuration = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'duration',
            id: 'VALIDATIONS_REQUIRED_VALID_DURATION',
            primitiveType: PApiPrimitiveTypes.Duration,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Duration, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoLocalTime = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'localTime',
            id: 'VALIDATIONS_REQUIRED_VALID_LOCAL_TIME',
            primitiveType: PApiPrimitiveTypes.LocalTime,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.LocalTime, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoEnum = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'enum',
            id: 'VALIDATIONS_REQUIRED_VALID_ENUM',
            primitiveType: PApiPrimitiveTypes.Enum,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Enum, undefined);
                        return null;
                    },
                ];
            },
        });
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *
     *
     * @type {number}
     */
    get number() {
        return this.data[1];
    }
    set number(v) {
        this.setterImpl(1, v, 'number');
    }
    /**
     *
     *
     * @type {Integer}
     */
    get integer() {
        return this.data[2];
    }
    set integer(v) {
        this.setterImpl(2, v, 'integer');
    }
    /**
     *
     *
     * @type {Currency}
     */
    get currency() {
        return this.data[3];
    }
    set currency(v) {
        this.setterImpl(3, v, 'currency');
    }
    /**
     *
     *
     * @type {string}
     */
    get string() {
        return this.data[4];
    }
    set string(v) {
        this.setterImpl(4, v, 'string');
    }
    /**
     *
     *
     * @type {Tel}
     */
    get tel() {
        return this.data[5];
    }
    set tel(v) {
        this.setterImpl(5, v, 'tel');
    }
    /**
     *
     *
     * @type {Email}
     */
    get email() {
        return this.data[6];
    }
    set email(v) {
        this.setterImpl(6, v, 'email');
    }
    /**
     *
     *
     * @type {Password}
     */
    get password() {
        return this.data[7];
    }
    set password(v) {
        this.setterImpl(7, v, 'password');
    }
    /**
     *
     *
     * @type {PostalCode}
     */
    get postalCode() {
        return this.data[8];
    }
    set postalCode(v) {
        this.setterImpl(8, v, 'postalCode');
    }
    /**
     *
     *
     * @type {Search}
     */
    get search() {
        return this.data[9];
    }
    set search(v) {
        this.setterImpl(9, v, 'search');
    }
    /**
     *
     *
     * @type {Url}
     */
    get url() {
        return this.data[10];
    }
    set url(v) {
        this.setterImpl(10, v, 'url');
    }
    /**
     *
     *
     * @type {Iban}
     */
    get iban() {
        return this.data[11];
    }
    set iban(v) {
        this.setterImpl(11, v, 'iban');
    }
    /**
     *
     *
     * @type {Bic}
     */
    get bic() {
        return this.data[12];
    }
    set bic(v) {
        this.setterImpl(12, v, 'bic');
    }
    /**
     *
     *
     * @type {DateTime}
     */
    get dateTime() {
        return this.data[13];
    }
    set dateTime(v) {
        this.setterImpl(13, v, 'dateTime');
    }
    /**
     *
     *
     * @type {Date}
     */
    get date() {
        return this.data[14];
    }
    set date(v) {
        this.setterImpl(14, v, 'date');
    }
    /**
     *
     *
     * @type {DateExclusiveEnd}
     */
    get dateExclusiveEnd() {
        return this.data[15];
    }
    set dateExclusiveEnd(v) {
        this.setterImpl(15, v, 'dateExclusiveEnd');
    }
    /**
     *
     *
     * @type {Minutes}
     */
    get minutes() {
        return this.data[16];
    }
    set minutes(v) {
        this.setterImpl(16, v, 'minutes');
    }
    /**
     *
     *
     * @type {Hours}
     */
    get hours() {
        return this.data[17];
    }
    set hours(v) {
        this.setterImpl(17, v, 'hours');
    }
    /**
     *
     *
     * @type {Days}
     */
    get days() {
        return this.data[18];
    }
    set days(v) {
        this.setterImpl(18, v, 'days');
    }
    /**
     *
     *
     * @type {Months}
     */
    get months() {
        return this.data[19];
    }
    set months(v) {
        this.setterImpl(19, v, 'months');
    }
    /**
     *
     *
     * @type {Years}
     */
    get years() {
        return this.data[20];
    }
    set years(v) {
        this.setterImpl(20, v, 'years');
    }
    /**
     *
     *
     * @type {Duration}
     */
    get duration() {
        return this.data[21];
    }
    set duration(v) {
        this.setterImpl(21, v, 'duration');
    }
    /**
     *
     *
     * @type {LocalTime}
     */
    get localTime() {
        return this.data[22];
    }
    set localTime(v) {
        this.setterImpl(22, v, 'localTime');
    }
    /**
     *
     *
     * @type {StoryBookApiCountry}
     */
    get enum() {
        return this.data[23];
    }
    set enum(v) {
        this.setterImpl(23, v, 'enum');
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 24);
            data[1] = 5.5;
            data[2] = 5;
            data[3] = 5.2;
            data[4] = 'asd';
            data[5] = '01512639847';
            data[6] = 'hallo@dr-plano.de';
            data[7] = 'Drp123.';
            data[8] = '55346';
            data[9] = 'asd';
            data[10] = 'http://www.dr-plano.de';
            data[11] = 'DE89 3704 0044 0532 0130 00';
            data[12] = 'NOLADE21STS';
            data[13] = 1605178413788;
            data[14] = 1604444400000;
            data[15] = 1604444400000;
            data[16] = 5;
            data[17] = 5;
            data[18] = 5;
            data[19] = 3;
            data[20] = 4;
            data[21] = 1000;
            data[22] = 3600000;
            data[23] = StoryBookApiCountry.GERMANY;
        }
        // propagate new raw data to children
    }
    get dni() {
        return '91';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '91', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class StoryBookApiValidationsRequiredFails extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, StoryBookApiValidationsRequiredFails);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'fails',
            id: 'VALIDATIONS_REQUIRED_FAILS',
        });
        this.attributeInfoNumber = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'number',
            id: 'VALIDATIONS_REQUIRED_FAILS_NUMBER',
            primitiveType: PApiPrimitiveTypes.number,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.number, undefined);
                        return null;
                    },
                    () => {
                        return this.api.validators.maxDecimalPlacesCount(0, PApiPrimitiveTypes.number, undefined);
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Diese Eingabe ist Pflicht.',
            }
        });
        this.attributeInfoInteger = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'integer',
            id: 'VALIDATIONS_REQUIRED_FAILS_INTEGER',
            primitiveType: PApiPrimitiveTypes.Integer,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Integer, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Diese Eingabe ist Pflicht.',
            }
        });
        this.attributeInfoCurrency = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'currency',
            id: 'VALIDATIONS_REQUIRED_FAILS_CURRENCY',
            primitiveType: PApiPrimitiveTypes.Currency,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Currency, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Diese Eingabe ist Pflicht.',
            }
        });
        this.attributeInfoString = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'string',
            id: 'VALIDATIONS_REQUIRED_FAILS_STRING',
            primitiveType: PApiPrimitiveTypes.string,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.string, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Diese Eingabe ist Pflicht.',
            }
        });
        this.attributeInfoTel = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'tel',
            id: 'VALIDATIONS_REQUIRED_FAILS_TEL',
            primitiveType: PApiPrimitiveTypes.Tel,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Tel, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Diese Eingabe ist Pflicht.',
            }
        });
        this.attributeInfoEmail = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'email',
            id: 'VALIDATIONS_REQUIRED_FAILS_EMAIL',
            primitiveType: PApiPrimitiveTypes.Email,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Email, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Diese Eingabe ist Pflicht.',
            }
        });
        this.attributeInfoPassword = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'password',
            id: 'VALIDATIONS_REQUIRED_FAILS_PASSWORD',
            primitiveType: PApiPrimitiveTypes.Password,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Password, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Diese Eingabe ist Pflicht.',
            }
        });
        this.attributeInfoPostalCode = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'postalCode',
            id: 'VALIDATIONS_REQUIRED_FAILS_POSTAL_CODE',
            primitiveType: PApiPrimitiveTypes.PostalCode,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.PostalCode, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Diese Eingabe ist Pflicht.',
            }
        });
        this.attributeInfoSearch = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'search',
            id: 'VALIDATIONS_REQUIRED_FAILS_SEARCH',
            primitiveType: PApiPrimitiveTypes.Search,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Search, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Diese Eingabe ist Pflicht.',
            }
        });
        this.attributeInfoUrl = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'url',
            id: 'VALIDATIONS_REQUIRED_FAILS_URL',
            primitiveType: PApiPrimitiveTypes.Url,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Url, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Diese Eingabe ist Pflicht.',
            }
        });
        this.attributeInfoIban = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'iban',
            id: 'VALIDATIONS_REQUIRED_FAILS_IBAN',
            primitiveType: PApiPrimitiveTypes.Iban,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Iban, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Diese Eingabe ist Pflicht.',
            }
        });
        this.attributeInfoBic = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'bic',
            id: 'VALIDATIONS_REQUIRED_FAILS_BIC',
            primitiveType: PApiPrimitiveTypes.Bic,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Bic, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Diese Eingabe ist Pflicht.',
            }
        });
        this.attributeInfoDateTime = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'dateTime',
            id: 'VALIDATIONS_REQUIRED_FAILS_DATE_TIME',
            primitiveType: PApiPrimitiveTypes.DateTime,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.DateTime, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Diese Eingabe ist Pflicht.',
            }
        });
        this.attributeInfoDate = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'date',
            id: 'VALIDATIONS_REQUIRED_FAILS_DATE',
            primitiveType: PApiPrimitiveTypes.Date,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Date, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Diese Eingabe ist Pflicht.',
            }
        });
        this.attributeInfoDateExclusiveEnd = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'dateExclusiveEnd',
            id: 'VALIDATIONS_REQUIRED_FAILS_DATE_EXCLUSIVE_END',
            primitiveType: PApiPrimitiveTypes.DateExclusiveEnd,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.DateExclusiveEnd, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Diese Eingabe ist Pflicht.',
            }
        });
        this.attributeInfoMinutes = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'minutes',
            id: 'VALIDATIONS_REQUIRED_FAILS_MINUTES',
            primitiveType: PApiPrimitiveTypes.Minutes,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Minutes, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Diese Eingabe ist Pflicht.',
            }
        });
        this.attributeInfoHours = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'hours',
            id: 'VALIDATIONS_REQUIRED_FAILS_HOURS',
            primitiveType: PApiPrimitiveTypes.Hours,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Hours, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Diese Eingabe ist Pflicht.',
            }
        });
        this.attributeInfoDays = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'days',
            id: 'VALIDATIONS_REQUIRED_FAILS_DAYS',
            primitiveType: PApiPrimitiveTypes.Days,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Days, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Diese Eingabe ist Pflicht.',
            }
        });
        this.attributeInfoMonths = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'months',
            id: 'VALIDATIONS_REQUIRED_FAILS_MONTHS',
            primitiveType: PApiPrimitiveTypes.Months,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Months, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Diese Eingabe ist Pflicht.',
            }
        });
        this.attributeInfoYears = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'years',
            id: 'VALIDATIONS_REQUIRED_FAILS_YEARS',
            primitiveType: PApiPrimitiveTypes.Years,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Years, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Diese Eingabe ist Pflicht.',
            }
        });
        this.attributeInfoDuration = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'duration',
            id: 'VALIDATIONS_REQUIRED_FAILS_DURATION',
            primitiveType: PApiPrimitiveTypes.Duration,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Duration, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Diese Eingabe ist Pflicht.',
            }
        });
        this.attributeInfoLocalTime = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'localTime',
            id: 'VALIDATIONS_REQUIRED_FAILS_LOCAL_TIME',
            primitiveType: PApiPrimitiveTypes.LocalTime,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.LocalTime, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Diese Eingabe ist Pflicht.',
            }
        });
        this.attributeInfoEnum = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'enum',
            id: 'VALIDATIONS_REQUIRED_FAILS_ENUM',
            primitiveType: PApiPrimitiveTypes.Enum,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Enum, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Diese Eingabe ist Pflicht.',
            }
        });
        this.attributeInfoImage = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'image',
            id: 'VALIDATIONS_REQUIRED_FAILS_IMAGE',
            primitiveType: PApiPrimitiveTypes.Image,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.required(PApiPrimitiveTypes.Image, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Diese Eingabe ist Pflicht.',
            }
        });
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *
     *
     * @type {number}
     */
    get number() {
        return this.data[1];
    }
    set number(v) {
        this.setterImpl(1, v, 'number');
    }
    /**
     *
     *
     * @type {Integer}
     */
    get integer() {
        return this.data[2];
    }
    set integer(v) {
        this.setterImpl(2, v, 'integer');
    }
    /**
     *
     *
     * @type {Currency}
     */
    get currency() {
        return this.data[3];
    }
    set currency(v) {
        this.setterImpl(3, v, 'currency');
    }
    /**
     *
     *
     * @type {string}
     */
    get string() {
        return this.data[4];
    }
    set string(v) {
        this.setterImpl(4, v, 'string');
    }
    /**
     *
     *
     * @type {Tel}
     */
    get tel() {
        return this.data[5];
    }
    set tel(v) {
        this.setterImpl(5, v, 'tel');
    }
    /**
     *
     *
     * @type {Email}
     */
    get email() {
        return this.data[6];
    }
    set email(v) {
        this.setterImpl(6, v, 'email');
    }
    /**
     *
     *
     * @type {Password}
     */
    get password() {
        return this.data[7];
    }
    set password(v) {
        this.setterImpl(7, v, 'password');
    }
    /**
     *
     *
     * @type {PostalCode}
     */
    get postalCode() {
        return this.data[8];
    }
    set postalCode(v) {
        this.setterImpl(8, v, 'postalCode');
    }
    /**
     *
     *
     * @type {Search}
     */
    get search() {
        return this.data[9];
    }
    set search(v) {
        this.setterImpl(9, v, 'search');
    }
    /**
     *
     *
     * @type {Url}
     */
    get url() {
        return this.data[10];
    }
    set url(v) {
        this.setterImpl(10, v, 'url');
    }
    /**
     *
     *
     * @type {Iban}
     */
    get iban() {
        return this.data[11];
    }
    set iban(v) {
        this.setterImpl(11, v, 'iban');
    }
    /**
     *
     *
     * @type {Bic}
     */
    get bic() {
        return this.data[12];
    }
    set bic(v) {
        this.setterImpl(12, v, 'bic');
    }
    /**
     *
     *
     * @type {DateTime}
     */
    get dateTime() {
        return this.data[13];
    }
    set dateTime(v) {
        this.setterImpl(13, v, 'dateTime');
    }
    /**
     *
     *
     * @type {Date}
     */
    get date() {
        return this.data[14];
    }
    set date(v) {
        this.setterImpl(14, v, 'date');
    }
    /**
     *
     *
     * @type {DateExclusiveEnd}
     */
    get dateExclusiveEnd() {
        return this.data[15];
    }
    set dateExclusiveEnd(v) {
        this.setterImpl(15, v, 'dateExclusiveEnd');
    }
    /**
     *
     *
     * @type {Minutes}
     */
    get minutes() {
        return this.data[16];
    }
    set minutes(v) {
        this.setterImpl(16, v, 'minutes');
    }
    /**
     *
     *
     * @type {Hours}
     */
    get hours() {
        return this.data[17];
    }
    set hours(v) {
        this.setterImpl(17, v, 'hours');
    }
    /**
     *
     *
     * @type {Days}
     */
    get days() {
        return this.data[18];
    }
    set days(v) {
        this.setterImpl(18, v, 'days');
    }
    /**
     *
     *
     * @type {Months}
     */
    get months() {
        return this.data[19];
    }
    set months(v) {
        this.setterImpl(19, v, 'months');
    }
    /**
     *
     *
     * @type {Years}
     */
    get years() {
        return this.data[20];
    }
    set years(v) {
        this.setterImpl(20, v, 'years');
    }
    /**
     *
     *
     * @type {Duration}
     */
    get duration() {
        return this.data[21];
    }
    set duration(v) {
        this.setterImpl(21, v, 'duration');
    }
    /**
     *
     *
     * @type {LocalTime}
     */
    get localTime() {
        return this.data[22];
    }
    set localTime(v) {
        this.setterImpl(22, v, 'localTime');
    }
    /**
     *
     *
     * @type {StoryBookApiCountry}
     */
    get enum() {
        return this.data[23];
    }
    set enum(v) {
        this.setterImpl(23, v, 'enum');
    }
    /**
     *
     *
     * @type {Image}
     */
    get image() {
        const path = this.data[24];
        return path ? Config.API_IMAGE_BASE_URL + path : path;
    }
    set image(v) {
        this.setterImpl(24, v, 'image');
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 25);
            data[4] = '';
            data[5] = '';
            data[6] = '';
            data[7] = '';
            data[8] = '';
            data[9] = '';
            data[10] = '';
            data[11] = '';
            data[12] = '';
            data[24] = '';
        }
        // propagate new raw data to children
    }
    get dni() {
        return '92';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '92', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class StoryBookApiValidationsMin extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, StoryBookApiValidationsMin);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'min',
            id: 'VALIDATIONS_MIN',
        });
        this.validWrapper = new StoryBookApiValidationsMinValid(this.api);
        this.failsWrapper = new StoryBookApiValidationsMinFails(this.api);
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
        this.validWrapper.parent = this;
        this.failsWrapper.parent = this;
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *
     */
    get valid() {
        return this.validWrapper;
    }
    set validTestSetter(v) {
        this.setterImpl(1, v.rawData, 'valid', () => { this.validWrapper = v; });
    }
    /**
     *
     */
    get fails() {
        return this.failsWrapper;
    }
    set failsTestSetter(v) {
        this.setterImpl(2, v.rawData, 'fails', () => { this.failsWrapper = v; });
    }
    _fixIds(_idReplacements) {
        this.validWrapper._fixIds(_idReplacements);
        this.failsWrapper._fixIds(_idReplacements);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 3);
            if (data[1] === null)
                data[1] = Meta.createNewObject(false);
            if (data[2] === null)
                data[2] = Meta.createNewObject(false);
        }
        // propagate new raw data to children
        this.validWrapper._updateRawData(data ? data[1] : null, generateMissingData);
        this.failsWrapper._updateRawData(data ? data[2] : null, generateMissingData);
    }
    get dni() {
        return '64';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '64', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class StoryBookApiValidationsMinValid extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, StoryBookApiValidationsMinValid);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'valid',
            id: 'VALIDATIONS_MIN_VALID',
        });
        this.compareConstWrapper = new StoryBookApiValidationsMinValidCompareConst(this.api);
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
        this.compareConstWrapper.parent = this;
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *
     */
    get compareConst() {
        return this.compareConstWrapper;
    }
    set compareConstTestSetter(v) {
        this.setterImpl(1, v.rawData, 'compareConst', () => { this.compareConstWrapper = v; });
    }
    _fixIds(_idReplacements) {
        this.compareConstWrapper._fixIds(_idReplacements);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 2);
            if (data[1] === null)
                data[1] = Meta.createNewObject(false);
        }
        // propagate new raw data to children
        this.compareConstWrapper._updateRawData(data ? data[1] : null, generateMissingData);
    }
    get dni() {
        return '140';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '140', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class StoryBookApiValidationsMinValidCompareConst extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, StoryBookApiValidationsMinValidCompareConst);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'compareConst',
            id: 'VALIDATIONS_MIN_VALID_COMPARE_CONST',
        });
        this.attributeInfoNumberIsEqual = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'numberIsEqual',
            id: 'VALIDATIONS_MIN_VALID_COMPARE_CONST_NUMBER_IS_EQUAL',
            primitiveType: PApiPrimitiveTypes.number,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(5, true, PApiPrimitiveTypes.number, undefined, undefined);
                        return null;
                    },
                    () => {
                        return this.api.validators.maxDecimalPlacesCount(0, PApiPrimitiveTypes.number, undefined);
                    },
                ];
            },
        });
        this.attributeInfoNumberThisIsNull = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'numberThisIsNull',
            id: 'VALIDATIONS_MIN_VALID_COMPARE_CONST_NUMBER_THIS_IS_NULL',
            primitiveType: PApiPrimitiveTypes.number,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(5, true, PApiPrimitiveTypes.number, undefined, undefined);
                        return null;
                    },
                    () => {
                        return this.api.validators.maxDecimalPlacesCount(0, PApiPrimitiveTypes.number, undefined);
                    },
                ];
            },
        });
        this.attributeInfoNumberOtherIsNull = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'numberOtherIsNull',
            id: 'VALIDATIONS_MIN_VALID_COMPARE_CONST_NUMBER_OTHER_IS_NULL',
            primitiveType: PApiPrimitiveTypes.number,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(null, true, PApiPrimitiveTypes.number, undefined, undefined);
                        return null;
                    },
                    () => {
                        return this.api.validators.maxDecimalPlacesCount(0, PApiPrimitiveTypes.number, undefined);
                    },
                ];
            },
        });
        this.attributeInfoIntegerIsEqual = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'integerIsEqual',
            id: 'VALIDATIONS_MIN_VALID_COMPARE_CONST_INTEGER_IS_EQUAL',
            primitiveType: PApiPrimitiveTypes.Integer,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(5, true, PApiPrimitiveTypes.Integer, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoIntegerThisIsNull = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'integerThisIsNull',
            id: 'VALIDATIONS_MIN_VALID_COMPARE_CONST_INTEGER_THIS_IS_NULL',
            primitiveType: PApiPrimitiveTypes.Integer,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(5, true, PApiPrimitiveTypes.Integer, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoIntegerOtherIsNull = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'integerOtherIsNull',
            id: 'VALIDATIONS_MIN_VALID_COMPARE_CONST_INTEGER_OTHER_IS_NULL',
            primitiveType: PApiPrimitiveTypes.Integer,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(null, true, PApiPrimitiveTypes.Integer, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoCurrencyIsEqual = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'currencyIsEqual',
            id: 'VALIDATIONS_MIN_VALID_COMPARE_CONST_CURRENCY_IS_EQUAL',
            primitiveType: PApiPrimitiveTypes.Currency,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(5, true, PApiPrimitiveTypes.Currency, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoCurrencyThisIsNull = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'currencyThisIsNull',
            id: 'VALIDATIONS_MIN_VALID_COMPARE_CONST_CURRENCY_THIS_IS_NULL',
            primitiveType: PApiPrimitiveTypes.Currency,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(5, true, PApiPrimitiveTypes.Currency, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoCurrencyOtherIsNull = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'currencyOtherIsNull',
            id: 'VALIDATIONS_MIN_VALID_COMPARE_CONST_CURRENCY_OTHER_IS_NULL',
            primitiveType: PApiPrimitiveTypes.Currency,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(null, true, PApiPrimitiveTypes.Currency, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoCurrencyOtherIsNegative = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'currencyOtherIsNegative',
            id: 'VALIDATIONS_MIN_VALID_COMPARE_CONST_IS_NEGATIVE',
            primitiveType: PApiPrimitiveTypes.Currency,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(-10, true, PApiPrimitiveTypes.Currency, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoDateTimeIsEqual = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'dateTimeIsEqual',
            id: 'VALIDATIONS_MIN_VALID_COMPARE_CONST_DATE_TIME_IS_EQUAL',
            primitiveType: PApiPrimitiveTypes.DateTime,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(1577833200000, true, PApiPrimitiveTypes.DateTime, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoDateTimeThisIsNull = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'dateTimeThisIsNull',
            id: 'VALIDATIONS_MIN_VALID_COMPARE_CONST_DATE_TIME_THIS_IS_NULL',
            primitiveType: PApiPrimitiveTypes.DateTime,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(1577833200000, true, PApiPrimitiveTypes.DateTime, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoDateTimeOtherIsNull = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'dateTimeOtherIsNull',
            id: 'VALIDATIONS_MIN_VALID_COMPARE_CONST_DATE_TIME_OTHER_IS_NULL',
            primitiveType: PApiPrimitiveTypes.DateTime,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(null, true, PApiPrimitiveTypes.DateTime, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoDateIsEqual = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'dateIsEqual',
            id: 'VALIDATIONS_MIN_VALID_COMPARE_CONST_DATE_IS_EQUAL',
            primitiveType: PApiPrimitiveTypes.Date,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(1577833200000, true, PApiPrimitiveTypes.Date, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoDateThisIsNull = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'dateThisIsNull',
            id: 'VALIDATIONS_MIN_VALID_COMPARE_CONST_DATE_THIS_IS_NULL',
            primitiveType: PApiPrimitiveTypes.Date,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(1577833200000, true, PApiPrimitiveTypes.Date, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoDateOtherIsNull = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'dateOtherIsNull',
            id: 'VALIDATIONS_MIN_VALID_COMPARE_CONST_DATE_OTHER_IS_NULL',
            primitiveType: PApiPrimitiveTypes.Date,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(null, true, PApiPrimitiveTypes.Date, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoDateExclusiveEndIsEqual = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'dateExclusiveEndIsEqual',
            id: 'VALIDATIONS_MIN_VALID_COMPARE_CONST_DATE_EXCLUSIVE_END_IS_EQUAL',
            primitiveType: PApiPrimitiveTypes.DateExclusiveEnd,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(1577833200000, true, PApiPrimitiveTypes.DateExclusiveEnd, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoDateExclusiveEndThisIsNull = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'dateExclusiveEndThisIsNull',
            id: 'VALIDATIONS_MIN_VALID_COMPARE_CONST_DATE_EXCLUSIVE_END_THIS_IS_NULL',
            primitiveType: PApiPrimitiveTypes.DateExclusiveEnd,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(1577833200000, true, PApiPrimitiveTypes.DateExclusiveEnd, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoDateExclusiveEndOtherIsNull = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'dateExclusiveEndOtherIsNull',
            id: 'VALIDATIONS_MIN_VALID_COMPARE_CONST_DATE_EXCLUSIVE_END_OTHER_IS_NULL',
            primitiveType: PApiPrimitiveTypes.DateExclusiveEnd,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(null, true, PApiPrimitiveTypes.DateExclusiveEnd, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoMinutesIsEqual = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'minutesIsEqual',
            id: 'VALIDATIONS_MIN_VALID_COMPARE_CONST_MINUTES_IS_EQUAL',
            primitiveType: PApiPrimitiveTypes.Minutes,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(5, true, PApiPrimitiveTypes.Minutes, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoMinutesThisIsNull = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'minutesThisIsNull',
            id: 'VALIDATIONS_MIN_VALID_COMPARE_CONST_MINUTES_THIS_IS_NULL',
            primitiveType: PApiPrimitiveTypes.Minutes,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(5, true, PApiPrimitiveTypes.Minutes, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoMinutesOtherIsNull = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'minutesOtherIsNull',
            id: 'VALIDATIONS_MIN_VALID_COMPARE_CONST_MINUTES_OTHER_IS_NULL',
            primitiveType: PApiPrimitiveTypes.Minutes,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(null, true, PApiPrimitiveTypes.Minutes, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoHoursIsEqual = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'hoursIsEqual',
            id: 'VALIDATIONS_MIN_VALID_COMPARE_CONST_HOURS_IS_EQUAL',
            primitiveType: PApiPrimitiveTypes.Hours,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(5, true, PApiPrimitiveTypes.Hours, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoHoursThisIsNull = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'hoursThisIsNull',
            id: 'VALIDATIONS_MIN_VALID_COMPARE_CONST_HOURS_THIS_IS_NULL',
            primitiveType: PApiPrimitiveTypes.Hours,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(5, true, PApiPrimitiveTypes.Hours, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoHoursOtherIsNull = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'hoursOtherIsNull',
            id: 'VALIDATIONS_MIN_VALID_COMPARE_CONST_HOURS_OTHER_IS_NULL',
            primitiveType: PApiPrimitiveTypes.Hours,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(null, true, PApiPrimitiveTypes.Hours, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoDaysIsEqual = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'daysIsEqual',
            id: 'VALIDATIONS_MIN_VALID_COMPARE_CONST_DAYS_IS_EQUAL',
            primitiveType: PApiPrimitiveTypes.Days,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(5, true, PApiPrimitiveTypes.Days, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoDaysThisIsNull = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'daysThisIsNull',
            id: 'VALIDATIONS_MIN_VALID_COMPARE_CONST_DAYS_THIS_IS_NULL',
            primitiveType: PApiPrimitiveTypes.Days,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(5, true, PApiPrimitiveTypes.Days, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoDaysOtherIsNull = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'daysOtherIsNull',
            id: 'VALIDATIONS_MIN_VALID_COMPARE_CONST_DAYS_OTHER_IS_NULL',
            primitiveType: PApiPrimitiveTypes.Days,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(null, true, PApiPrimitiveTypes.Days, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoMonthsIsEqual = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'monthsIsEqual',
            id: 'VALIDATIONS_MIN_VALID_COMPARE_CONST_MONTHS_IS_EQUAL',
            primitiveType: PApiPrimitiveTypes.Months,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(5, true, PApiPrimitiveTypes.Months, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoMonthsThisIsNull = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'monthsThisIsNull',
            id: 'VALIDATIONS_MIN_VALID_COMPARE_CONST_MONTHS_THIS_IS_NULL',
            primitiveType: PApiPrimitiveTypes.Months,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(5, true, PApiPrimitiveTypes.Months, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoMonthsOtherIsNull = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'monthsOtherIsNull',
            id: 'VALIDATIONS_MIN_VALID_COMPARE_CONST_MONTHS_OTHER_IS_NULL',
            primitiveType: PApiPrimitiveTypes.Months,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(null, true, PApiPrimitiveTypes.Months, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoYearsIsEqual = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'yearsIsEqual',
            id: 'VALIDATIONS_MIN_VALID_COMPARE_CONST_YEARS_IS_EQUAL',
            primitiveType: PApiPrimitiveTypes.Years,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(5, true, PApiPrimitiveTypes.Years, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoYearsThisIsNull = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'yearsThisIsNull',
            id: 'VALIDATIONS_MIN_VALID_COMPARE_CONST_YEARS_THIS_IS_NULL',
            primitiveType: PApiPrimitiveTypes.Years,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(5, true, PApiPrimitiveTypes.Years, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoYearsOtherIsNull = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'yearsOtherIsNull',
            id: 'VALIDATIONS_MIN_VALID_COMPARE_CONST_YEARS_OTHER_IS_NULL',
            primitiveType: PApiPrimitiveTypes.Years,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(null, true, PApiPrimitiveTypes.Years, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoDurationIsEqual = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'durationIsEqual',
            id: 'VALIDATIONS_MIN_VALID_COMPARE_CONST_DURATION_IS_EQUAL',
            primitiveType: PApiPrimitiveTypes.Duration,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(5, true, PApiPrimitiveTypes.Duration, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoDurationThisIsNull = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'durationThisIsNull',
            id: 'VALIDATIONS_MIN_VALID_COMPARE_CONST_DURATION_THIS_IS_NULL',
            primitiveType: PApiPrimitiveTypes.Duration,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(5, true, PApiPrimitiveTypes.Duration, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoDurationOtherIsNull = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'durationOtherIsNull',
            id: 'VALIDATIONS_MIN_VALID_COMPARE_CONST_DURATION_OTHER_IS_NULL',
            primitiveType: PApiPrimitiveTypes.Duration,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(null, true, PApiPrimitiveTypes.Duration, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoLocalTimeIsEqual = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'localTimeIsEqual',
            id: 'VALIDATIONS_MIN_VALID_COMPARE_CONST_LOCAL_TIME_IS_EQUAL',
            primitiveType: PApiPrimitiveTypes.LocalTime,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(3600000, true, PApiPrimitiveTypes.LocalTime, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoLocalTimeThisIsNull = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'localTimeThisIsNull',
            id: 'VALIDATIONS_MIN_VALID_COMPARE_CONST_LOCAL_TIME_THIS_IS_NULL',
            primitiveType: PApiPrimitiveTypes.LocalTime,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(3600000, true, PApiPrimitiveTypes.LocalTime, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoLocalTimeOtherIsNull = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'localTimeOtherIsNull',
            id: 'VALIDATIONS_MIN_VALID_COMPARE_CONST_LOCAL_TIME_OTHER_IS_NULL',
            primitiveType: PApiPrimitiveTypes.LocalTime,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(null, true, PApiPrimitiveTypes.LocalTime, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *
     *
     * @type {number}
     */
    get numberIsEqual() {
        return this.data[1];
    }
    set numberIsEqual(v) {
        this.setterImpl(1, v, 'numberIsEqual');
    }
    /**
     *
     *
     * @type {number}
     */
    get numberThisIsNull() {
        return this.data[2];
    }
    set numberThisIsNull(v) {
        this.setterImpl(2, v, 'numberThisIsNull');
    }
    /**
     *
     *
     * @type {number}
     */
    get numberOtherIsNull() {
        return this.data[3];
    }
    set numberOtherIsNull(v) {
        this.setterImpl(3, v, 'numberOtherIsNull');
    }
    /**
     *
     *
     * @type {Integer}
     */
    get integerIsEqual() {
        return this.data[4];
    }
    set integerIsEqual(v) {
        this.setterImpl(4, v, 'integerIsEqual');
    }
    /**
     *
     *
     * @type {Integer}
     */
    get integerThisIsNull() {
        return this.data[5];
    }
    set integerThisIsNull(v) {
        this.setterImpl(5, v, 'integerThisIsNull');
    }
    /**
     *
     *
     * @type {Integer}
     */
    get integerOtherIsNull() {
        return this.data[6];
    }
    set integerOtherIsNull(v) {
        this.setterImpl(6, v, 'integerOtherIsNull');
    }
    /**
     *
     *
     * @type {Currency}
     */
    get currencyIsEqual() {
        return this.data[7];
    }
    set currencyIsEqual(v) {
        this.setterImpl(7, v, 'currencyIsEqual');
    }
    /**
     *
     *
     * @type {Currency}
     */
    get currencyThisIsNull() {
        return this.data[8];
    }
    set currencyThisIsNull(v) {
        this.setterImpl(8, v, 'currencyThisIsNull');
    }
    /**
     *
     *
     * @type {Currency}
     */
    get currencyOtherIsNull() {
        return this.data[9];
    }
    set currencyOtherIsNull(v) {
        this.setterImpl(9, v, 'currencyOtherIsNull');
    }
    /**
     *
     *
     * @type {Currency}
     */
    get currencyOtherIsNegative() {
        return this.data[10];
    }
    set currencyOtherIsNegative(v) {
        this.setterImpl(10, v, 'currencyOtherIsNegative');
    }
    /**
     *
     *
     * @type {DateTime}
     */
    get dateTimeIsEqual() {
        return this.data[11];
    }
    set dateTimeIsEqual(v) {
        this.setterImpl(11, v, 'dateTimeIsEqual');
    }
    /**
     *
     *
     * @type {DateTime}
     */
    get dateTimeThisIsNull() {
        return this.data[12];
    }
    set dateTimeThisIsNull(v) {
        this.setterImpl(12, v, 'dateTimeThisIsNull');
    }
    /**
     *
     *
     * @type {DateTime}
     */
    get dateTimeOtherIsNull() {
        return this.data[13];
    }
    set dateTimeOtherIsNull(v) {
        this.setterImpl(13, v, 'dateTimeOtherIsNull');
    }
    /**
     *
     *
     * @type {Date}
     */
    get dateIsEqual() {
        return this.data[14];
    }
    set dateIsEqual(v) {
        this.setterImpl(14, v, 'dateIsEqual');
    }
    /**
     *
     *
     * @type {Date}
     */
    get dateThisIsNull() {
        return this.data[15];
    }
    set dateThisIsNull(v) {
        this.setterImpl(15, v, 'dateThisIsNull');
    }
    /**
     *
     *
     * @type {Date}
     */
    get dateOtherIsNull() {
        return this.data[16];
    }
    set dateOtherIsNull(v) {
        this.setterImpl(16, v, 'dateOtherIsNull');
    }
    /**
     *
     *
     * @type {DateExclusiveEnd}
     */
    get dateExclusiveEndIsEqual() {
        return this.data[17];
    }
    set dateExclusiveEndIsEqual(v) {
        this.setterImpl(17, v, 'dateExclusiveEndIsEqual');
    }
    /**
     *
     *
     * @type {DateExclusiveEnd}
     */
    get dateExclusiveEndThisIsNull() {
        return this.data[18];
    }
    set dateExclusiveEndThisIsNull(v) {
        this.setterImpl(18, v, 'dateExclusiveEndThisIsNull');
    }
    /**
     *
     *
     * @type {DateExclusiveEnd}
     */
    get dateExclusiveEndOtherIsNull() {
        return this.data[19];
    }
    set dateExclusiveEndOtherIsNull(v) {
        this.setterImpl(19, v, 'dateExclusiveEndOtherIsNull');
    }
    /**
     *
     *
     * @type {Minutes}
     */
    get minutesIsEqual() {
        return this.data[20];
    }
    set minutesIsEqual(v) {
        this.setterImpl(20, v, 'minutesIsEqual');
    }
    /**
     *
     *
     * @type {Minutes}
     */
    get minutesThisIsNull() {
        return this.data[21];
    }
    set minutesThisIsNull(v) {
        this.setterImpl(21, v, 'minutesThisIsNull');
    }
    /**
     *
     *
     * @type {Minutes}
     */
    get minutesOtherIsNull() {
        return this.data[22];
    }
    set minutesOtherIsNull(v) {
        this.setterImpl(22, v, 'minutesOtherIsNull');
    }
    /**
     *
     *
     * @type {Hours}
     */
    get hoursIsEqual() {
        return this.data[23];
    }
    set hoursIsEqual(v) {
        this.setterImpl(23, v, 'hoursIsEqual');
    }
    /**
     *
     *
     * @type {Hours}
     */
    get hoursThisIsNull() {
        return this.data[24];
    }
    set hoursThisIsNull(v) {
        this.setterImpl(24, v, 'hoursThisIsNull');
    }
    /**
     *
     *
     * @type {Hours}
     */
    get hoursOtherIsNull() {
        return this.data[25];
    }
    set hoursOtherIsNull(v) {
        this.setterImpl(25, v, 'hoursOtherIsNull');
    }
    /**
     *
     *
     * @type {Days}
     */
    get daysIsEqual() {
        return this.data[26];
    }
    set daysIsEqual(v) {
        this.setterImpl(26, v, 'daysIsEqual');
    }
    /**
     *
     *
     * @type {Days}
     */
    get daysThisIsNull() {
        return this.data[27];
    }
    set daysThisIsNull(v) {
        this.setterImpl(27, v, 'daysThisIsNull');
    }
    /**
     *
     *
     * @type {Days}
     */
    get daysOtherIsNull() {
        return this.data[28];
    }
    set daysOtherIsNull(v) {
        this.setterImpl(28, v, 'daysOtherIsNull');
    }
    /**
     *
     *
     * @type {Months}
     */
    get monthsIsEqual() {
        return this.data[29];
    }
    set monthsIsEqual(v) {
        this.setterImpl(29, v, 'monthsIsEqual');
    }
    /**
     *
     *
     * @type {Months}
     */
    get monthsThisIsNull() {
        return this.data[30];
    }
    set monthsThisIsNull(v) {
        this.setterImpl(30, v, 'monthsThisIsNull');
    }
    /**
     *
     *
     * @type {Months}
     */
    get monthsOtherIsNull() {
        return this.data[31];
    }
    set monthsOtherIsNull(v) {
        this.setterImpl(31, v, 'monthsOtherIsNull');
    }
    /**
     *
     *
     * @type {Years}
     */
    get yearsIsEqual() {
        return this.data[32];
    }
    set yearsIsEqual(v) {
        this.setterImpl(32, v, 'yearsIsEqual');
    }
    /**
     *
     *
     * @type {Years}
     */
    get yearsThisIsNull() {
        return this.data[33];
    }
    set yearsThisIsNull(v) {
        this.setterImpl(33, v, 'yearsThisIsNull');
    }
    /**
     *
     *
     * @type {Years}
     */
    get yearsOtherIsNull() {
        return this.data[34];
    }
    set yearsOtherIsNull(v) {
        this.setterImpl(34, v, 'yearsOtherIsNull');
    }
    /**
     *
     *
     * @type {Duration}
     */
    get durationIsEqual() {
        return this.data[35];
    }
    set durationIsEqual(v) {
        this.setterImpl(35, v, 'durationIsEqual');
    }
    /**
     *
     *
     * @type {Duration}
     */
    get durationThisIsNull() {
        return this.data[36];
    }
    set durationThisIsNull(v) {
        this.setterImpl(36, v, 'durationThisIsNull');
    }
    /**
     *
     *
     * @type {Duration}
     */
    get durationOtherIsNull() {
        return this.data[37];
    }
    set durationOtherIsNull(v) {
        this.setterImpl(37, v, 'durationOtherIsNull');
    }
    /**
     *
     *
     * @type {LocalTime}
     */
    get localTimeIsEqual() {
        return this.data[38];
    }
    set localTimeIsEqual(v) {
        this.setterImpl(38, v, 'localTimeIsEqual');
    }
    /**
     *
     *
     * @type {LocalTime}
     */
    get localTimeThisIsNull() {
        return this.data[39];
    }
    set localTimeThisIsNull(v) {
        this.setterImpl(39, v, 'localTimeThisIsNull');
    }
    /**
     *
     *
     * @type {LocalTime}
     */
    get localTimeOtherIsNull() {
        return this.data[40];
    }
    set localTimeOtherIsNull(v) {
        this.setterImpl(40, v, 'localTimeOtherIsNull');
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 41);
            data[1] = 5;
            data[3] = 5;
            data[4] = 5;
            data[6] = 5;
            data[7] = 5;
            data[9] = 5;
            data[10] = -9;
            data[11] = 1577833200000;
            data[13] = 1577833200000;
            data[14] = 1577833200000;
            data[16] = 1577833200000;
            data[17] = 1577833200000;
            data[19] = 1577833200000;
            data[20] = 5;
            data[22] = 5;
            data[23] = 5;
            data[25] = 5;
            data[26] = 5;
            data[28] = 5;
            data[29] = 5;
            data[31] = 5;
            data[32] = 5;
            data[34] = 5;
            data[35] = 5;
            data[37] = 5;
            data[38] = 3600000;
            data[40] = 3600000;
        }
        // propagate new raw data to children
    }
    get dni() {
        return '142';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '142', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class StoryBookApiValidationsMinFails extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, StoryBookApiValidationsMinFails);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'fails',
            id: 'VALIDATIONS_MIN_FAILS',
        });
        this.compareConstWrapper = new StoryBookApiValidationsMinFailsCompareConst(this.api);
        this.compareNodeWrapper = new StoryBookApiValidationsMinFailsCompareNode(this.api);
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
        this.compareConstWrapper.parent = this;
        this.compareNodeWrapper.parent = this;
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *
     */
    get compareConst() {
        return this.compareConstWrapper;
    }
    set compareConstTestSetter(v) {
        this.setterImpl(1, v.rawData, 'compareConst', () => { this.compareConstWrapper = v; });
    }
    /**
     *
     */
    get compareNode() {
        return this.compareNodeWrapper;
    }
    set compareNodeTestSetter(v) {
        this.setterImpl(2, v.rawData, 'compareNode', () => { this.compareNodeWrapper = v; });
    }
    _fixIds(_idReplacements) {
        this.compareConstWrapper._fixIds(_idReplacements);
        this.compareNodeWrapper._fixIds(_idReplacements);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 3);
            if (data[1] === null)
                data[1] = Meta.createNewObject(false);
            if (data[2] === null)
                data[2] = Meta.createNewObject(false);
        }
        // propagate new raw data to children
        this.compareConstWrapper._updateRawData(data ? data[1] : null, generateMissingData);
        this.compareNodeWrapper._updateRawData(data ? data[2] : null, generateMissingData);
    }
    get dni() {
        return '141';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '141', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class StoryBookApiValidationsMinFailsCompareConst extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, StoryBookApiValidationsMinFailsCompareConst);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'compareConst',
            id: 'VALIDATIONS_MIN_FAILS_COMPARE_CONST',
        });
        this.attributeInfoNumber = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'number',
            id: 'VALIDATIONS_MIN_FAILS_COMPARE_CONST_NUMBER',
            primitiveType: PApiPrimitiveTypes.number,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(7.5, true, PApiPrimitiveTypes.number, undefined, undefined);
                        return null;
                    },
                    () => {
                        return this.api.validators.maxDecimalPlacesCount(0, PApiPrimitiveTypes.number, undefined);
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Bitte mindestens »7.5« eingeben.',
            }
        });
        this.attributeInfoNumberEqualNotAllowed = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'numberEqualNotAllowed',
            id: 'VALIDATIONS_MIN_FAILS_COMPARE_CONST_NUMBER_EQUAL_NOT_ALLOWED',
            primitiveType: PApiPrimitiveTypes.number,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(5, false, PApiPrimitiveTypes.number, undefined, undefined);
                        return null;
                    },
                    () => {
                        return this.api.validators.maxDecimalPlacesCount(0, PApiPrimitiveTypes.number, undefined);
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Bitte eine Zahl größer als »5« eingeben.',
            }
        });
        this.attributeInfoInteger = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'integer',
            id: 'VALIDATIONS_MIN_FAILS_COMPARE_CONST_INTEGER',
            primitiveType: PApiPrimitiveTypes.Integer,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(7, true, PApiPrimitiveTypes.Integer, undefined, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Bitte mindestens »7« eingeben.',
            }
        });
        this.attributeInfoIntegerEqualNotAllowed = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'integerEqualNotAllowed',
            id: 'VALIDATIONS_MIN_FAILS_COMPARE_CONST_INTEGER_EQUAL_NOT_ALLOWED',
            primitiveType: PApiPrimitiveTypes.Integer,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(7, false, PApiPrimitiveTypes.Integer, undefined, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Bitte eine Zahl größer als »7« eingeben.',
            }
        });
        this.attributeInfoCurrency = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'currency',
            id: 'VALIDATIONS_MIN_FAILS_COMPARE_CONST_CURRENCY',
            primitiveType: PApiPrimitiveTypes.Currency,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(7, true, PApiPrimitiveTypes.Currency, undefined, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Bitte mindestens »7« eingeben.',
            }
        });
        this.attributeInfoCurrencyEqualNotAllowed = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'currencyEqualNotAllowed',
            id: 'VALIDATIONS_MIN_FAILS_COMPARE_CONST_CURRENCY_EQUAL_NOT_ALLOWED',
            primitiveType: PApiPrimitiveTypes.Currency,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(7, false, PApiPrimitiveTypes.Currency, undefined, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Bitte eine Zahl größer als »7« eingeben.',
            }
        });
        this.attributeInfoDateTime = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'dateTime',
            id: 'VALIDATIONS_MIN_FAILS_COMPARE_CONST_DATE_TIME',
            primitiveType: PApiPrimitiveTypes.DateTime,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(1605135600000, true, PApiPrimitiveTypes.DateTime, undefined, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Bitte mindestens die Zeit »12.11.20, 00:00« eingeben.',
            }
        });
        this.attributeInfoDateTimeEqualNotAllowed = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'dateTimeEqualNotAllowed',
            id: 'VALIDATIONS_MIN_FAILS_COMPARE_CONST_DATE_TIME_EQUAL_NOT_ALLOWED',
            primitiveType: PApiPrimitiveTypes.DateTime,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(1605135600000, false, PApiPrimitiveTypes.DateTime, undefined, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Bitte eine Zeit später als »12.11.20, 00:00« eingeben.',
            }
        });
        this.attributeInfoDate = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'date',
            id: 'VALIDATIONS_MIN_FAILS_COMPARE_CONST_DATE',
            primitiveType: PApiPrimitiveTypes.Date,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(1605135600000, true, PApiPrimitiveTypes.Date, undefined, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Bitte mindestens das Datum »12.11.2020« eingeben.',
            }
        });
        this.attributeInfoDateEqualNotAllowed = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'dateEqualNotAllowed',
            id: 'VALIDATIONS_MIN_FAILS_COMPARE_CONST_DATE_EQUAL_NOT_ALLOWED',
            primitiveType: PApiPrimitiveTypes.Date,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(1605135600000, false, PApiPrimitiveTypes.Date, undefined, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Bitte ein Datum später als »12.11.2020« eingeben.',
            }
        });
        this.attributeInfoDateExclusiveEnd = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'dateExclusiveEnd',
            id: 'VALIDATIONS_MIN_FAILS_COMPARE_CONST_DATE_EXCLUSIVE_END',
            primitiveType: PApiPrimitiveTypes.DateExclusiveEnd,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(1605135600000, true, PApiPrimitiveTypes.DateExclusiveEnd, undefined, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Bitte mindestens das Datum »12.11.2020« eingeben.',
            }
        });
        this.attributeInfoDateExclusiveEndEqualNotAllowed = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'dateExclusiveEndEqualNotAllowed',
            id: 'VALIDATIONS_MIN_FAILS_COMPARE_CONST_DATE_EXCLUSIVE_END_EQUAL_NOT_ALLOWED',
            primitiveType: PApiPrimitiveTypes.DateExclusiveEnd,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(1605135600000, false, PApiPrimitiveTypes.DateExclusiveEnd, undefined, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Bitte ein Datum später als »12.11.2020« eingeben.',
            }
        });
        this.attributeInfoMinutes = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'minutes',
            id: 'VALIDATIONS_MIN_FAILS_COMPARE_CONST_MINUTES',
            primitiveType: PApiPrimitiveTypes.Minutes,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(7, true, PApiPrimitiveTypes.Minutes, undefined, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Bitte mindestens »7« eingeben.',
            }
        });
        this.attributeInfoMinutesEqualNotAllowed = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'minutesEqualNotAllowed',
            id: 'VALIDATIONS_MIN_FAILS_COMPARE_CONST_MINUTES_EQUAL_NOT_ALLOWED',
            primitiveType: PApiPrimitiveTypes.Minutes,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(7, false, PApiPrimitiveTypes.Minutes, undefined, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Bitte eine Zahl größer als »7« eingeben.',
            }
        });
        this.attributeInfoHours = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'hours',
            id: 'VALIDATIONS_MIN_FAILS_COMPARE_CONST_HOURS',
            primitiveType: PApiPrimitiveTypes.Hours,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(7, true, PApiPrimitiveTypes.Hours, undefined, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Bitte mindestens »7« eingeben.',
            }
        });
        this.attributeInfoHoursEqualNotAllowed = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'hoursEqualNotAllowed',
            id: 'VALIDATIONS_MIN_FAILS_COMPARE_CONST_HOURS_EQUAL_NOT_ALLOWED',
            primitiveType: PApiPrimitiveTypes.Hours,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(7, false, PApiPrimitiveTypes.Hours, undefined, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Bitte eine Zahl größer als »7« eingeben.',
            }
        });
        this.attributeInfoDays = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'days',
            id: 'VALIDATIONS_MIN_FAILS_COMPARE_CONST_DAYS',
            primitiveType: PApiPrimitiveTypes.Days,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(7, true, PApiPrimitiveTypes.Days, undefined, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Bitte mindestens »7« eingeben.',
            }
        });
        this.attributeInfoDaysEqualNotAllowed = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'daysEqualNotAllowed',
            id: 'VALIDATIONS_MIN_FAILS_COMPARE_CONST_DAYS_EQUAL_NOT_ALLOWED',
            primitiveType: PApiPrimitiveTypes.Days,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(7, false, PApiPrimitiveTypes.Days, undefined, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Bitte eine Zahl größer als »7« eingeben.',
            }
        });
        this.attributeInfoMonths = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'months',
            id: 'VALIDATIONS_MIN_FAILS_COMPARE_CONST_MONTHS',
            primitiveType: PApiPrimitiveTypes.Months,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(7, true, PApiPrimitiveTypes.Months, undefined, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Bitte mindestens »7« eingeben.',
            }
        });
        this.attributeInfoMonthsEqualNotAllowed = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'monthsEqualNotAllowed',
            id: 'VALIDATIONS_MIN_FAILS_COMPARE_CONST_MONTHS_EQUAL_NOT_ALLOWED',
            primitiveType: PApiPrimitiveTypes.Months,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(5, false, PApiPrimitiveTypes.Months, undefined, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Bitte eine Zahl größer als »5« eingeben.',
            }
        });
        this.attributeInfoYears = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'years',
            id: 'VALIDATIONS_MIN_FAILS_COMPARE_CONST_YEARS',
            primitiveType: PApiPrimitiveTypes.Years,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(7, true, PApiPrimitiveTypes.Years, undefined, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Bitte mindestens »7« eingeben.',
            }
        });
        this.attributeInfoYearsEqualNotAllowed = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'yearsEqualNotAllowed',
            id: 'VALIDATIONS_MIN_FAILS_COMPARE_CONST_YEARS_EQUAL_NOT_ALLOWED',
            primitiveType: PApiPrimitiveTypes.Years,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(5, false, PApiPrimitiveTypes.Years, undefined, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Bitte eine Zahl größer als »5« eingeben.',
            }
        });
        this.attributeInfoDuration = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'duration',
            id: 'VALIDATIONS_MIN_FAILS_COMPARE_CONST_DURATION',
            primitiveType: PApiPrimitiveTypes.Duration,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(7, true, PApiPrimitiveTypes.Duration, undefined, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Bitte mindestens »7« eingeben.',
            }
        });
        this.attributeInfoDurationEqualNotAllowed = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'durationEqualNotAllowed',
            id: 'VALIDATIONS_MIN_FAILS_COMPARE_CONST_DURATION_EQUAL_NOT_ALLOWED',
            primitiveType: PApiPrimitiveTypes.Duration,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(7, false, PApiPrimitiveTypes.Duration, undefined, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Bitte eine Zahl größer als »7« eingeben.',
            }
        });
        this.attributeInfoLocalTime = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'localTime',
            id: 'VALIDATIONS_MIN_FAILS_COMPARE_CONST_LOCAL_TIME',
            primitiveType: PApiPrimitiveTypes.LocalTime,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(3600000, true, PApiPrimitiveTypes.LocalTime, undefined, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Bitte mindestens die Zeit »01:00« eingeben.',
            }
        });
        this.attributeInfoLocalTimeEqualNotAllowed = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'localTimeEqualNotAllowed',
            id: 'VALIDATIONS_MIN_FAILS_COMPARE_CONST_LOCAL_TIME_EQUAL_NOT_ALLOWED',
            primitiveType: PApiPrimitiveTypes.LocalTime,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(3600000, false, PApiPrimitiveTypes.LocalTime, undefined, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Bitte eine Zeit später als »01:00« eingeben.',
            }
        });
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *
     *
     * @type {number}
     */
    get number() {
        return this.data[1];
    }
    set number(v) {
        this.setterImpl(1, v, 'number');
    }
    /**
     *
     *
     * @type {number}
     */
    get numberEqualNotAllowed() {
        return this.data[2];
    }
    set numberEqualNotAllowed(v) {
        this.setterImpl(2, v, 'numberEqualNotAllowed');
    }
    /**
     *
     *
     * @type {Integer}
     */
    get integer() {
        return this.data[3];
    }
    set integer(v) {
        this.setterImpl(3, v, 'integer');
    }
    /**
     *
     *
     * @type {Integer}
     */
    get integerEqualNotAllowed() {
        return this.data[4];
    }
    set integerEqualNotAllowed(v) {
        this.setterImpl(4, v, 'integerEqualNotAllowed');
    }
    /**
     *
     *
     * @type {Currency}
     */
    get currency() {
        return this.data[5];
    }
    set currency(v) {
        this.setterImpl(5, v, 'currency');
    }
    /**
     *
     *
     * @type {Currency}
     */
    get currencyEqualNotAllowed() {
        return this.data[6];
    }
    set currencyEqualNotAllowed(v) {
        this.setterImpl(6, v, 'currencyEqualNotAllowed');
    }
    /**
     *
     *
     * @type {DateTime}
     */
    get dateTime() {
        return this.data[7];
    }
    set dateTime(v) {
        this.setterImpl(7, v, 'dateTime');
    }
    /**
     *
     *
     * @type {DateTime}
     */
    get dateTimeEqualNotAllowed() {
        return this.data[8];
    }
    set dateTimeEqualNotAllowed(v) {
        this.setterImpl(8, v, 'dateTimeEqualNotAllowed');
    }
    /**
     *
     *
     * @type {Date}
     */
    get date() {
        return this.data[9];
    }
    set date(v) {
        this.setterImpl(9, v, 'date');
    }
    /**
     *
     *
     * @type {Date}
     */
    get dateEqualNotAllowed() {
        return this.data[10];
    }
    set dateEqualNotAllowed(v) {
        this.setterImpl(10, v, 'dateEqualNotAllowed');
    }
    /**
     *
     *
     * @type {DateExclusiveEnd}
     */
    get dateExclusiveEnd() {
        return this.data[11];
    }
    set dateExclusiveEnd(v) {
        this.setterImpl(11, v, 'dateExclusiveEnd');
    }
    /**
     *
     *
     * @type {DateExclusiveEnd}
     */
    get dateExclusiveEndEqualNotAllowed() {
        return this.data[12];
    }
    set dateExclusiveEndEqualNotAllowed(v) {
        this.setterImpl(12, v, 'dateExclusiveEndEqualNotAllowed');
    }
    /**
     *
     *
     * @type {Minutes}
     */
    get minutes() {
        return this.data[13];
    }
    set minutes(v) {
        this.setterImpl(13, v, 'minutes');
    }
    /**
     *
     *
     * @type {Minutes}
     */
    get minutesEqualNotAllowed() {
        return this.data[14];
    }
    set minutesEqualNotAllowed(v) {
        this.setterImpl(14, v, 'minutesEqualNotAllowed');
    }
    /**
     *
     *
     * @type {Hours}
     */
    get hours() {
        return this.data[15];
    }
    set hours(v) {
        this.setterImpl(15, v, 'hours');
    }
    /**
     *
     *
     * @type {Hours}
     */
    get hoursEqualNotAllowed() {
        return this.data[16];
    }
    set hoursEqualNotAllowed(v) {
        this.setterImpl(16, v, 'hoursEqualNotAllowed');
    }
    /**
     *
     *
     * @type {Days}
     */
    get days() {
        return this.data[17];
    }
    set days(v) {
        this.setterImpl(17, v, 'days');
    }
    /**
     *
     *
     * @type {Days}
     */
    get daysEqualNotAllowed() {
        return this.data[18];
    }
    set daysEqualNotAllowed(v) {
        this.setterImpl(18, v, 'daysEqualNotAllowed');
    }
    /**
     *
     *
     * @type {Months}
     */
    get months() {
        return this.data[19];
    }
    set months(v) {
        this.setterImpl(19, v, 'months');
    }
    /**
     *
     *
     * @type {Months}
     */
    get monthsEqualNotAllowed() {
        return this.data[20];
    }
    set monthsEqualNotAllowed(v) {
        this.setterImpl(20, v, 'monthsEqualNotAllowed');
    }
    /**
     *
     *
     * @type {Years}
     */
    get years() {
        return this.data[21];
    }
    set years(v) {
        this.setterImpl(21, v, 'years');
    }
    /**
     *
     *
     * @type {Years}
     */
    get yearsEqualNotAllowed() {
        return this.data[22];
    }
    set yearsEqualNotAllowed(v) {
        this.setterImpl(22, v, 'yearsEqualNotAllowed');
    }
    /**
     *
     *
     * @type {Duration}
     */
    get duration() {
        return this.data[23];
    }
    set duration(v) {
        this.setterImpl(23, v, 'duration');
    }
    /**
     *
     *
     * @type {Duration}
     */
    get durationEqualNotAllowed() {
        return this.data[24];
    }
    set durationEqualNotAllowed(v) {
        this.setterImpl(24, v, 'durationEqualNotAllowed');
    }
    /**
     *
     *
     * @type {LocalTime}
     */
    get localTime() {
        return this.data[25];
    }
    set localTime(v) {
        this.setterImpl(25, v, 'localTime');
    }
    /**
     *
     *
     * @type {LocalTime}
     */
    get localTimeEqualNotAllowed() {
        return this.data[26];
    }
    set localTimeEqualNotAllowed(v) {
        this.setterImpl(26, v, 'localTimeEqualNotAllowed');
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 27);
            data[1] = 5;
            data[2] = 5;
            data[3] = 5;
            data[4] = 7;
            data[5] = 5;
            data[6] = 7;
            data[7] = 1577833200000;
            data[8] = 1605135600000;
            data[9] = 1577833200000;
            data[10] = 1605135600000;
            data[11] = 1577833200000;
            data[12] = 1605135600000;
            data[13] = 5;
            data[14] = 7;
            data[15] = 5;
            data[16] = 7;
            data[17] = 5;
            data[18] = 7;
            data[19] = 5;
            data[20] = 5;
            data[21] = 5;
            data[22] = 5;
            data[23] = 5;
            data[24] = 7;
            data[25] = 1800000;
            data[26] = 3600000;
        }
        // propagate new raw data to children
    }
    get dni() {
        return '183';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '183', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class StoryBookApiValidationsMinFailsCompareNode extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, StoryBookApiValidationsMinFailsCompareNode);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'compareNode',
            id: 'VALIDATIONS_MIN_FAILS_COMPARE_NODE',
        });
        this.attributeInfoNumberComparedNode = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'numberComparedNode',
            id: 'VALIDATIONS_MIN_FAILS_COMPARE_NODE_NUMBER_COMPARED_NODE',
            primitiveType: PApiPrimitiveTypes.number,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.maxDecimalPlacesCount(0, PApiPrimitiveTypes.number, undefined);
                    },
                ];
            },
        });
        this.attributeInfoNumber = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'number',
            id: 'VALIDATIONS_MIN_FAILS_COMPARE_NODE_NUMBER',
            primitiveType: PApiPrimitiveTypes.number,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(() => this.numberComparedNode, true, PApiPrimitiveTypes.number, 'VALIDATIONS_MIN_FAILS_COMPARE_NODE_NUMBER_COMPARED_NODE', undefined);
                        return null;
                    },
                    () => {
                        return this.api.validators.maxDecimalPlacesCount(0, PApiPrimitiveTypes.number, undefined);
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Diese Eingabe darf nicht kleiner sein als »VALIDATIONS_MIN_FAILS_COMPARE_NODE_NUMBER_COMPARED_NODE«.',
            }
        });
        this.attributeInfoIntegerComparedNode = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'integerComparedNode',
            id: 'VALIDATIONS_MIN_FAILS_COMPARE_NODE_INTEGER_COMPARED_NODE',
            primitiveType: PApiPrimitiveTypes.Integer,
        });
        this.attributeInfoInteger = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'integer',
            id: 'VALIDATIONS_MIN_FAILS_COMPARE_NODE_INTEGER',
            primitiveType: PApiPrimitiveTypes.Integer,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(() => this.integerComparedNode, true, PApiPrimitiveTypes.Integer, 'VALIDATIONS_MIN_FAILS_COMPARE_NODE_INTEGER_COMPARED_NODE', undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Diese Eingabe darf nicht kleiner sein als »VALIDATIONS_MIN_FAILS_COMPARE_NODE_INTEGER_COMPARED_NODE«.',
            }
        });
        this.attributeInfoCurrencyComparedNode = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'currencyComparedNode',
            id: 'VALIDATIONS_MIN_FAILS_COMPARE_NODE_CURRENCY_COMPARED_NODE',
            primitiveType: PApiPrimitiveTypes.Currency,
        });
        this.attributeInfoCurrency = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'currency',
            id: 'VALIDATIONS_MIN_FAILS_COMPARE_NODE_CURRENCY',
            primitiveType: PApiPrimitiveTypes.Currency,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(() => this.currencyComparedNode, true, PApiPrimitiveTypes.Currency, 'VALIDATIONS_MIN_FAILS_COMPARE_NODE_CURRENCY_COMPARED_NODE', undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Diese Eingabe darf nicht kleiner sein als »VALIDATIONS_MIN_FAILS_COMPARE_NODE_CURRENCY_COMPARED_NODE«.',
            }
        });
        this.attributeInfoDateTimeComparedNode = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'dateTimeComparedNode',
            id: 'VALIDATIONS_MIN_FAILS_COMPARE_NODE_DATE_TIME_COMPARED_NODE',
            primitiveType: PApiPrimitiveTypes.DateTime,
        });
        this.attributeInfoDateTime = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'dateTime',
            id: 'VALIDATIONS_MIN_FAILS_COMPARE_NODE_DATE_TIME',
            primitiveType: PApiPrimitiveTypes.DateTime,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(() => this.dateTimeComparedNode, true, PApiPrimitiveTypes.DateTime, 'VALIDATIONS_MIN_FAILS_COMPARE_NODE_DATE_TIME_COMPARED_NODE', undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Diese Eingabe darf nicht kleiner sein als »VALIDATIONS_MIN_FAILS_COMPARE_NODE_DATE_TIME_COMPARED_NODE«.',
            }
        });
        this.attributeInfoDateComparedNode = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'dateComparedNode',
            id: 'VALIDATIONS_MIN_FAILS_COMPARE_NODE_DATE_COMPARED_NODE',
            primitiveType: PApiPrimitiveTypes.Date,
        });
        this.attributeInfoDate = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'date',
            id: 'VALIDATIONS_MIN_FAILS_COMPARE_NODE_DATE',
            primitiveType: PApiPrimitiveTypes.Date,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(() => this.dateComparedNode, true, PApiPrimitiveTypes.Date, 'VALIDATIONS_MIN_FAILS_COMPARE_NODE_DATE_COMPARED_NODE', undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Diese Eingabe darf nicht kleiner sein als »VALIDATIONS_MIN_FAILS_COMPARE_NODE_DATE_COMPARED_NODE«.',
            }
        });
        this.attributeInfoDateExclusiveEndComparedNode = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'dateExclusiveEndComparedNode',
            id: 'VALIDATIONS_MIN_FAILS_COMPARE_NODE_DATE_EXCLUSIVE_END_COMPARED_NODE',
            primitiveType: PApiPrimitiveTypes.DateExclusiveEnd,
        });
        this.attributeInfoDateExclusiveEnd = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'dateExclusiveEnd',
            id: 'VALIDATIONS_MIN_FAILS_COMPARE_NODE_DATE_EXCLUSIVE_END',
            primitiveType: PApiPrimitiveTypes.DateExclusiveEnd,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(() => this.dateExclusiveEndComparedNode, true, PApiPrimitiveTypes.DateExclusiveEnd, 'VALIDATIONS_MIN_FAILS_COMPARE_NODE_DATE_EXCLUSIVE_END_COMPARED_NODE', undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Diese Eingabe darf nicht kleiner sein als »VALIDATIONS_MIN_FAILS_COMPARE_NODE_DATE_EXCLUSIVE_END_COMPARED_NODE«.',
            }
        });
        this.attributeInfoMinutesComparedNode = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'minutesComparedNode',
            id: 'VALIDATIONS_MIN_FAILS_COMPARE_NODE_MINUTES_COMPARED_NODE',
            primitiveType: PApiPrimitiveTypes.Minutes,
        });
        this.attributeInfoMinutes = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'minutes',
            id: 'VALIDATIONS_MIN_FAILS_COMPARE_NODE_MINUTES',
            primitiveType: PApiPrimitiveTypes.Minutes,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(() => this.minutesComparedNode, true, PApiPrimitiveTypes.Minutes, 'VALIDATIONS_MIN_FAILS_COMPARE_NODE_MINUTES_COMPARED_NODE', undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Diese Eingabe darf nicht kleiner sein als »VALIDATIONS_MIN_FAILS_COMPARE_NODE_MINUTES_COMPARED_NODE«.',
            }
        });
        this.attributeInfoHoursComparedNode = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'hoursComparedNode',
            id: 'VALIDATIONS_MIN_FAILS_COMPARE_NODE_HOURS_COMPARED_NODE',
            primitiveType: PApiPrimitiveTypes.Hours,
        });
        this.attributeInfoHours = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'hours',
            id: 'VALIDATIONS_MIN_FAILS_COMPARE_NODE_HOURS',
            primitiveType: PApiPrimitiveTypes.Hours,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(() => this.hoursComparedNode, true, PApiPrimitiveTypes.Hours, 'VALIDATIONS_MIN_FAILS_COMPARE_NODE_HOURS_COMPARED_NODE', undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Diese Eingabe darf nicht kleiner sein als »VALIDATIONS_MIN_FAILS_COMPARE_NODE_HOURS_COMPARED_NODE«.',
            }
        });
        this.attributeInfoDaysComparedNode = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'daysComparedNode',
            id: 'VALIDATIONS_MIN_FAILS_COMPARE_NODE_DAYS_COMPARED_NODE',
            primitiveType: PApiPrimitiveTypes.Days,
        });
        this.attributeInfoDays = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'days',
            id: 'VALIDATIONS_MIN_FAILS_COMPARE_NODE_DAYS',
            primitiveType: PApiPrimitiveTypes.Days,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(() => this.daysComparedNode, true, PApiPrimitiveTypes.Days, 'VALIDATIONS_MIN_FAILS_COMPARE_NODE_DAYS_COMPARED_NODE', undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Diese Eingabe darf nicht kleiner sein als »VALIDATIONS_MIN_FAILS_COMPARE_NODE_DAYS_COMPARED_NODE«.',
            }
        });
        this.attributeInfoMonthsComparedNode = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'monthsComparedNode',
            id: 'VALIDATIONS_MIN_FAILS_COMPARE_NODE_MONTHS_COMPARED_NODE',
            primitiveType: PApiPrimitiveTypes.Months,
        });
        this.attributeInfoMonths = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'months',
            id: 'VALIDATIONS_MIN_FAILS_COMPARE_NODE_MONTHS',
            primitiveType: PApiPrimitiveTypes.Months,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(() => this.monthsComparedNode, true, PApiPrimitiveTypes.Months, 'VALIDATIONS_MIN_FAILS_COMPARE_NODE_MONTHS_COMPARED_NODE', undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Diese Eingabe darf nicht kleiner sein als »VALIDATIONS_MIN_FAILS_COMPARE_NODE_MONTHS_COMPARED_NODE«.',
            }
        });
        this.attributeInfoYearsComparedNode = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'yearsComparedNode',
            id: 'VALIDATIONS_MIN_FAILS_COMPARE_NODE_YEARS_COMPARED_NODE',
            primitiveType: PApiPrimitiveTypes.Years,
        });
        this.attributeInfoYears = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'years',
            id: 'VALIDATIONS_MIN_FAILS_COMPARE_NODE_YEARS',
            primitiveType: PApiPrimitiveTypes.Years,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(() => this.yearsComparedNode, true, PApiPrimitiveTypes.Years, 'VALIDATIONS_MIN_FAILS_COMPARE_NODE_YEARS_COMPARED_NODE', undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Diese Eingabe darf nicht kleiner sein als »VALIDATIONS_MIN_FAILS_COMPARE_NODE_YEARS_COMPARED_NODE«.',
            }
        });
        this.attributeInfoDurationComparedNode = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'durationComparedNode',
            id: 'VALIDATIONS_MIN_FAILS_COMPARE_NODE_DURATION_COMPARED_NODE',
            primitiveType: PApiPrimitiveTypes.Duration,
        });
        this.attributeInfoDuration = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'duration',
            id: 'VALIDATIONS_MIN_FAILS_COMPARE_NODE_DURATION',
            primitiveType: PApiPrimitiveTypes.Duration,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(() => this.durationComparedNode, true, PApiPrimitiveTypes.Duration, 'VALIDATIONS_MIN_FAILS_COMPARE_NODE_DURATION_COMPARED_NODE', undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Diese Eingabe darf nicht kleiner sein als »VALIDATIONS_MIN_FAILS_COMPARE_NODE_DURATION_COMPARED_NODE«.',
            }
        });
        this.attributeInfoLocalTimeComparedNode = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'localTimeComparedNode',
            id: 'VALIDATIONS_MIN_FAILS_COMPARE_NODE_LOCAL_TIME_COMPARED_NODE',
            primitiveType: PApiPrimitiveTypes.LocalTime,
        });
        this.attributeInfoLocalTime = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'localTime',
            id: 'VALIDATIONS_MIN_FAILS_COMPARE_NODE_LOCAL_TIME',
            primitiveType: PApiPrimitiveTypes.LocalTime,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(() => this.localTimeComparedNode, true, PApiPrimitiveTypes.LocalTime, 'VALIDATIONS_MIN_FAILS_COMPARE_NODE_LOCAL_TIME_COMPARED_NODE', undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Diese Eingabe darf nicht kleiner sein als »VALIDATIONS_MIN_FAILS_COMPARE_NODE_LOCAL_TIME_COMPARED_NODE«.',
            }
        });
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *
     *
     * @type {number}
     */
    get numberComparedNode() {
        return this.data[1];
    }
    set numberComparedNode(v) {
        this.setterImpl(1, v, 'numberComparedNode');
    }
    /**
     *
     *
     * @type {number}
     */
    get number() {
        return this.data[2];
    }
    set number(v) {
        this.setterImpl(2, v, 'number');
    }
    /**
     *
     *
     * @type {Integer}
     */
    get integerComparedNode() {
        return this.data[3];
    }
    set integerComparedNode(v) {
        this.setterImpl(3, v, 'integerComparedNode');
    }
    /**
     *
     *
     * @type {Integer}
     */
    get integer() {
        return this.data[4];
    }
    set integer(v) {
        this.setterImpl(4, v, 'integer');
    }
    /**
     *
     *
     * @type {Currency}
     */
    get currencyComparedNode() {
        return this.data[5];
    }
    set currencyComparedNode(v) {
        this.setterImpl(5, v, 'currencyComparedNode');
    }
    /**
     *
     *
     * @type {Currency}
     */
    get currency() {
        return this.data[6];
    }
    set currency(v) {
        this.setterImpl(6, v, 'currency');
    }
    /**
     *
     *
     * @type {DateTime}
     */
    get dateTimeComparedNode() {
        return this.data[7];
    }
    set dateTimeComparedNode(v) {
        this.setterImpl(7, v, 'dateTimeComparedNode');
    }
    /**
     *
     *
     * @type {DateTime}
     */
    get dateTime() {
        return this.data[8];
    }
    set dateTime(v) {
        this.setterImpl(8, v, 'dateTime');
    }
    /**
     *
     *
     * @type {Date}
     */
    get dateComparedNode() {
        return this.data[9];
    }
    set dateComparedNode(v) {
        this.setterImpl(9, v, 'dateComparedNode');
    }
    /**
     *
     *
     * @type {Date}
     */
    get date() {
        return this.data[10];
    }
    set date(v) {
        this.setterImpl(10, v, 'date');
    }
    /**
     *
     *
     * @type {DateExclusiveEnd}
     */
    get dateExclusiveEndComparedNode() {
        return this.data[11];
    }
    set dateExclusiveEndComparedNode(v) {
        this.setterImpl(11, v, 'dateExclusiveEndComparedNode');
    }
    /**
     *
     *
     * @type {DateExclusiveEnd}
     */
    get dateExclusiveEnd() {
        return this.data[12];
    }
    set dateExclusiveEnd(v) {
        this.setterImpl(12, v, 'dateExclusiveEnd');
    }
    /**
     *
     *
     * @type {Minutes}
     */
    get minutesComparedNode() {
        return this.data[13];
    }
    set minutesComparedNode(v) {
        this.setterImpl(13, v, 'minutesComparedNode');
    }
    /**
     *
     *
     * @type {Minutes}
     */
    get minutes() {
        return this.data[14];
    }
    set minutes(v) {
        this.setterImpl(14, v, 'minutes');
    }
    /**
     *
     *
     * @type {Hours}
     */
    get hoursComparedNode() {
        return this.data[15];
    }
    set hoursComparedNode(v) {
        this.setterImpl(15, v, 'hoursComparedNode');
    }
    /**
     *
     *
     * @type {Hours}
     */
    get hours() {
        return this.data[16];
    }
    set hours(v) {
        this.setterImpl(16, v, 'hours');
    }
    /**
     *
     *
     * @type {Days}
     */
    get daysComparedNode() {
        return this.data[17];
    }
    set daysComparedNode(v) {
        this.setterImpl(17, v, 'daysComparedNode');
    }
    /**
     *
     *
     * @type {Days}
     */
    get days() {
        return this.data[18];
    }
    set days(v) {
        this.setterImpl(18, v, 'days');
    }
    /**
     *
     *
     * @type {Months}
     */
    get monthsComparedNode() {
        return this.data[19];
    }
    set monthsComparedNode(v) {
        this.setterImpl(19, v, 'monthsComparedNode');
    }
    /**
     *
     *
     * @type {Months}
     */
    get months() {
        return this.data[20];
    }
    set months(v) {
        this.setterImpl(20, v, 'months');
    }
    /**
     *
     *
     * @type {Years}
     */
    get yearsComparedNode() {
        return this.data[21];
    }
    set yearsComparedNode(v) {
        this.setterImpl(21, v, 'yearsComparedNode');
    }
    /**
     *
     *
     * @type {Years}
     */
    get years() {
        return this.data[22];
    }
    set years(v) {
        this.setterImpl(22, v, 'years');
    }
    /**
     *
     *
     * @type {Duration}
     */
    get durationComparedNode() {
        return this.data[23];
    }
    set durationComparedNode(v) {
        this.setterImpl(23, v, 'durationComparedNode');
    }
    /**
     *
     *
     * @type {Duration}
     */
    get duration() {
        return this.data[24];
    }
    set duration(v) {
        this.setterImpl(24, v, 'duration');
    }
    /**
     *
     *
     * @type {LocalTime}
     */
    get localTimeComparedNode() {
        return this.data[25];
    }
    set localTimeComparedNode(v) {
        this.setterImpl(25, v, 'localTimeComparedNode');
    }
    /**
     *
     *
     * @type {LocalTime}
     */
    get localTime() {
        return this.data[26];
    }
    set localTime(v) {
        this.setterImpl(26, v, 'localTime');
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 27);
            data[1] = 7;
            data[2] = 5;
            data[3] = 7;
            data[4] = 5;
            data[5] = 7;
            data[6] = 5;
            data[7] = 1577919600000;
            data[8] = 1577833200000;
            data[9] = 1577919600000;
            data[10] = 1577833200000;
            data[11] = 1577919600000;
            data[12] = 1577833200000;
            data[13] = 7;
            data[14] = 5;
            data[15] = 7;
            data[16] = 5;
            data[17] = 7;
            data[18] = 5;
            data[19] = 7;
            data[20] = 5;
            data[21] = 7;
            data[22] = 5;
            data[23] = 7;
            data[24] = 5;
            data[25] = 3600000;
            data[26] = 1800000;
        }
        // propagate new raw data to children
    }
    get dni() {
        return '184';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '184', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class StoryBookApiValidationsMax extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, StoryBookApiValidationsMax);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'max',
            id: 'VALIDATIONS_MAX',
        });
        this.validWrapper = new StoryBookApiValidationsMaxValid(this.api);
        this.failsWrapper = new StoryBookApiValidationsMaxFails(this.api);
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
        this.validWrapper.parent = this;
        this.failsWrapper.parent = this;
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *
     */
    get valid() {
        return this.validWrapper;
    }
    set validTestSetter(v) {
        this.setterImpl(1, v.rawData, 'valid', () => { this.validWrapper = v; });
    }
    /**
     *
     */
    get fails() {
        return this.failsWrapper;
    }
    set failsTestSetter(v) {
        this.setterImpl(2, v.rawData, 'fails', () => { this.failsWrapper = v; });
    }
    _fixIds(_idReplacements) {
        this.validWrapper._fixIds(_idReplacements);
        this.failsWrapper._fixIds(_idReplacements);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 3);
            if (data[1] === null)
                data[1] = Meta.createNewObject(false);
            if (data[2] === null)
                data[2] = Meta.createNewObject(false);
        }
        // propagate new raw data to children
        this.validWrapper._updateRawData(data ? data[1] : null, generateMissingData);
        this.failsWrapper._updateRawData(data ? data[2] : null, generateMissingData);
    }
    get dni() {
        return '65';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '65', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class StoryBookApiValidationsMaxValid extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, StoryBookApiValidationsMaxValid);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'valid',
            id: 'VALIDATIONS_MAX_VALID',
        });
        this.compareConstWrapper = new StoryBookApiValidationsMaxValidCompareConst(this.api);
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
        this.compareConstWrapper.parent = this;
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *
     */
    get compareConst() {
        return this.compareConstWrapper;
    }
    set compareConstTestSetter(v) {
        this.setterImpl(1, v.rawData, 'compareConst', () => { this.compareConstWrapper = v; });
    }
    _fixIds(_idReplacements) {
        this.compareConstWrapper._fixIds(_idReplacements);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 2);
            if (data[1] === null)
                data[1] = Meta.createNewObject(false);
        }
        // propagate new raw data to children
        this.compareConstWrapper._updateRawData(data ? data[1] : null, generateMissingData);
    }
    get dni() {
        return '237';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '237', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class StoryBookApiValidationsMaxValidCompareConst extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, StoryBookApiValidationsMaxValidCompareConst);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'compareConst',
            id: 'VALIDATIONS_MAX_VALID_COMPARE_CONST',
        });
        this.attributeInfoNumberIsEqual = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'numberIsEqual',
            id: 'VALIDATIONS_MAX_VALID_COMPARE_CONST_NUMBER_IS_EQUAL',
            primitiveType: PApiPrimitiveTypes.number,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(5, true, PApiPrimitiveTypes.number, undefined, undefined);
                        return null;
                    },
                    () => {
                        return this.api.validators.maxDecimalPlacesCount(0, PApiPrimitiveTypes.number, undefined);
                    },
                ];
            },
        });
        this.attributeInfoNumberThisIsNull = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'numberThisIsNull',
            id: 'VALIDATIONS_MAX_VALID_COMPARE_CONST_NUMBER_THIS_IS_NULL',
            primitiveType: PApiPrimitiveTypes.number,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(5, true, PApiPrimitiveTypes.number, undefined, undefined);
                        return null;
                    },
                    () => {
                        return this.api.validators.maxDecimalPlacesCount(0, PApiPrimitiveTypes.number, undefined);
                    },
                ];
            },
        });
        this.attributeInfoNumberOtherIsNull = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'numberOtherIsNull',
            id: 'VALIDATIONS_MAX_VALID_COMPARE_CONST_NUMBER_OTHER_IS_NULL',
            primitiveType: PApiPrimitiveTypes.number,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(null, true, PApiPrimitiveTypes.number, undefined, undefined);
                        return null;
                    },
                    () => {
                        return this.api.validators.maxDecimalPlacesCount(0, PApiPrimitiveTypes.number, undefined);
                    },
                ];
            },
        });
        this.attributeInfoIntegerIsEqual = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'integerIsEqual',
            id: 'VALIDATIONS_MAX_VALID_COMPARE_CONST_INTEGER_IS_EQUAL',
            primitiveType: PApiPrimitiveTypes.Integer,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(5, true, PApiPrimitiveTypes.Integer, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoIntegerThisIsNull = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'integerThisIsNull',
            id: 'VALIDATIONS_MAX_VALID_COMPARE_CONST_INTEGER_THIS_IS_NULL',
            primitiveType: PApiPrimitiveTypes.Integer,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(5, true, PApiPrimitiveTypes.Integer, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoIntegerOtherIsNull = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'integerOtherIsNull',
            id: 'VALIDATIONS_MAX_VALID_COMPARE_CONST_INTEGER_OTHER_IS_NULL',
            primitiveType: PApiPrimitiveTypes.Integer,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(null, true, PApiPrimitiveTypes.Integer, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoCurrencyIsEqual = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'currencyIsEqual',
            id: 'VALIDATIONS_MAX_VALID_COMPARE_CONST_CURRENCY_IS_EQUAL',
            primitiveType: PApiPrimitiveTypes.Currency,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(5, true, PApiPrimitiveTypes.Currency, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoCurrencyThisIsNull = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'currencyThisIsNull',
            id: 'VALIDATIONS_MAX_VALID_COMPARE_CONST_CURRENCY_THIS_IS_NULL',
            primitiveType: PApiPrimitiveTypes.Currency,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(5, true, PApiPrimitiveTypes.Currency, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoCurrencyOtherIsNull = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'currencyOtherIsNull',
            id: 'VALIDATIONS_MAX_VALID_COMPARE_CONST_CURRENCY_OTHER_IS_NULL',
            primitiveType: PApiPrimitiveTypes.Currency,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.min(null, true, PApiPrimitiveTypes.Currency, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoDateTimeIsEqual = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'dateTimeIsEqual',
            id: 'VALIDATIONS_MAX_VALID_COMPARE_CONST_DATE_TIME_IS_EQUAL',
            primitiveType: PApiPrimitiveTypes.DateTime,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(1577919600000, true, PApiPrimitiveTypes.DateTime, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoDateTimeThisIsNull = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'dateTimeThisIsNull',
            id: 'VALIDATIONS_MAX_VALID_COMPARE_CONST_DATE_TIME_THIS_IS_NULL',
            primitiveType: PApiPrimitiveTypes.DateTime,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(1577919600000, true, PApiPrimitiveTypes.DateTime, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoDateTimeOtherIsNull = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'dateTimeOtherIsNull',
            id: 'VALIDATIONS_MAX_VALID_COMPARE_CONST_DATE_TIME_OTHER_IS_NULL',
            primitiveType: PApiPrimitiveTypes.DateTime,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(null, true, PApiPrimitiveTypes.DateTime, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoDateIsEqual = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'dateIsEqual',
            id: 'VALIDATIONS_MAX_VALID_COMPARE_CONST_DATE_IS_EQUAL',
            primitiveType: PApiPrimitiveTypes.Date,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(1577919600000, true, PApiPrimitiveTypes.Date, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoDateThisIsNull = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'dateThisIsNull',
            id: 'VALIDATIONS_MAX_VALID_COMPARE_CONST_DATE_THIS_IS_NULL',
            primitiveType: PApiPrimitiveTypes.Date,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(1577919600000, true, PApiPrimitiveTypes.Date, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoDateOtherIsNull = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'dateOtherIsNull',
            id: 'VALIDATIONS_MAX_VALID_COMPARE_CONST_DATE_OTHER_IS_NULL',
            primitiveType: PApiPrimitiveTypes.Date,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(null, true, PApiPrimitiveTypes.Date, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoDateExclusiveEndIsEqual = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'dateExclusiveEndIsEqual',
            id: 'VALIDATIONS_MAX_VALID_COMPARE_CONST_DATE_EXCLUSIVE_END_IS_EQUAL',
            primitiveType: PApiPrimitiveTypes.DateExclusiveEnd,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(1577919600000, true, PApiPrimitiveTypes.DateExclusiveEnd, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoDateExclusiveEndThisIsNull = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'dateExclusiveEndThisIsNull',
            id: 'VALIDATIONS_MAX_VALID_COMPARE_CONST_DATE_EXCLUSIVE_END_THIS_IS_NULL',
            primitiveType: PApiPrimitiveTypes.DateExclusiveEnd,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(1577919600000, true, PApiPrimitiveTypes.DateExclusiveEnd, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoDateExclusiveEndOtherIsNull = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'dateExclusiveEndOtherIsNull',
            id: 'VALIDATIONS_MAX_VALID_COMPARE_CONST_DATE_EXCLUSIVE_END_OTHER_IS_NULL',
            primitiveType: PApiPrimitiveTypes.DateExclusiveEnd,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(null, true, PApiPrimitiveTypes.DateExclusiveEnd, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoMinutesIsEqual = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'minutesIsEqual',
            id: 'VALIDATIONS_MAX_VALID_COMPARE_CONST_MINUTES_IS_EQUAL',
            primitiveType: PApiPrimitiveTypes.Minutes,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(5, true, PApiPrimitiveTypes.Minutes, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoMinutesThisIsNull = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'minutesThisIsNull',
            id: 'VALIDATIONS_MAX_VALID_COMPARE_CONST_MINUTES_THIS_IS_NULL',
            primitiveType: PApiPrimitiveTypes.Minutes,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(5, true, PApiPrimitiveTypes.Minutes, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoMinutesOtherIsNull = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'minutesOtherIsNull',
            id: 'VALIDATIONS_MAX_VALID_COMPARE_CONST_MINUTES_OTHER_IS_NULL',
            primitiveType: PApiPrimitiveTypes.Minutes,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(null, true, PApiPrimitiveTypes.Minutes, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoHoursIsEqual = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'hoursIsEqual',
            id: 'VALIDATIONS_MAX_VALID_COMPARE_CONST_HOURS_IS_EQUAL',
            primitiveType: PApiPrimitiveTypes.Hours,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(5, true, PApiPrimitiveTypes.Hours, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoHoursThisIsNull = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'hoursThisIsNull',
            id: 'VALIDATIONS_MAX_VALID_COMPARE_CONST_HOURS_THIS_IS_NULL',
            primitiveType: PApiPrimitiveTypes.Hours,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(5, true, PApiPrimitiveTypes.Hours, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoHoursOtherIsNull = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'hoursOtherIsNull',
            id: 'VALIDATIONS_MAX_VALID_COMPARE_CONST_HOURS_OTHER_IS_NULL',
            primitiveType: PApiPrimitiveTypes.Hours,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(null, true, PApiPrimitiveTypes.Hours, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoDaysIsEqual = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'daysIsEqual',
            id: 'VALIDATIONS_MAX_VALID_COMPARE_CONST_DAYS_IS_EQUAL',
            primitiveType: PApiPrimitiveTypes.Days,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(5, true, PApiPrimitiveTypes.Days, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoDaysThisIsNull = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'daysThisIsNull',
            id: 'VALIDATIONS_MAX_VALID_COMPARE_CONST_DAYS_THIS_IS_NULL',
            primitiveType: PApiPrimitiveTypes.Days,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(5, true, PApiPrimitiveTypes.Days, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoDaysOtherIsNull = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'daysOtherIsNull',
            id: 'VALIDATIONS_MAX_VALID_COMPARE_CONST_DAYS_OTHER_IS_NULL',
            primitiveType: PApiPrimitiveTypes.Days,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(null, true, PApiPrimitiveTypes.Days, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoMonthsIsEqual = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'monthsIsEqual',
            id: 'VALIDATIONS_MAX_VALID_COMPARE_CONST_MONTHS_IS_EQUAL',
            primitiveType: PApiPrimitiveTypes.Months,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(5, true, PApiPrimitiveTypes.Months, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoMonthsThisIsNull = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'monthsThisIsNull',
            id: 'VALIDATIONS_MAX_VALID_COMPARE_CONST_MONTHS_THIS_IS_NULL',
            primitiveType: PApiPrimitiveTypes.Months,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(5, true, PApiPrimitiveTypes.Months, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoMonthsOtherIsNull = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'monthsOtherIsNull',
            id: 'VALIDATIONS_MAX_VALID_COMPARE_CONST_MONTHS_OTHER_IS_NULL',
            primitiveType: PApiPrimitiveTypes.Months,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(null, true, PApiPrimitiveTypes.Months, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoYearsIsEqual = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'yearsIsEqual',
            id: 'VALIDATIONS_MAX_VALID_COMPARE_CONST_YEARS_IS_EQUAL',
            primitiveType: PApiPrimitiveTypes.Years,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(5, true, PApiPrimitiveTypes.Years, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoYearsThisIsNull = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'yearsThisIsNull',
            id: 'VALIDATIONS_MAX_VALID_COMPARE_CONST_YEARS_THIS_IS_NULL',
            primitiveType: PApiPrimitiveTypes.Years,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(5, true, PApiPrimitiveTypes.Years, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoYearsOtherIsNull = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'yearsOtherIsNull',
            id: 'VALIDATIONS_MAX_VALID_COMPARE_CONST_YEARS_OTHER_IS_NULL',
            primitiveType: PApiPrimitiveTypes.Years,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(null, true, PApiPrimitiveTypes.Years, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoDurationIsEqual = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'durationIsEqual',
            id: 'VALIDATIONS_MAX_VALID_COMPARE_CONST_DURATION_IS_EQUAL',
            primitiveType: PApiPrimitiveTypes.Duration,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(5, true, PApiPrimitiveTypes.Duration, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoDurationThisIsNull = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'durationThisIsNull',
            id: 'VALIDATIONS_MAX_VALID_COMPARE_CONST_DURATION_THIS_IS_NULL',
            primitiveType: PApiPrimitiveTypes.Duration,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(5, true, PApiPrimitiveTypes.Duration, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoDurationOtherIsNull = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'durationOtherIsNull',
            id: 'VALIDATIONS_MAX_VALID_COMPARE_CONST_DURATION_OTHER_IS_NULL',
            primitiveType: PApiPrimitiveTypes.Duration,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(null, true, PApiPrimitiveTypes.Duration, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoLocalTimeIsEqual = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'localTimeIsEqual',
            id: 'VALIDATIONS_MAX_VALID_COMPARE_CONST_LOCAL_TIME_IS_EQUAL',
            primitiveType: PApiPrimitiveTypes.LocalTime,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(3600000, true, PApiPrimitiveTypes.LocalTime, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoLocalTimeThisIsNull = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'localTimeThisIsNull',
            id: 'VALIDATIONS_MAX_VALID_COMPARE_CONST_LOCAL_TIME_THIS_IS_NULL',
            primitiveType: PApiPrimitiveTypes.LocalTime,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(3600000, true, PApiPrimitiveTypes.LocalTime, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this.attributeInfoLocalTimeOtherIsNull = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'localTimeOtherIsNull',
            id: 'VALIDATIONS_MAX_VALID_COMPARE_CONST_LOCAL_TIME_OTHER_IS_NULL',
            primitiveType: PApiPrimitiveTypes.LocalTime,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(null, true, PApiPrimitiveTypes.LocalTime, undefined, undefined);
                        return null;
                    },
                ];
            },
        });
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *
     *
     * @type {number}
     */
    get numberIsEqual() {
        return this.data[1];
    }
    set numberIsEqual(v) {
        this.setterImpl(1, v, 'numberIsEqual');
    }
    /**
     *
     *
     * @type {number}
     */
    get numberThisIsNull() {
        return this.data[2];
    }
    set numberThisIsNull(v) {
        this.setterImpl(2, v, 'numberThisIsNull');
    }
    /**
     *
     *
     * @type {number}
     */
    get numberOtherIsNull() {
        return this.data[3];
    }
    set numberOtherIsNull(v) {
        this.setterImpl(3, v, 'numberOtherIsNull');
    }
    /**
     *
     *
     * @type {Integer}
     */
    get integerIsEqual() {
        return this.data[4];
    }
    set integerIsEqual(v) {
        this.setterImpl(4, v, 'integerIsEqual');
    }
    /**
     *
     *
     * @type {Integer}
     */
    get integerThisIsNull() {
        return this.data[5];
    }
    set integerThisIsNull(v) {
        this.setterImpl(5, v, 'integerThisIsNull');
    }
    /**
     *
     *
     * @type {Integer}
     */
    get integerOtherIsNull() {
        return this.data[6];
    }
    set integerOtherIsNull(v) {
        this.setterImpl(6, v, 'integerOtherIsNull');
    }
    /**
     *
     *
     * @type {Currency}
     */
    get currencyIsEqual() {
        return this.data[7];
    }
    set currencyIsEqual(v) {
        this.setterImpl(7, v, 'currencyIsEqual');
    }
    /**
     *
     *
     * @type {Currency}
     */
    get currencyThisIsNull() {
        return this.data[8];
    }
    set currencyThisIsNull(v) {
        this.setterImpl(8, v, 'currencyThisIsNull');
    }
    /**
     *
     *
     * @type {Currency}
     */
    get currencyOtherIsNull() {
        return this.data[9];
    }
    set currencyOtherIsNull(v) {
        this.setterImpl(9, v, 'currencyOtherIsNull');
    }
    /**
     *
     *
     * @type {DateTime}
     */
    get dateTimeIsEqual() {
        return this.data[10];
    }
    set dateTimeIsEqual(v) {
        this.setterImpl(10, v, 'dateTimeIsEqual');
    }
    /**
     *
     *
     * @type {DateTime}
     */
    get dateTimeThisIsNull() {
        return this.data[11];
    }
    set dateTimeThisIsNull(v) {
        this.setterImpl(11, v, 'dateTimeThisIsNull');
    }
    /**
     *
     *
     * @type {DateTime}
     */
    get dateTimeOtherIsNull() {
        return this.data[12];
    }
    set dateTimeOtherIsNull(v) {
        this.setterImpl(12, v, 'dateTimeOtherIsNull');
    }
    /**
     *
     *
     * @type {Date}
     */
    get dateIsEqual() {
        return this.data[13];
    }
    set dateIsEqual(v) {
        this.setterImpl(13, v, 'dateIsEqual');
    }
    /**
     *
     *
     * @type {Date}
     */
    get dateThisIsNull() {
        return this.data[14];
    }
    set dateThisIsNull(v) {
        this.setterImpl(14, v, 'dateThisIsNull');
    }
    /**
     *
     *
     * @type {Date}
     */
    get dateOtherIsNull() {
        return this.data[15];
    }
    set dateOtherIsNull(v) {
        this.setterImpl(15, v, 'dateOtherIsNull');
    }
    /**
     *
     *
     * @type {DateExclusiveEnd}
     */
    get dateExclusiveEndIsEqual() {
        return this.data[16];
    }
    set dateExclusiveEndIsEqual(v) {
        this.setterImpl(16, v, 'dateExclusiveEndIsEqual');
    }
    /**
     *
     *
     * @type {DateExclusiveEnd}
     */
    get dateExclusiveEndThisIsNull() {
        return this.data[17];
    }
    set dateExclusiveEndThisIsNull(v) {
        this.setterImpl(17, v, 'dateExclusiveEndThisIsNull');
    }
    /**
     *
     *
     * @type {DateExclusiveEnd}
     */
    get dateExclusiveEndOtherIsNull() {
        return this.data[18];
    }
    set dateExclusiveEndOtherIsNull(v) {
        this.setterImpl(18, v, 'dateExclusiveEndOtherIsNull');
    }
    /**
     *
     *
     * @type {Minutes}
     */
    get minutesIsEqual() {
        return this.data[19];
    }
    set minutesIsEqual(v) {
        this.setterImpl(19, v, 'minutesIsEqual');
    }
    /**
     *
     *
     * @type {Minutes}
     */
    get minutesThisIsNull() {
        return this.data[20];
    }
    set minutesThisIsNull(v) {
        this.setterImpl(20, v, 'minutesThisIsNull');
    }
    /**
     *
     *
     * @type {Minutes}
     */
    get minutesOtherIsNull() {
        return this.data[21];
    }
    set minutesOtherIsNull(v) {
        this.setterImpl(21, v, 'minutesOtherIsNull');
    }
    /**
     *
     *
     * @type {Hours}
     */
    get hoursIsEqual() {
        return this.data[22];
    }
    set hoursIsEqual(v) {
        this.setterImpl(22, v, 'hoursIsEqual');
    }
    /**
     *
     *
     * @type {Hours}
     */
    get hoursThisIsNull() {
        return this.data[23];
    }
    set hoursThisIsNull(v) {
        this.setterImpl(23, v, 'hoursThisIsNull');
    }
    /**
     *
     *
     * @type {Hours}
     */
    get hoursOtherIsNull() {
        return this.data[24];
    }
    set hoursOtherIsNull(v) {
        this.setterImpl(24, v, 'hoursOtherIsNull');
    }
    /**
     *
     *
     * @type {Days}
     */
    get daysIsEqual() {
        return this.data[25];
    }
    set daysIsEqual(v) {
        this.setterImpl(25, v, 'daysIsEqual');
    }
    /**
     *
     *
     * @type {Days}
     */
    get daysThisIsNull() {
        return this.data[26];
    }
    set daysThisIsNull(v) {
        this.setterImpl(26, v, 'daysThisIsNull');
    }
    /**
     *
     *
     * @type {Days}
     */
    get daysOtherIsNull() {
        return this.data[27];
    }
    set daysOtherIsNull(v) {
        this.setterImpl(27, v, 'daysOtherIsNull');
    }
    /**
     *
     *
     * @type {Months}
     */
    get monthsIsEqual() {
        return this.data[28];
    }
    set monthsIsEqual(v) {
        this.setterImpl(28, v, 'monthsIsEqual');
    }
    /**
     *
     *
     * @type {Months}
     */
    get monthsThisIsNull() {
        return this.data[29];
    }
    set monthsThisIsNull(v) {
        this.setterImpl(29, v, 'monthsThisIsNull');
    }
    /**
     *
     *
     * @type {Months}
     */
    get monthsOtherIsNull() {
        return this.data[30];
    }
    set monthsOtherIsNull(v) {
        this.setterImpl(30, v, 'monthsOtherIsNull');
    }
    /**
     *
     *
     * @type {Years}
     */
    get yearsIsEqual() {
        return this.data[31];
    }
    set yearsIsEqual(v) {
        this.setterImpl(31, v, 'yearsIsEqual');
    }
    /**
     *
     *
     * @type {Years}
     */
    get yearsThisIsNull() {
        return this.data[32];
    }
    set yearsThisIsNull(v) {
        this.setterImpl(32, v, 'yearsThisIsNull');
    }
    /**
     *
     *
     * @type {Years}
     */
    get yearsOtherIsNull() {
        return this.data[33];
    }
    set yearsOtherIsNull(v) {
        this.setterImpl(33, v, 'yearsOtherIsNull');
    }
    /**
     *
     *
     * @type {Duration}
     */
    get durationIsEqual() {
        return this.data[34];
    }
    set durationIsEqual(v) {
        this.setterImpl(34, v, 'durationIsEqual');
    }
    /**
     *
     *
     * @type {Duration}
     */
    get durationThisIsNull() {
        return this.data[35];
    }
    set durationThisIsNull(v) {
        this.setterImpl(35, v, 'durationThisIsNull');
    }
    /**
     *
     *
     * @type {Duration}
     */
    get durationOtherIsNull() {
        return this.data[36];
    }
    set durationOtherIsNull(v) {
        this.setterImpl(36, v, 'durationOtherIsNull');
    }
    /**
     *
     *
     * @type {LocalTime}
     */
    get localTimeIsEqual() {
        return this.data[37];
    }
    set localTimeIsEqual(v) {
        this.setterImpl(37, v, 'localTimeIsEqual');
    }
    /**
     *
     *
     * @type {LocalTime}
     */
    get localTimeThisIsNull() {
        return this.data[38];
    }
    set localTimeThisIsNull(v) {
        this.setterImpl(38, v, 'localTimeThisIsNull');
    }
    /**
     *
     *
     * @type {LocalTime}
     */
    get localTimeOtherIsNull() {
        return this.data[39];
    }
    set localTimeOtherIsNull(v) {
        this.setterImpl(39, v, 'localTimeOtherIsNull');
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 40);
            data[1] = 5;
            data[3] = 5;
            data[4] = 5;
            data[6] = 5;
            data[7] = 5;
            data[9] = 5;
            data[10] = 1577919600000;
            data[12] = 1577919600000;
            data[13] = 1577919600000;
            data[15] = 1577919600000;
            data[16] = 1577919600000;
            data[18] = 1577919600000;
            data[19] = 5;
            data[21] = 5;
            data[22] = 5;
            data[24] = 5;
            data[25] = 5;
            data[27] = 5;
            data[28] = 5;
            data[30] = 5;
            data[31] = 5;
            data[33] = 5;
            data[34] = 5;
            data[36] = 5;
            data[37] = 3600000;
            data[39] = 3600000;
        }
        // propagate new raw data to children
    }
    get dni() {
        return '239';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '239', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class StoryBookApiValidationsMaxFails extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, StoryBookApiValidationsMaxFails);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'fails',
            id: 'VALIDATIONS_MAX_FAILS',
        });
        this.compareConstWrapper = new StoryBookApiValidationsMaxFailsCompareConst(this.api);
        this.compareNodeWrapper = new StoryBookApiValidationsMaxFailsCompareNode(this.api);
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
        this.compareConstWrapper.parent = this;
        this.compareNodeWrapper.parent = this;
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *
     */
    get compareConst() {
        return this.compareConstWrapper;
    }
    set compareConstTestSetter(v) {
        this.setterImpl(1, v.rawData, 'compareConst', () => { this.compareConstWrapper = v; });
    }
    /**
     *
     */
    get compareNode() {
        return this.compareNodeWrapper;
    }
    set compareNodeTestSetter(v) {
        this.setterImpl(2, v.rawData, 'compareNode', () => { this.compareNodeWrapper = v; });
    }
    _fixIds(_idReplacements) {
        this.compareConstWrapper._fixIds(_idReplacements);
        this.compareNodeWrapper._fixIds(_idReplacements);
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 3);
            if (data[1] === null)
                data[1] = Meta.createNewObject(false);
            if (data[2] === null)
                data[2] = Meta.createNewObject(false);
        }
        // propagate new raw data to children
        this.compareConstWrapper._updateRawData(data ? data[1] : null, generateMissingData);
        this.compareNodeWrapper._updateRawData(data ? data[2] : null, generateMissingData);
    }
    get dni() {
        return '238';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '238', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class StoryBookApiValidationsMaxFailsCompareConst extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, StoryBookApiValidationsMaxFailsCompareConst);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'compareConst',
            id: 'VALIDATIONS_MAX_FAILS_COMPARE_CONST',
        });
        this.attributeInfoNumber = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'number',
            id: 'VALIDATIONS_MAX_FAILS_COMPARE_CONST_NUMBER',
            primitiveType: PApiPrimitiveTypes.number,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(7.5, true, PApiPrimitiveTypes.number, undefined, undefined);
                        return null;
                    },
                    () => {
                        return this.api.validators.maxDecimalPlacesCount(0, PApiPrimitiveTypes.number, undefined);
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Bitte höchstens »7.5« eingeben.',
            }
        });
        this.attributeInfoNumberEqualNotAllowed = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'numberEqualNotAllowed',
            id: 'VALIDATIONS_MAX_FAILS_COMPARE_CONST_NUMBER_EQUAL_NOT_ALLOWED',
            primitiveType: PApiPrimitiveTypes.number,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(7.5, false, PApiPrimitiveTypes.number, undefined, undefined);
                        return null;
                    },
                    () => {
                        return this.api.validators.maxDecimalPlacesCount(1, PApiPrimitiveTypes.number, undefined);
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Bitte eine Zahl kleiner als »7.5« eingeben.',
            }
        });
        this.attributeInfoInteger = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'integer',
            id: 'VALIDATIONS_MAX_FAILS_COMPARE_CONST_INTEGER',
            primitiveType: PApiPrimitiveTypes.Integer,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(7, true, PApiPrimitiveTypes.Integer, undefined, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Bitte höchstens »7« eingeben.',
            }
        });
        this.attributeInfoIntegerEqualNotAllowed = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'integerEqualNotAllowed',
            id: 'VALIDATIONS_MAX_FAILS_COMPARE_CONST_INTEGER_EQUAL_NOT_ALLOWED',
            primitiveType: PApiPrimitiveTypes.Integer,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(7, false, PApiPrimitiveTypes.Integer, undefined, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Bitte eine Zahl kleiner als »7« eingeben.',
            }
        });
        this.attributeInfoCurrency = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'currency',
            id: 'VALIDATIONS_MAX_FAILS_COMPARE_CONST_CURRENCY',
            primitiveType: PApiPrimitiveTypes.Currency,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(7, true, PApiPrimitiveTypes.Currency, undefined, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Bitte höchstens »7,00 €« eingeben.',
            }
        });
        this.attributeInfoCurrencyEqualNotAllowed = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'currencyEqualNotAllowed',
            id: 'VALIDATIONS_MAX_FAILS_COMPARE_CONST_CURRENCY_EQUAL_NOT_ALLOWED',
            primitiveType: PApiPrimitiveTypes.Currency,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(7, false, PApiPrimitiveTypes.Currency, undefined, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Bitte eine Zahl kleiner als »7« eingeben.',
            }
        });
        this.attributeInfoDateTime = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'dateTime',
            id: 'VALIDATIONS_MAX_FAILS_COMPARE_CONST_DATE_TIME',
            primitiveType: PApiPrimitiveTypes.DateTime,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(1605135600000, true, PApiPrimitiveTypes.DateTime, undefined, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Bitte höchstens die Zeit »12.11.20, 00:00« eingeben.',
            }
        });
        this.attributeInfoDateTimeEqualNotAllowed = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'dateTimeEqualNotAllowed',
            id: 'VALIDATIONS_MAX_FAILS_COMPARE_CONST_DATE_TIME_EQUAL_NOT_ALLOWED',
            primitiveType: PApiPrimitiveTypes.DateTime,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(1605135600000, false, PApiPrimitiveTypes.DateTime, undefined, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Bitte eine Zeit früher als »12.11.20, 00:00« eingeben.',
            }
        });
        this.attributeInfoDate = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'date',
            id: 'VALIDATIONS_MAX_FAILS_COMPARE_CONST_DATE',
            primitiveType: PApiPrimitiveTypes.Date,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(1605135600000, true, PApiPrimitiveTypes.Date, undefined, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Bitte höchstens das Datum »12.11.2020« eingeben.',
            }
        });
        this.attributeInfoDateEqualNotAllowed = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'dateEqualNotAllowed',
            id: 'VALIDATIONS_MAX_FAILS_COMPARE_CONST_DATE_EQUAL_NOT_ALLOWED',
            primitiveType: PApiPrimitiveTypes.Date,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(1605135600000, false, PApiPrimitiveTypes.Date, undefined, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Bitte ein Datum früher als »12.11.2020« eingeben.',
            }
        });
        this.attributeInfoDateExclusiveEnd = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'dateExclusiveEnd',
            id: 'VALIDATIONS_MAX_FAILS_COMPARE_CONST_DATE_EXCLUSIVE_END',
            primitiveType: PApiPrimitiveTypes.DateExclusiveEnd,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(1605135600000, true, PApiPrimitiveTypes.DateExclusiveEnd, undefined, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Bitte höchstens das Datum »12.11.2020« eingeben.',
            }
        });
        this.attributeInfoDateExclusiveEndEqualNotAllowed = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'dateExclusiveEndEqualNotAllowed',
            id: 'VALIDATIONS_MAX_FAILS_COMPARE_CONST_DATE_EXCLUSIVE_END_EQUAL_NOT_ALLOWED',
            primitiveType: PApiPrimitiveTypes.DateExclusiveEnd,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(1605135600000, false, PApiPrimitiveTypes.DateExclusiveEnd, undefined, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Bitte ein Datum früher als »12.11.2020« eingeben.',
            }
        });
        this.attributeInfoMinutes = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'minutes',
            id: 'VALIDATIONS_MAX_FAILS_COMPARE_CONST_MINUTES',
            primitiveType: PApiPrimitiveTypes.Minutes,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(7, true, PApiPrimitiveTypes.Minutes, undefined, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Bitte höchstens »7« eingeben.',
            }
        });
        this.attributeInfoMinutesEqualNotAllowed = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'minutesEqualNotAllowed',
            id: 'VALIDATIONS_MAX_FAILS_COMPARE_CONST_MINUTES_EQUAL_NOT_ALLOWED',
            primitiveType: PApiPrimitiveTypes.Minutes,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(7, false, PApiPrimitiveTypes.Minutes, undefined, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Bitte eine Zahl kleiner als »7« eingeben.',
            }
        });
        this.attributeInfoHours = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'hours',
            id: 'VALIDATIONS_MAX_FAILS_COMPARE_CONST_HOURS',
            primitiveType: PApiPrimitiveTypes.Hours,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(7, true, PApiPrimitiveTypes.Hours, undefined, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Bitte höchstens »7« eingeben.',
            }
        });
        this.attributeInfoHoursEqualNotAllowed = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'hoursEqualNotAllowed',
            id: 'VALIDATIONS_MAX_FAILS_COMPARE_CONST_HOURS_EQUAL_NOT_ALLOWED',
            primitiveType: PApiPrimitiveTypes.Hours,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(7, false, PApiPrimitiveTypes.Hours, undefined, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Bitte eine Zahl kleiner als »7« eingeben.',
            }
        });
        this.attributeInfoDays = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'days',
            id: 'VALIDATIONS_MAX_FAILS_COMPARE_CONST_DAYS',
            primitiveType: PApiPrimitiveTypes.Days,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(7, true, PApiPrimitiveTypes.Days, undefined, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Bitte höchstens »7« eingeben.',
            }
        });
        this.attributeInfoDaysEqualNotAllowed = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'daysEqualNotAllowed',
            id: 'VALIDATIONS_MAX_FAILS_COMPARE_CONST_DAYS_EQUAL_NOT_ALLOWED',
            primitiveType: PApiPrimitiveTypes.Days,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(7, false, PApiPrimitiveTypes.Days, undefined, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Bitte eine Zahl kleiner als »7« eingeben.',
            }
        });
        this.attributeInfoMonths = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'months',
            id: 'VALIDATIONS_MAX_FAILS_COMPARE_CONST_MONTHS',
            primitiveType: PApiPrimitiveTypes.Months,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(7, true, PApiPrimitiveTypes.Months, undefined, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Bitte höchstens »7« eingeben.',
            }
        });
        this.attributeInfoMonthsEqualNotAllowed = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'monthsEqualNotAllowed',
            id: 'VALIDATIONS_MAX_FAILS_COMPARE_CONST_MONTHS_EQUAL_NOT_ALLOWED',
            primitiveType: PApiPrimitiveTypes.Months,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(7, false, PApiPrimitiveTypes.Months, undefined, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Bitte eine Zahl kleiner als »7« eingeben.',
            }
        });
        this.attributeInfoYears = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'years',
            id: 'VALIDATIONS_MAX_FAILS_COMPARE_CONST_YEARS',
            primitiveType: PApiPrimitiveTypes.Years,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(7, true, PApiPrimitiveTypes.Years, undefined, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Bitte höchstens »7« eingeben.',
            }
        });
        this.attributeInfoYearsEqualNotAllowed = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'yearsEqualNotAllowed',
            id: 'VALIDATIONS_MAX_FAILS_COMPARE_CONST_YEARS_EQUAL_NOT_ALLOWED',
            primitiveType: PApiPrimitiveTypes.Years,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(7, false, PApiPrimitiveTypes.Years, undefined, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Bitte eine Zahl kleiner als »7« eingeben.',
            }
        });
        this.attributeInfoDuration = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'duration',
            id: 'VALIDATIONS_MAX_FAILS_COMPARE_CONST_DURATION',
            primitiveType: PApiPrimitiveTypes.Duration,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(7, true, PApiPrimitiveTypes.Duration, undefined, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Bitte höchstens »7« eingeben.',
            }
        });
        this.attributeInfoDurationEqualNotAllowed = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'durationEqualNotAllowed',
            id: 'VALIDATIONS_MAX_FAILS_COMPARE_CONST_DURATION_EQUAL_NOT_ALLOWED',
            primitiveType: PApiPrimitiveTypes.Duration,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(7, false, PApiPrimitiveTypes.Duration, undefined, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Bitte eine Zahl kleiner als »7« eingeben.',
            }
        });
        this.attributeInfoLocalTime = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'localTime',
            id: 'VALIDATIONS_MAX_FAILS_COMPARE_CONST_LOCAL_TIME',
            primitiveType: PApiPrimitiveTypes.LocalTime,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(3600000, true, PApiPrimitiveTypes.LocalTime, undefined, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Bitte höchstens die Zeit »01:00« eingeben.',
            }
        });
        this.attributeInfoLocalTimeEqualNotAllowed = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'localTimeEqualNotAllowed',
            id: 'VALIDATIONS_MAX_FAILS_COMPARE_CONST_LOCAL_TIME_EQUAL_NOT_ALLOWED',
            primitiveType: PApiPrimitiveTypes.LocalTime,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(3600000, false, PApiPrimitiveTypes.LocalTime, undefined, undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Bitte eine Zeit früher als »01:00« eingeben.',
            }
        });
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *
     *
     * @type {number}
     */
    get number() {
        return this.data[1];
    }
    set number(v) {
        this.setterImpl(1, v, 'number');
    }
    /**
     *
     *
     * @type {number}
     */
    get numberEqualNotAllowed() {
        return this.data[2];
    }
    set numberEqualNotAllowed(v) {
        this.setterImpl(2, v, 'numberEqualNotAllowed');
    }
    /**
     *
     *
     * @type {Integer}
     */
    get integer() {
        return this.data[3];
    }
    set integer(v) {
        this.setterImpl(3, v, 'integer');
    }
    /**
     *
     *
     * @type {Integer}
     */
    get integerEqualNotAllowed() {
        return this.data[4];
    }
    set integerEqualNotAllowed(v) {
        this.setterImpl(4, v, 'integerEqualNotAllowed');
    }
    /**
     *
     *
     * @type {Currency}
     */
    get currency() {
        return this.data[5];
    }
    set currency(v) {
        this.setterImpl(5, v, 'currency');
    }
    /**
     *
     *
     * @type {Currency}
     */
    get currencyEqualNotAllowed() {
        return this.data[6];
    }
    set currencyEqualNotAllowed(v) {
        this.setterImpl(6, v, 'currencyEqualNotAllowed');
    }
    /**
     *
     *
     * @type {DateTime}
     */
    get dateTime() {
        return this.data[7];
    }
    set dateTime(v) {
        this.setterImpl(7, v, 'dateTime');
    }
    /**
     *
     *
     * @type {DateTime}
     */
    get dateTimeEqualNotAllowed() {
        return this.data[8];
    }
    set dateTimeEqualNotAllowed(v) {
        this.setterImpl(8, v, 'dateTimeEqualNotAllowed');
    }
    /**
     *
     *
     * @type {Date}
     */
    get date() {
        return this.data[9];
    }
    set date(v) {
        this.setterImpl(9, v, 'date');
    }
    /**
     *
     *
     * @type {Date}
     */
    get dateEqualNotAllowed() {
        return this.data[10];
    }
    set dateEqualNotAllowed(v) {
        this.setterImpl(10, v, 'dateEqualNotAllowed');
    }
    /**
     *
     *
     * @type {DateExclusiveEnd}
     */
    get dateExclusiveEnd() {
        return this.data[11];
    }
    set dateExclusiveEnd(v) {
        this.setterImpl(11, v, 'dateExclusiveEnd');
    }
    /**
     *
     *
     * @type {DateExclusiveEnd}
     */
    get dateExclusiveEndEqualNotAllowed() {
        return this.data[12];
    }
    set dateExclusiveEndEqualNotAllowed(v) {
        this.setterImpl(12, v, 'dateExclusiveEndEqualNotAllowed');
    }
    /**
     *
     *
     * @type {Minutes}
     */
    get minutes() {
        return this.data[13];
    }
    set minutes(v) {
        this.setterImpl(13, v, 'minutes');
    }
    /**
     *
     *
     * @type {Minutes}
     */
    get minutesEqualNotAllowed() {
        return this.data[14];
    }
    set minutesEqualNotAllowed(v) {
        this.setterImpl(14, v, 'minutesEqualNotAllowed');
    }
    /**
     *
     *
     * @type {Hours}
     */
    get hours() {
        return this.data[15];
    }
    set hours(v) {
        this.setterImpl(15, v, 'hours');
    }
    /**
     *
     *
     * @type {Hours}
     */
    get hoursEqualNotAllowed() {
        return this.data[16];
    }
    set hoursEqualNotAllowed(v) {
        this.setterImpl(16, v, 'hoursEqualNotAllowed');
    }
    /**
     *
     *
     * @type {Days}
     */
    get days() {
        return this.data[17];
    }
    set days(v) {
        this.setterImpl(17, v, 'days');
    }
    /**
     *
     *
     * @type {Days}
     */
    get daysEqualNotAllowed() {
        return this.data[18];
    }
    set daysEqualNotAllowed(v) {
        this.setterImpl(18, v, 'daysEqualNotAllowed');
    }
    /**
     *
     *
     * @type {Months}
     */
    get months() {
        return this.data[19];
    }
    set months(v) {
        this.setterImpl(19, v, 'months');
    }
    /**
     *
     *
     * @type {Months}
     */
    get monthsEqualNotAllowed() {
        return this.data[20];
    }
    set monthsEqualNotAllowed(v) {
        this.setterImpl(20, v, 'monthsEqualNotAllowed');
    }
    /**
     *
     *
     * @type {Years}
     */
    get years() {
        return this.data[21];
    }
    set years(v) {
        this.setterImpl(21, v, 'years');
    }
    /**
     *
     *
     * @type {Years}
     */
    get yearsEqualNotAllowed() {
        return this.data[22];
    }
    set yearsEqualNotAllowed(v) {
        this.setterImpl(22, v, 'yearsEqualNotAllowed');
    }
    /**
     *
     *
     * @type {Duration}
     */
    get duration() {
        return this.data[23];
    }
    set duration(v) {
        this.setterImpl(23, v, 'duration');
    }
    /**
     *
     *
     * @type {Duration}
     */
    get durationEqualNotAllowed() {
        return this.data[24];
    }
    set durationEqualNotAllowed(v) {
        this.setterImpl(24, v, 'durationEqualNotAllowed');
    }
    /**
     *
     *
     * @type {LocalTime}
     */
    get localTime() {
        return this.data[25];
    }
    set localTime(v) {
        this.setterImpl(25, v, 'localTime');
    }
    /**
     *
     *
     * @type {LocalTime}
     */
    get localTimeEqualNotAllowed() {
        return this.data[26];
    }
    set localTimeEqualNotAllowed(v) {
        this.setterImpl(26, v, 'localTimeEqualNotAllowed');
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 27);
            data[1] = 4128706800000;
            data[2] = 7.5;
            data[3] = 4128706800000;
            data[4] = 7;
            data[5] = 4128706800000;
            data[6] = 7;
            data[7] = 1609455600000;
            data[8] = 1605135600000;
            data[9] = 1609455600000;
            data[10] = 1605135600000;
            data[11] = 1609455600000;
            data[12] = 1605135600000;
            data[13] = 44;
            data[14] = 7;
            data[15] = 4128706800000;
            data[16] = 7;
            data[17] = 4128706800000;
            data[18] = 7;
            data[19] = 4128706800000;
            data[20] = 7;
            data[21] = 4128706800000;
            data[22] = 7;
            data[23] = 4128706800000;
            data[24] = 7;
            data[25] = 7200000;
            data[26] = 3600000;
        }
        // propagate new raw data to children
    }
    get dni() {
        return '279';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '279', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
export class StoryBookApiValidationsMaxFailsCompareNode extends ApiObjectWrapper {
    constructor(api, idRaw = null) {
        super(api, StoryBookApiValidationsMaxFailsCompareNode);
        this.api = api;
        this.parent = null;
        this._id = null;
        this.attributeInfoThis = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'compareNode',
            id: 'VALIDATIONS_MAX_FAILS_COMPARE_NODE',
        });
        this.attributeInfoNumberComparedNode = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'numberComparedNode',
            id: 'VALIDATIONS_MAX_FAILS_COMPARE_NODE_NUMBER_COMPARED_NODE',
            primitiveType: PApiPrimitiveTypes.number,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.maxDecimalPlacesCount(0, PApiPrimitiveTypes.number, undefined);
                    },
                ];
            },
        });
        this.attributeInfoNumber = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'number',
            id: 'VALIDATIONS_MAX_FAILS_COMPARE_NODE_NUMBER',
            primitiveType: PApiPrimitiveTypes.number,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(() => this.numberComparedNode, true, PApiPrimitiveTypes.number, 'VALIDATIONS_MAX_FAILS_COMPARE_NODE_NUMBER_COMPARED_NODE', undefined);
                        return null;
                    },
                    () => {
                        return this.api.validators.maxDecimalPlacesCount(0, PApiPrimitiveTypes.number, undefined);
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Diese Eingabe darf nicht größer sein als »VALIDATIONS_MAX_FAILS_COMPARE_NODE_NUMBER_COMPARED_NODE«.',
            }
        });
        this.attributeInfoIntegerComparedNode = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'integerComparedNode',
            id: 'VALIDATIONS_MAX_FAILS_COMPARE_NODE_INTEGER_COMPARED_NODE',
            primitiveType: PApiPrimitiveTypes.Integer,
        });
        this.attributeInfoInteger = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'integer',
            id: 'VALIDATIONS_MAX_FAILS_COMPARE_NODE_INTEGER',
            primitiveType: PApiPrimitiveTypes.Integer,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(() => this.integerComparedNode, true, PApiPrimitiveTypes.Integer, 'VALIDATIONS_MAX_FAILS_COMPARE_NODE_INTEGER_COMPARED_NODE', undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Diese Eingabe darf nicht größer sein als »VALIDATIONS_MAX_FAILS_COMPARE_NODE_INTEGER_COMPARED_NODE«.',
            }
        });
        this.attributeInfoCurrencyComparedNode = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'currencyComparedNode',
            id: 'VALIDATIONS_MAX_FAILS_COMPARE_NODE_CURRENCY_COMPARED_NODE',
            primitiveType: PApiPrimitiveTypes.Currency,
        });
        this.attributeInfoCurrency = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'currency',
            id: 'VALIDATIONS_MAX_FAILS_COMPARE_NODE_CURRENCY',
            primitiveType: PApiPrimitiveTypes.Currency,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(() => this.currencyComparedNode, true, PApiPrimitiveTypes.Currency, 'VALIDATIONS_MAX_FAILS_COMPARE_NODE_CURRENCY_COMPARED_NODE', undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Diese Eingabe darf nicht größer sein als »VALIDATIONS_MAX_FAILS_COMPARE_NODE_CURRENCY_COMPARED_NODE«.',
            }
        });
        this.attributeInfoDateTimeComparedNode = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'dateTimeComparedNode',
            id: 'VALIDATIONS_MAX_FAILS_COMPARE_NODE_DATE_TIME_COMPARED_NODE',
            primitiveType: PApiPrimitiveTypes.DateTime,
        });
        this.attributeInfoDateTime = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'dateTime',
            id: 'VALIDATIONS_MAX_FAILS_COMPARE_NODE_DATE_TIME',
            primitiveType: PApiPrimitiveTypes.DateTime,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(() => this.dateTimeComparedNode, true, PApiPrimitiveTypes.DateTime, 'VALIDATIONS_MAX_FAILS_COMPARE_NODE_DATE_TIME_COMPARED_NODE', undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Diese Eingabe darf nicht größer sein als »VALIDATIONS_MAX_FAILS_COMPARE_NODE_DATE_TIME_COMPARED_NODE«.',
            }
        });
        this.attributeInfoDateComparedNode = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'dateComparedNode',
            id: 'VALIDATIONS_MAX_FAILS_COMPARE_NODE_DATE_COMPARED_NODE',
            primitiveType: PApiPrimitiveTypes.Date,
        });
        this.attributeInfoDate = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'date',
            id: 'VALIDATIONS_MAX_FAILS_COMPARE_NODE_DATE',
            primitiveType: PApiPrimitiveTypes.Date,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(() => this.dateComparedNode, true, PApiPrimitiveTypes.Date, 'VALIDATIONS_MAX_FAILS_COMPARE_NODE_DATE_COMPARED_NODE', undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Diese Eingabe darf nicht größer sein als »VALIDATIONS_MAX_FAILS_COMPARE_NODE_DATE_COMPARED_NODE«.',
            }
        });
        this.attributeInfoDateExclusiveEndComparedNode = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'dateExclusiveEndComparedNode',
            id: 'VALIDATIONS_MAX_FAILS_COMPARE_NODE_DATE_EXCLUSIVE_END_COMPARED_NODE',
            primitiveType: PApiPrimitiveTypes.DateExclusiveEnd,
        });
        this.attributeInfoDateExclusiveEnd = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'dateExclusiveEnd',
            id: 'VALIDATIONS_MAX_FAILS_COMPARE_NODE_DATE_EXCLUSIVE_END',
            primitiveType: PApiPrimitiveTypes.DateExclusiveEnd,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(() => this.dateExclusiveEndComparedNode, true, PApiPrimitiveTypes.DateExclusiveEnd, 'VALIDATIONS_MAX_FAILS_COMPARE_NODE_DATE_EXCLUSIVE_END_COMPARED_NODE', undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Diese Eingabe darf nicht größer sein als »VALIDATIONS_MAX_FAILS_COMPARE_NODE_DATE_EXCLUSIVE_END_COMPARED_NODE«.',
            }
        });
        this.attributeInfoMinutesComparedNode = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'minutesComparedNode',
            id: 'VALIDATIONS_MAX_FAILS_COMPARE_NODE_MINUTES_COMPARED_NODE',
            primitiveType: PApiPrimitiveTypes.Minutes,
        });
        this.attributeInfoMinutes = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'minutes',
            id: 'VALIDATIONS_MAX_FAILS_COMPARE_NODE_MINUTES',
            primitiveType: PApiPrimitiveTypes.Minutes,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(() => this.minutesComparedNode, true, PApiPrimitiveTypes.Minutes, 'VALIDATIONS_MAX_FAILS_COMPARE_NODE_MINUTES_COMPARED_NODE', undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Diese Eingabe darf nicht größer sein als »VALIDATIONS_MAX_FAILS_COMPARE_NODE_MINUTES_COMPARED_NODE«.',
            }
        });
        this.attributeInfoHoursComparedNode = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'hoursComparedNode',
            id: 'VALIDATIONS_MAX_FAILS_COMPARE_NODE_HOURS_COMPARED_NODE',
            primitiveType: PApiPrimitiveTypes.Hours,
        });
        this.attributeInfoHours = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'hours',
            id: 'VALIDATIONS_MAX_FAILS_COMPARE_NODE_HOURS',
            primitiveType: PApiPrimitiveTypes.Hours,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(() => this.hoursComparedNode, true, PApiPrimitiveTypes.Hours, 'VALIDATIONS_MAX_FAILS_COMPARE_NODE_HOURS_COMPARED_NODE', undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Diese Eingabe darf nicht größer sein als »VALIDATIONS_MAX_FAILS_COMPARE_NODE_HOURS_COMPARED_NODE«.',
            }
        });
        this.attributeInfoDaysComparedNode = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'daysComparedNode',
            id: 'VALIDATIONS_MAX_FAILS_COMPARE_NODE_DAYS_COMPARED_NODE',
            primitiveType: PApiPrimitiveTypes.Days,
        });
        this.attributeInfoDays = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'days',
            id: 'VALIDATIONS_MAX_FAILS_COMPARE_NODE_DAYS',
            primitiveType: PApiPrimitiveTypes.Days,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(() => this.daysComparedNode, true, PApiPrimitiveTypes.Days, 'VALIDATIONS_MAX_FAILS_COMPARE_NODE_DAYS_COMPARED_NODE', undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Diese Eingabe darf nicht größer sein als »VALIDATIONS_MAX_FAILS_COMPARE_NODE_DAYS_COMPARED_NODE«.',
            }
        });
        this.attributeInfoMonthsComparedNode = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'monthsComparedNode',
            id: 'VALIDATIONS_MAX_FAILS_COMPARE_NODE_MONTHS_COMPARED_NODE',
            primitiveType: PApiPrimitiveTypes.Months,
        });
        this.attributeInfoMonths = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'months',
            id: 'VALIDATIONS_MAX_FAILS_COMPARE_NODE_MONTHS',
            primitiveType: PApiPrimitiveTypes.Months,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(() => this.monthsComparedNode, true, PApiPrimitiveTypes.Months, 'VALIDATIONS_MAX_FAILS_COMPARE_NODE_MONTHS_COMPARED_NODE', undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Diese Eingabe darf nicht größer sein als »VALIDATIONS_MAX_FAILS_COMPARE_NODE_MONTHS_COMPARED_NODE«.',
            }
        });
        this.attributeInfoYearsComparedNode = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'yearsComparedNode',
            id: 'VALIDATIONS_MAX_FAILS_COMPARE_NODE_YEARS_COMPARED_NODE',
            primitiveType: PApiPrimitiveTypes.Years,
        });
        this.attributeInfoYears = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'years',
            id: 'VALIDATIONS_MAX_FAILS_COMPARE_NODE_YEARS',
            primitiveType: PApiPrimitiveTypes.Years,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(() => this.yearsComparedNode, true, PApiPrimitiveTypes.Years, 'VALIDATIONS_MAX_FAILS_COMPARE_NODE_YEARS_COMPARED_NODE', undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Diese Eingabe darf nicht größer sein als »VALIDATIONS_MAX_FAILS_COMPARE_NODE_YEARS_COMPARED_NODE«.',
            }
        });
        this.attributeInfoDurationComparedNode = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'durationComparedNode',
            id: 'VALIDATIONS_MAX_FAILS_COMPARE_NODE_DURATION_COMPARED_NODE',
            primitiveType: PApiPrimitiveTypes.Duration,
        });
        this.attributeInfoDuration = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'duration',
            id: 'VALIDATIONS_MAX_FAILS_COMPARE_NODE_DURATION',
            primitiveType: PApiPrimitiveTypes.Duration,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(() => this.durationComparedNode, true, PApiPrimitiveTypes.Duration, 'VALIDATIONS_MAX_FAILS_COMPARE_NODE_DURATION_COMPARED_NODE', undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Diese Eingabe darf nicht größer sein als »VALIDATIONS_MAX_FAILS_COMPARE_NODE_DURATION_COMPARED_NODE«.',
            }
        });
        this.attributeInfoLocalTimeComparedNode = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'localTimeComparedNode',
            id: 'VALIDATIONS_MAX_FAILS_COMPARE_NODE_LOCAL_TIME_COMPARED_NODE',
            primitiveType: PApiPrimitiveTypes.LocalTime,
        });
        this.attributeInfoLocalTime = new ApiAttributeInfo({
            apiObjWrapper: this,
            name: 'localTime',
            id: 'VALIDATIONS_MAX_FAILS_COMPARE_NODE_LOCAL_TIME',
            primitiveType: PApiPrimitiveTypes.LocalTime,
            validations: function () {
                return [
                    () => {
                        return this.api.validators.max(() => this.localTimeComparedNode, true, PApiPrimitiveTypes.LocalTime, 'VALIDATIONS_MAX_FAILS_COMPARE_NODE_LOCAL_TIME_COMPARED_NODE', undefined);
                        return null;
                    },
                ];
            },
            vars: {
                expectedValidationError: 'Diese Eingabe darf nicht größer sein als »VALIDATIONS_MAX_FAILS_COMPARE_NODE_LOCAL_TIME_COMPARED_NODE«.',
            }
        });
        this._updateRawData(Meta.createNewObject(false, idRaw), true);
        // set parent attribute
    }
    get id() {
        return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData));
    }
    /**
     *
     *
     * @type {number}
     */
    get numberComparedNode() {
        return this.data[1];
    }
    set numberComparedNode(v) {
        this.setterImpl(1, v, 'numberComparedNode');
    }
    /**
     *
     *
     * @type {number}
     */
    get number() {
        return this.data[2];
    }
    set number(v) {
        this.setterImpl(2, v, 'number');
    }
    /**
     *
     *
     * @type {Integer}
     */
    get integerComparedNode() {
        return this.data[3];
    }
    set integerComparedNode(v) {
        this.setterImpl(3, v, 'integerComparedNode');
    }
    /**
     *
     *
     * @type {Integer}
     */
    get integer() {
        return this.data[4];
    }
    set integer(v) {
        this.setterImpl(4, v, 'integer');
    }
    /**
     *
     *
     * @type {Currency}
     */
    get currencyComparedNode() {
        return this.data[5];
    }
    set currencyComparedNode(v) {
        this.setterImpl(5, v, 'currencyComparedNode');
    }
    /**
     *
     *
     * @type {Currency}
     */
    get currency() {
        return this.data[6];
    }
    set currency(v) {
        this.setterImpl(6, v, 'currency');
    }
    /**
     *
     *
     * @type {DateTime}
     */
    get dateTimeComparedNode() {
        return this.data[7];
    }
    set dateTimeComparedNode(v) {
        this.setterImpl(7, v, 'dateTimeComparedNode');
    }
    /**
     *
     *
     * @type {DateTime}
     */
    get dateTime() {
        return this.data[8];
    }
    set dateTime(v) {
        this.setterImpl(8, v, 'dateTime');
    }
    /**
     *
     *
     * @type {Date}
     */
    get dateComparedNode() {
        return this.data[9];
    }
    set dateComparedNode(v) {
        this.setterImpl(9, v, 'dateComparedNode');
    }
    /**
     *
     *
     * @type {Date}
     */
    get date() {
        return this.data[10];
    }
    set date(v) {
        this.setterImpl(10, v, 'date');
    }
    /**
     *
     *
     * @type {DateExclusiveEnd}
     */
    get dateExclusiveEndComparedNode() {
        return this.data[11];
    }
    set dateExclusiveEndComparedNode(v) {
        this.setterImpl(11, v, 'dateExclusiveEndComparedNode');
    }
    /**
     *
     *
     * @type {DateExclusiveEnd}
     */
    get dateExclusiveEnd() {
        return this.data[12];
    }
    set dateExclusiveEnd(v) {
        this.setterImpl(12, v, 'dateExclusiveEnd');
    }
    /**
     *
     *
     * @type {Minutes}
     */
    get minutesComparedNode() {
        return this.data[13];
    }
    set minutesComparedNode(v) {
        this.setterImpl(13, v, 'minutesComparedNode');
    }
    /**
     *
     *
     * @type {Minutes}
     */
    get minutes() {
        return this.data[14];
    }
    set minutes(v) {
        this.setterImpl(14, v, 'minutes');
    }
    /**
     *
     *
     * @type {Hours}
     */
    get hoursComparedNode() {
        return this.data[15];
    }
    set hoursComparedNode(v) {
        this.setterImpl(15, v, 'hoursComparedNode');
    }
    /**
     *
     *
     * @type {Hours}
     */
    get hours() {
        return this.data[16];
    }
    set hours(v) {
        this.setterImpl(16, v, 'hours');
    }
    /**
     *
     *
     * @type {Days}
     */
    get daysComparedNode() {
        return this.data[17];
    }
    set daysComparedNode(v) {
        this.setterImpl(17, v, 'daysComparedNode');
    }
    /**
     *
     *
     * @type {Days}
     */
    get days() {
        return this.data[18];
    }
    set days(v) {
        this.setterImpl(18, v, 'days');
    }
    /**
     *
     *
     * @type {Months}
     */
    get monthsComparedNode() {
        return this.data[19];
    }
    set monthsComparedNode(v) {
        this.setterImpl(19, v, 'monthsComparedNode');
    }
    /**
     *
     *
     * @type {Months}
     */
    get months() {
        return this.data[20];
    }
    set months(v) {
        this.setterImpl(20, v, 'months');
    }
    /**
     *
     *
     * @type {Years}
     */
    get yearsComparedNode() {
        return this.data[21];
    }
    set yearsComparedNode(v) {
        this.setterImpl(21, v, 'yearsComparedNode');
    }
    /**
     *
     *
     * @type {Years}
     */
    get years() {
        return this.data[22];
    }
    set years(v) {
        this.setterImpl(22, v, 'years');
    }
    /**
     *
     *
     * @type {Duration}
     */
    get durationComparedNode() {
        return this.data[23];
    }
    set durationComparedNode(v) {
        this.setterImpl(23, v, 'durationComparedNode');
    }
    /**
     *
     *
     * @type {Duration}
     */
    get duration() {
        return this.data[24];
    }
    set duration(v) {
        this.setterImpl(24, v, 'duration');
    }
    /**
     *
     *
     * @type {LocalTime}
     */
    get localTimeComparedNode() {
        return this.data[25];
    }
    set localTimeComparedNode(v) {
        this.setterImpl(25, v, 'localTimeComparedNode');
    }
    /**
     *
     *
     * @type {LocalTime}
     */
    get localTime() {
        return this.data[26];
    }
    set localTime(v) {
        this.setterImpl(26, v, 'localTime');
    }
    _fixIds(_idReplacements) {
    }
    _updateRawData(data, generateMissingData) {
        super._updateRawData(data, generateMissingData);
        this.data = data;
        // update id wrapper
        const idRawData = Meta.getId(data);
        this._id = idRawData === null ? null : Id.create(idRawData);
        // create missing/default data
        if (generateMissingData && data) {
            this.fillWithDefaultValues(data, 27);
            data[1] = 7;
            data[2] = 4128706800000;
            data[3] = 7;
            data[4] = 4128706800000;
            data[5] = 7;
            data[6] = 4128706800000;
            data[7] = 1577833200000;
            data[8] = 1577919600000;
            data[9] = 1577833200000;
            data[10] = 1577919600000;
            data[11] = 1577833200000;
            data[12] = 1577919600000;
            data[13] = 7;
            data[14] = 99999999999999;
            data[15] = 7;
            data[16] = 4128706800000;
            data[17] = 7;
            data[18] = 4128706800000;
            data[19] = 7;
            data[20] = 4128706800000;
            data[21] = 7;
            data[22] = 4128706800000;
            data[23] = 7;
            data[24] = 4128706800000;
            data[25] = 3600000;
            data[26] = 7200000;
        }
        // propagate new raw data to children
    }
    get dni() {
        return '280';
    }
    static loadDetailed(api, id, { success = null, error = null, searchParams = null } = {}) {
        return ApiObjectWrapper.loadDetailedImpl(api, id, '280', { success: success, error: error, searchParams: searchParams });
    }
    assumeValidated() {
        // TODO: PLANO-151346
    }
}
//# sourceMappingURL=story-book-api.service.ag.js.map