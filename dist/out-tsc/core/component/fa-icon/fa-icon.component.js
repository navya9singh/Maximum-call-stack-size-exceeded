var _a, _b;
import { __decorate, __metadata } from "tslib";
import { Component, Input, ChangeDetectionStrategy } from '@angular/core';
import { PlanoFaIconPool } from '@plano/shared/core/plano-fa-icon-pool.enum';
import { Config } from '../../config';
import { LogService } from '../../log.service';
let FaIconComponent = class FaIconComponent {
    constructor(console) {
        this.console = console;
        /**
         * When set to true, the component will have a fixed width instead of one that orientates on the width of the icon.
         * Note that some icons are wider, and some are vertically shorter.
         * @default true
         */
        this.fixedWidth = true;
        this.textAlign = null;
        this._spin = false;
        this.flip = false;
        this.size = null;
        this.rotate = null;
        this.isLoading = false;
        this.theme = null;
        // TODO: Get rid of type PFaIcon here and use PlanoFaIconPoolValues only.
        this._icon = null;
    }
    get spin() {
        if (this.isLoading)
            return false;
        return this._spin;
    }
    get icon() {
        if (this.isLoading)
            return 'circle';
        if (Config.DEBUG) {
            const possibleEnumKey = (Object.keys(PlanoFaIconPool)).find((x) => PlanoFaIconPool[x] === this._icon);
            if (!possibleEnumKey) {
                this.console.debug(`\`${this._icon}\` is missing in PlanoFaIconPool`);
            }
        }
        return this._icon;
    }
    get isTextIcon() {
        if (this.isLoading)
            return null;
        if (this.icon === 'czk-sign')
            return true;
        if (this.icon === 'kr')
            return true;
        return false;
    }
    /**
     * Some icons are not available in FontAwesome, like Kč for Czech koruna.
     * In these cases we show simple ascii chars.
     */
    get iconText() {
        if (this.isLoading)
            return undefined;
        if (this.icon === 'czk-sign')
            return 'Kč';
        if (this.icon === 'kr')
            return 'kr';
        return undefined;
    }
    /**
     * A list of fontawesome classes. Generated by component properties.
     */
    get iconClasses() {
        const result = [];
        if (this.isLoading) {
            result.push('fa-loading');
            result.push('text-skeleton-animated');
        }
        if (this.theme !== null)
            result.push(`text-${this.theme}`);
        if (this.isTextIcon === true)
            result.push(`fa-text-icon`);
        if (this.fixedWidth)
            result.push('fa-fw');
        if (this.textAlign === 'left')
            result.push('text-left');
        if (this.textAlign === 'center')
            result.push('text-center');
        if (this.textAlign === 'right')
            result.push('text-right');
        if (this.spin)
            result.push('fa-spin');
        if (this.size)
            result.push(`fa-${this.size}`);
        if (this.rotate)
            result.push(`fa-rotate-${this.rotate}`);
        if (this.flip)
            result.push('fa-flip-horizontal');
        if (Array.isArray(this.icon)) {
            result.push(this.icon[0]);
            result.push(`fa-${this.icon[1]}`);
        }
        else {
            result.push(`fas`);
            result.push(`fa-${this.icon}`);
        }
        return result;
    }
};
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], FaIconComponent.prototype, "fixedWidth", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FaIconComponent.prototype, "textAlign", void 0);
__decorate([
    Input('spin'),
    __metadata("design:type", Boolean)
], FaIconComponent.prototype, "_spin", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], FaIconComponent.prototype, "flip", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FaIconComponent.prototype, "size", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FaIconComponent.prototype, "rotate", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FaIconComponent.prototype, "isLoading", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FaIconComponent.prototype, "theme", void 0);
__decorate([
    Input('icon'),
    __metadata("design:type", Object)
], FaIconComponent.prototype, "_icon", void 0);
FaIconComponent = __decorate([
    Component({
        // eslint-disable-next-line @angular-eslint/component-selector
        selector: 'fa-icon',
        templateUrl: './fa-icon.component.html',
        styleUrls: ['./fa-icon.component.scss'],
        changeDetection: ChangeDetectionStrategy.OnPush,
    }),
    __metadata("design:paramtypes", [LogService])
], FaIconComponent);
export { FaIconComponent };
//# sourceMappingURL=fa-icon.component.js.map